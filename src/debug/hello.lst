
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/src/debug/hello.elf:     file format elf32-littleriscv
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/src/debug/hello.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x00006664 memsz 0x00006664 flags rwx
    LOAD off    0x000077d8 vaddr 0x800007d8 paddr 0x800007d8 align 2**12
         filesz 0x00000000 memsz 0x00000c9c flags rw-
    LOAD off    0x00008000 vaddr 0x80000000 paddr 0x20406668 align 2**12
         filesz 0x000007d8 memsz 0x000007d8 flags rw-
    LOAD off    0x000087d8 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x000087d8 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             00000194  20400000  20400000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             000057b6  20400200  20400200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00000ca0  204059b8  204059b8  000069b8  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       0000000c  20406658  20406658  00007658  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             000007d8  80000000  20406668  00008000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              0000009c  800007d8  800007d8  000077d8  2**3  ALLOC
  6 .stack            00000400  80000874  80000874  000077d8  2**0  ALLOC
  7 .heap             00000800  80000c74  80000c74  000077d8  2**0  ALLOC
  8 .debug_info       00022c6c  00000000  00000000  000087d8  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     000032e9  00000000  00000000  0002b444  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    00000a38  00000000  00000000  0002e730  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     00000860  00000000  00000000  0002f168  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       0000a5da  00000000  00000000  0002f9c8  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        0000448a  00000000  00000000  00039fa2  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  0003e42c  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  0003e454  2**0  CONTENTS, READONLY
 16 .debug_frame      000028a8  00000000  00000000  0003e480  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
20400200 l    d  .text	00000000 .text
204059b8 l    d  .rodata	00000000 .rodata
20406658 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
800007d8 l    d  .bss	00000000 .bss
80000874 l    d  .stack	00000000 .stack
80000c74 l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__qemu-sifive-e31_a-entry.o
20400060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
20400136 l       .init	00000000 _skip_init
20405a78 l       .rodata	00000000 argv
20405a7c l       .rodata	00000000 envp
20405a80 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 hello.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20400700 l     F .text	00000068 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
20400c50 l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80000790 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
800007e4 l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
2040191e l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
204019c8 l     F .text	00000026 __metal_driver_sifive_clint0_control_base
204019ee l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
20401a12 l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
20401a4e l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
20401bae l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
204020de l     F .text	00000024 __metal_driver_cpu_hartid
20402102 l     F .text	0000002a __metal_driver_cpu_timebase
2040212c l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
2040398e l     F .text	0000002a __metal_driver_sifive_plic0_control_base
204039b8 l     F .text	00000028 __metal_driver_sifive_plic0_num_interrupts
204039e0 l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
20403a08 l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
20403a30 l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_fe310-g000_hfrosc.c
20403f70 l     F .text	0000001a __metal_driver_sifive_fe310_g000_hfrosc_ref
20403f8a l     F .text	00000016 __metal_driver_sifive_fe310_g000_hfrosc_config_base
20403fa0 l     F .text	00000014 __metal_driver_sifive_fe310_g000_hfrosc_config_offset
20403fb4 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_vtable
00000000 l    df *ABS*	00000000 sifive_fe310-g000_hfxosc.c
2040406c l     F .text	0000001a __metal_driver_sifive_fe310_g000_hfxosc_ref
20404086 l     F .text	00000016 __metal_driver_sifive_fe310_g000_hfxosc_config_base
2040409c l     F .text	00000014 __metal_driver_sifive_fe310_g000_hfxosc_config_offset
204040b0 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_vtable
00000000 l    df *ABS*	00000000 sifive_fe310-g000_pll.c
20404158 l     F .text	0000001a __metal_driver_sifive_fe310_g000_pll_pllsel0
20404172 l     F .text	0000001a __metal_driver_sifive_fe310_g000_pll_pllref
2040418c l     F .text	00000016 __metal_driver_sifive_fe310_g000_pll_divider_base
204041a2 l     F .text	00000014 __metal_driver_sifive_fe310_g000_pll_divider_offset
204041b6 l     F .text	00000012 __metal_driver_sifive_fe310_g000_pll_config_base
204041c8 l     F .text	00000010 __metal_driver_sifive_fe310_g000_pll_config_offset
204041d8 l     F .text	00000016 __metal_driver_sifive_fe310_g000_pll_init_rate
204041ee l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_base
20404200 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_vtable
20405d2c l     O .rodata	00000880 pll_configs
20404212 l     F .text	0000004e get_pll_config_freq
20404260 l     F .text	00000028 metal_sifive_fe310_g000_pll_init
2040449c l     F .text	000000ac find_closest_config
20404548 l     F .text	00000132 configure_pll
204047de l     F .text	0000002a use_hfxosc
00000000 l    df *ABS*	00000000 sifive_fe310-g000_prci.c
20404808 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_base
00000000 l    df *ABS*	00000000 sifive_gpio0.c
20404880 l     F .text	00000026 __metal_driver_sifive_gpio0_base
204048a6 l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
204048d0 l     F .text	000001b4 __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_test0.c
2040513a l     F .text	00000026 __metal_driver_sifive_test0_base
00000000 l    df *ABS*	00000000 sifive_uart0.c
204051aa l     F .text	0000002a __metal_driver_sifive_uart0_control_base
204051d4 l     F .text	0000002e __metal_driver_sifive_uart0_interrupt_parent
20405202 l     F .text	00000028 __metal_driver_sifive_uart0_interrupt_line
2040522a l     F .text	0000002e __metal_driver_sifive_uart0_clock
20405258 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux
20405282 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_output_selector
204052ac l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_source_selector
2040549e l     F .text	000000d8 pre_rate_change_callback_func
20405576 l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__qemu-sifive-e31_a-vector.o
20405880 l       .text	00000000 IRQ_0
20405884 l       .text	00000000 IRQ_1
20405888 l       .text	00000000 IRQ_2
2040588c l       .text	00000000 IRQ_3
20405890 l       .text	00000000 IRQ_4
20405894 l       .text	00000000 IRQ_5
20405898 l       .text	00000000 IRQ_6
2040589c l       .text	00000000 IRQ_7
204058a0 l       .text	00000000 IRQ_8
204058a4 l       .text	00000000 IRQ_9
204058a8 l       .text	00000000 IRQ_10
204058ac l       .text	00000000 IRQ_11
204058b0 l       .text	00000000 IRQ_12
204058b4 l       .text	00000000 IRQ_13
204058b8 l       .text	00000000 IRQ_14
204058bc l       .text	00000000 IRQ_15
204058c0 l       .text	00000000 IRQ_LC0
204058c4 l       .text	00000000 IRQ_LC1
204058c8 l       .text	00000000 IRQ_LC2
204058cc l       .text	00000000 IRQ_LC3
204058d0 l       .text	00000000 IRQ_LC4
204058d4 l       .text	00000000 IRQ_LC5
204058d8 l       .text	00000000 IRQ_LC6
204058dc l       .text	00000000 IRQ_LC7
204058e0 l       .text	00000000 IRQ_LC8
204058e4 l       .text	00000000 IRQ_LC9
204058e8 l       .text	00000000 IRQ_LC10
204058ec l       .text	00000000 IRQ_LC11
204058f0 l       .text	00000000 IRQ_LC12
204058f4 l       .text	00000000 IRQ_LC13
204058f8 l       .text	00000000 IRQ_LC14
204058fc l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20405900 l     F .text	00000062 __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000000 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
20406664 l       .init_array	00000000 __fini_array_end
20406664 l       .init_array	00000000 __fini_array_start
20406664 l       .init_array	00000000 __init_array_end
20406658 l       .init_array	00000000 __preinit_array_end
20406658 l       .init_array	00000000 __init_array_start
20406658 l       .init_array	00000000 __preinit_array_start
20406634 g     O .rodata	00000020 __metal_driver_vtable_sifive_uart0
204010b4 g     F .text	00000028 _isatty_r
2040293a  w    F .text	00000092 metal_lc4_interrupt_vector_handler
2040029a g     F .text	000000da _puts_r
204010dc g     F .text	0000002c _lseek_r
2040570c g     F .text	00000026 metal_clock_get_rate_hz
204053fe g     F .text	000000a0 __metal_driver_sifive_uart0_set_baud_rate
20401d8a g     F .text	00000054 __metal_driver_riscv_clint0_set_vector_mode
204028a8  w    F .text	00000092 metal_lc3_interrupt_vector_handler
204030fa g     F .text	00000038 __metal_valid_interrupt_id
20400256 g     F .text	00000044 printf
2040351c g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80000f88 g       .data	00000000 __global_pointer$
204056b8 g     F .text	00000054 _metal_clock_append_to_callbacks
20403a80 g     F .text	00000038 __metal_plic0_complete_interrupt
2040337a g     F .text	0000014e __metal_driver_riscv_cpu_controller_interrupt_register
20400ffa g     F .text	00000036 __sseek
204007b6 g     F .text	0000006a __sinit
20400382 g     F .text	000000c0 __swbuf_r
20400772 g     F .text	00000044 __sfmoreglue
20401124 g     F .text	00000002 __malloc_unlock
20405800 g     F .text	0000002a metal_cpu_get
80000740 g     O .data	00000020 __metal_dt_serial_10013000
20404d14 g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
20405a8c g     O .rodata	0000004c __metal_driver_vtable_riscv_clint0
80000874 g       .bss	00000000 metal_segment_bss_target_end
20401a7e g     F .text	0000009a __metal_clint0_mtime_get
20403922 g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
20404ac4 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_input
20405160 g     F .text	0000004a __metal_driver_sifive_test0_exit
204016a2 g     F .text	0000000c __errno
80000000 g       .data	00000000 metal_segment_itim_target_start
20405316 g     F .text	00000032 __metal_driver_sifive_uart0_txready
20400070 g     F .init	0000000e __metal_synchronize_harts
800007d8 g       .bss	00000000 metal_segment_bss_target_start
20401b18 g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
2040108a g     F .text	0000002a _fstat_r
20404f64 g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
80000870 g     O .bss	00000004 errno
2040432c g     F .text	00000170 __metal_driver_sifive_fe310_g000_pll_get_rate_hz
00000400 g       *ABS*	00000000 __stack_size
2040577a g     F .text	00000030 metal_clock_register_pre_rate_change_callback
20402c14  w    F .text	00000092 metal_lc9_interrupt_vector_handler
20405ce0 g     O .rodata	0000004c __metal_driver_vtable_riscv_plic0
20405ca0 g     O .rodata	00000040 __metal_driver_vtable_cpu
2040199a g     F .text	0000002e metal_uart_set_baud_rate
204055a6 g     F .text	000000d2 __metal_driver_sifive_uart0_init
204035b0 g     F .text	00000072 __metal_driver_cpu_mcycle_get
204065ac g     O .rodata	0000000c __metal_driver_vtable_sifive_fe310_g000_pll
80000c74 g       .heap	00000000 metal_segment_heap_target_start
20400768 g     F .text	0000000a _cleanup_r
800007a0 g     O .data	00000004 __metal_dt_cpu_0
20402b82  w    F .text	00000092 metal_lc8_interrupt_vector_handler
2040467a g     F .text	00000164 __metal_driver_sifive_fe310_g000_pll_set_rate_hz
20400374 g     F .text	0000000e puts
20402e5c  w    F .text	00000092 metal_lc13_interrupt_vector_handler
204022c0 g     F .text	00000018 __metal_default_exception_handler
20401522 g     F .text	00000026 _fstat
204020aa g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
20403b1c g     F .text	00000062 __metal_plic0_set_priority
20403538 g     F .text	0000005c __metal_driver_riscv_cpu_controller_set_vector_mode
20402156 g     F .text	0000002c __metal_driver_cpu_get
20405c54 g     O .rodata	0000004c __metal_driver_vtable_riscv_cpu_intc
204021b4 g     F .text	00000018 __metal_interrupt_global_disable
20402af0  w    F .text	00000092 metal_lc7_interrupt_vector_handler
20402ca6  w    F .text	00000092 metal_lc10_interrupt_vector_handler
20400f54 g     F .text	00000028 _sbrk_r
20403f28 g     F .text	00000048 __metal_driver_riscv_plic0_disable
204031ee g     F .text	0000004e __metal_exception_register
204014d4 g     F .text	0000002c _read_r
20403744 g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
20404ba6 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
204023ac g     F .text	00000064 __metal_default_sw_handler
204057aa g     F .text	00000030 metal_clock_register_post_rate_change_callback
8000006c g     O .data	0000000c __metal_dt_clock_2
204052d6 g     F .text	0000001e __metal_driver_sifive_uart0_interrupt_controller
20401548 g     F .text	00000020 _isatty
20404c6c g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
800007cc g     O .data	00000008 __metal_driver_vtable_fixed_clock
8000078c g     O .data	00000004 _global_impure_ptr
20402410  w    F .text	0000008e metal_timer_interrupt_vector_handler
20401712 g     F .text	0000006a __libc_init_array
20404be6 g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
20402d38  w    F .text	00000092 metal_lc11_interrupt_vector_handler
20404136 g     F .text	00000022 __metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz
204034c8 g     F .text	0000002a __metal_driver_riscv_cpu_controller_interrupt_enable
204015bc g     F .text	0000006e _sbrk
20404b60 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
20405678 g     F .text	00000040 _metal_clock_call_all_callbacks
20400174 g     F .init	00000002 _init
20402216 g     F .text	0000001a __metal_interrupt_timer_disable
20404d5e g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
204037fa g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
204065f8 g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
20404cac g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
204016da g     F .text	00000038 __libc_fini_array
80000778 g     O .data	0000000c __metal_dt_clock_4
204050ec g     F .text	00000020 __metal_driver_gpio_interrupt_controller
20403784 g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .data	00000000 metal_segment_data_target_start
20402268 g     F .text	0000002c __metal_interrupt_local_enable
20402076 g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
204018cc g     F .text	0000002c metal_tty_putc
20403c3e g     F .text	00000018 __metal_plic0_default_handler
80000060 g     O .data	0000000c __metal_dt_clock_0
2040024e g     F .text	00000000 add
00000800 g       *ABS*	00000000 __heap_size
204059dc g     O .rodata	00000020 __sf_fake_stderr
2040224c g     F .text	0000001c __metal_interrupt_external_disable
204052f4 g     F .text	00000022 __metal_driver_sifive_uart0_get_interrupt_id
20403594 g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
2040323c g     F .text	0000013e __metal_driver_riscv_cpu_controller_interrupt_init
20400c7a g     F .text	00000042 __sfputs_r
204038dc g     F .text	00000046 __metal_driver_cpu_exception_register
204021cc g     F .text	00000018 __metal_interrupt_software_enable
20402784  w    F .text	00000092 metal_lc1_interrupt_vector_handler
20401108 g     F .text	0000001a memchr
20400ac6 g     F .text	000000ac _free_r
800007e0 g     O .bss	00000004 _global_atexit
20403012 g     F .text	00000050 __metal_controller_interrupt_vector_mode
20401804 g     F .text	000000c8 __call_exitprocs
80000c74 g       .stack	00000000 _sp
2040007e g     F .init	00000000 _start
20403fc6 g     F .text	00000084 __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz
20401568 g     F .text	0000002a _lseek
204038bc g     F .text	00000020 __metal_driver_cpu_controller_interrupt
20403950 g     F .text	0000001e __metal_driver_cpu_get_exception_pc
20402230 g     F .text	0000001c __metal_interrupt_external_enable
2040177c g     F .text	00000088 __register_exitproc
20405348 g     F .text	00000040 __metal_driver_sifive_uart0_putc
20403ce4 g     F .text	0000013c __metal_driver_riscv_plic0_init
20403ee0 g     F .text	00000048 __metal_driver_riscv_plic0_enable
20404b34 g     F .text	0000002c __metal_driver_sifive_gpio0_output
20402a5e  w    F .text	00000092 metal_lc6_interrupt_vector_handler
20402182 g     F .text	0000001a __metal_myhart_id
2040510c g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
2040231e  w    F .text	0000008e metal_software_interrupt_vector_handler
204034f2 g     F .text	0000002a __metal_driver_riscv_cpu_controller_interrupt_disable
20401062 g     F .text	00000028 _close_r
204053de g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
20401c6c g     F .text	000000da __metal_driver_riscv_clint0_register
80000798 g     O .data	00000008 __metal_dt_clint_2000000
20400442 g     F .text	00000110 __swsetup_r
20400820 g     F .text	0000009e __sfp
20405732 g     F .text	00000048 metal_clock_set_rate_hz
20400f7c g     F .text	00000030 __sread
20404a84 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_input
20400176  w    F .init	00000000 secondary_main
204022f0  w    F .text	0000002e metal_interrupt_vector_handler
20401122 g     F .text	00000002 __malloc_lock
2040069c g     F .text	00000064 _fflush_r
20403af0 g     F .text	0000002c __metal_plic0_get_threshold
2040481a g     F .text	0000002e __metal_driver_sifive_fe310_g000_prci_get_reg
204059fc g     O .rodata	00000020 __sf_fake_stdin
20403132 g     F .text	000000bc __metal_local_interrupt_enable
20401f42 g     F .text	00000134 __metal_driver_riscv_clint0_command_request
20400a1e g     F .text	000000a8 memset
204029cc  w    F .text	00000092 metal_lc5_interrupt_vector_handler
20400200 g     F .text	0000004e main
800007d8 g       .data	00000000 metal_segment_data_target_end
800007b0 g     O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_hfrosc
20403798 g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
2040385c g     F .text	00000060 __metal_driver_cpu_get_msip
20405866 g     F .text	00000016 metal_shutdown
80000000 g       .data	00000000 metal_segment_itim_target_end
2040396e g     F .text	00000020 __metal_driver_cpu_set_exception_pc
20403a52 g     F .text	0000002e __metal_plic0_claim_interrupt
20401030 g     F .text	00000006 __sclose
20402dca  w    F .text	00000092 metal_lc12_interrupt_vector_handler
20400b72 g     F .text	000000de _malloc_r
20401d6e g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
800007ac g     O .data	00000004 __metal_dt_prci_10008000
20403622 g     F .text	00000046 __metal_driver_cpu_timebase_get
20400252 g     F .text	00000000 inc
20400000 g       .init	00000000 _enter
2040582a g     F .text	0000001a metal_cpu_get_current_hartid
204040c2 g     F .text	00000074 __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz
20405880 g       .text	00000000 __metal_vector_table
20406668 g       *ABS*	00000000 metal_segment_itim_source_start
80000794  w    O .data	00000004 __metal_cpu_table
80000088 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
20400174 g     F .init	00000002 _fini
20400256 g     F .text	00000044 iprintf
2040219c g     F .text	00000018 __metal_interrupt_global_enable
20401698 g     F .text	0000000a atexit
204018f8 g     F .text	00000026 metal_tty_putc_raw
20401036 g     F .text	0000002c _write_r
204021fc g     F .text	0000001a __metal_interrupt_timer_enable
20405388 g     F .text	00000056 __metal_driver_sifive_uart0_getc
20401e90 g     F .text	000000b2 __metal_driver_riscv_clint0_disable
20401126 g     F .text	0000010c _printf_common
80000788 g     O .data	00000004 _impure_ptr
204036ce g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
20400552 g     F .text	0000014a __sflush_r
20405844 g     F .text	00000022 __metal_shutdown_exit
20404288 g     F .text	000000a4 __metal_driver_sifive_fe310_g000_pll_init
80000078 g     O .data	0000000c __metal_dt_clock_5
20404848 g     F .text	00000038 __metal_driver_sifive_fe310_g000_prci_set_reg
20405962 g     F .text	0000001e __metal_driver_fixed_clock_get_rate_hz
20401dde g     F .text	000000b2 __metal_driver_riscv_clint0_enable
800007c8 g     O .data	00000004 __metal_driver_vtable_sifive_test0
20406668 g       *ABS*	00000000 metal_segment_data_source_start
80001474 g       .heap	00000000 metal_segment_heap_target_end
20403062 g     F .text	00000098 __metal_controller_interrupt_vector
8000076c g     O .data	0000000c __metal_dt_clock_1
80000440 g     O .data	00000300 __metal_dt_interrupt_controller_c000000
2040092a g     F .text	00000058 __swhatbuf_r
20404c26 g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
2040249e g     F .text	00000066 __metal_default_timer_handler
2040162a g     F .text	0000006e _write
20403c56 g     F .text	0000008e __metal_plic0_handler
20402816  w    F .text	00000092 metal_lc2_interrupt_vector_handler
20402f80  w    F .text	00000092 metal_lc15_interrupt_vector_handler
204057da g     F .text	00000026 metal_cpu_interrupt_controller
800007a8 g     O .data	00000004 __metal_dt_test_100000
20400fac g     F .text	0000004e __swrite
204016ae g     F .text	0000002c exit
20400cbc g     F .text	00000298 _vfiprintf_r
204008be g     F .text	0000006c _fwalk_reent
20405980 g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
20405a1c g     O .rodata	00000020 __sf_fake_stdout
800007a4 g     O .data	00000004 __metal_dt_gpio_10012000
204022d8 g     F .text	00000018 __metal_default_interrupt_handler
2040196c g     F .text	0000002e metal_uart_putc
20401592 g     F .text	0000002a _read
20404b0a g     F .text	0000002a __metal_driver_sifive_gpio0_input
20402580 g     F .text	0000014c __metal_exception_handler
204026f2  w    F .text	00000092 metal_lc0_interrupt_vector_handler
204059a2 g     F .text	00000014 _exit
20403668 g     F .text	00000066 __metal_driver_cpu_mtime_get
20400982 g     F .text	0000009c __smakebuf_r
20401d46 g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
20401232 g     F .text	000002a2 _printf_i
800007dc g     O .bss	00000004 __malloc_sbrk_start
20402eee  w    F .text	00000092 metal_lc14_interrupt_vector_handler
800007b8 g     O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_hfxosc
20401be4 g     F .text	00000088 __metal_driver_riscv_clint0_init
800007d8 g     O .bss	00000004 __malloc_free_list
20400cbc g     F .text	00000298 _vfprintf_r
2040375a g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
20403bb2 g     F .text	0000008c __metal_plic0_enable
2040006e  w      .init	00000000 __register_frame_info
2040404a g     F .text	00000022 __metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz
2040376e g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
20402294 g     F .text	0000002c __metal_interrupt_local_disable
204021e4 g     F .text	00000018 __metal_interrupt_software_disable
20403b7e g     F .text	00000034 __metal_plic0_get_priority
20401940 g     F .text	0000002c metal_uart_init
80000760 g     O .data	0000000c __metal_dt_clock_3
20403ab8 g     F .text	00000038 __metal_plic0_set_threshold
20401500 g     F .text	00000022 _close
800007c0 g     O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_prci
00000000 g       *ABS*	00000000 __metal_boot_hart
20403e20 g     F .text	000000c0 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20400000 <_enter>:
_enter():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc01197          	auipc	gp,0x5fc01
20400004:	f8818193          	addi	gp,gp,-120 # 80000f88 <__global_pointer$>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400008:	00000297          	auipc	t0,0x0
2040000c:	05828293          	addi	t0,t0,88 # 20400060 <early_trap_vector>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20400014:	00000293          	li	t0,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/entry.S:33
    beqz t0, 1f
20400018:	00028463          	beqz	t0,20400020 <_enter+0x20>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2040001c:	7c105073          	csrwi	0x7c1,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20400020:	dfc00117          	auipc	sp,0xdfc00
20400024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20400028:	dfc00097          	auipc	ra,0xdfc00
2040002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/entry.S:53
    beqz ra, 1f
20400030:	00008363          	beqz	ra,20400036 <_enter+0x36>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/entry.S:54
    jalr ra
20400034:	9082                	jalr	ra
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20400036:	f1402573          	csrr	a0,mhartid
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/entry.S:61
    li a1, 0
2040003a:	4581                	li	a1,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/entry.S:62
    li a2, 0
2040003c:	4601                	li	a2,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/entry.S:63
    call _start
2040003e:	2081                	jal	2040007e <_start>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400040:	dfc00097          	auipc	ra,0xdfc00
20400044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/entry.S:69
    beqz ra, 1f
20400048:	00008363          	beqz	ra,2040004e <_enter+0x4e>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/entry.S:70
    jalr ra
2040004c:	9082                	jalr	ra
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2040004e:	00000297          	auipc	t0,0x0
20400052:	00c28293          	addi	t0,t0,12 # 2040005a <_enter+0x5a>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20400056:	30529073          	csrw	mtvec,t0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2040005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/entry.S:79
     j 1b
2040005e:	bff5                	j	2040005a <_enter+0x5a>

20400060 <early_trap_vector>:
early_trap_vector():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20400060:	342022f3          	csrr	t0,mcause
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/entry.S:90
    csrr t1, mepc
20400064:	34102373          	csrr	t1,mepc
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/entry.S:91
    csrr t2, mtval
20400068:	343023f3          	csrr	t2,mtval
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/entry.S:92
    j early_trap_vector
2040006c:	bfd5                	j	20400060 <early_trap_vector>

2040006e <__register_frame_info>:
__register_frame_info():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2040006e:	8082                	ret

20400070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20400070:	1141                	addi	sp,sp,-16
20400072:	c622                	sw	s0,12(sp)
20400074:	0800                	addi	s0,sp,16
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20400076:	0001                	nop
20400078:	4432                	lw	s0,12(sp)
2040007a:	0141                	addi	sp,sp,16
2040007c:	8082                	ret

2040007e <_start>:
_start():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2040007e:	8406                	mv	s0,ra
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400080:	5fc01197          	auipc	gp,0x5fc01
20400084:	f0818193          	addi	gp,gp,-248 # 80000f88 <__global_pointer$>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20400088:	cec18113          	addi	sp,gp,-788 # 80000c74 <_sp>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
2040008c:	4281                	li	t0,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
2040008e:	40000313          	li	t1,1024
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20400092:	00a28563          	beq	t0,a0,2040009c <_start+0x1e>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
20400096:	911a                	add	sp,sp,t1
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
20400098:	0285                	addi	t0,t0,1
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:60
  j 1b
2040009a:	bfe5                	j	20400092 <_start+0x14>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
2040009c:	ff017113          	andi	sp,sp,-16
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
204000a0:	00000293          	li	t0,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
204000a4:	08551963          	bne	a0,t0,20400136 <_skip_init>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
204000a8:	00006297          	auipc	t0,0x6
204000ac:	5c028293          	addi	t0,t0,1472 # 20406668 <metal_segment_data_source_start>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
204000b0:	5fc00317          	auipc	t1,0x5fc00
204000b4:	f5030313          	addi	t1,t1,-176 # 80000000 <metal_segment_data_target_start>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
204000b8:	85018393          	addi	t2,gp,-1968 # 800007d8 <metal_segment_data_target_end>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
204000bc:	00628c63          	beq	t0,t1,204000d4 <_start+0x56>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
204000c0:	00735a63          	bge	t1,t2,204000d4 <_start+0x56>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000c4:	0002a503          	lw	a0,0(t0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
204000c8:	0291                	addi	t0,t0,4
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
204000ca:	00a32023          	sw	a0,0(t1)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
204000ce:	0311                	addi	t1,t1,4
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
204000d0:	fe734ae3          	blt	t1,t2,204000c4 <_start+0x46>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
204000d4:	00006297          	auipc	t0,0x6
204000d8:	59428293          	addi	t0,t0,1428 # 20406668 <metal_segment_data_source_start>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
204000dc:	5fc00317          	auipc	t1,0x5fc00
204000e0:	f2430313          	addi	t1,t1,-220 # 80000000 <metal_segment_data_target_start>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
204000e4:	5fc00397          	auipc	t2,0x5fc00
204000e8:	f1c38393          	addi	t2,t2,-228 # 80000000 <metal_segment_data_target_start>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
204000ec:	00628c63          	beq	t0,t1,20400104 <_start+0x86>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
204000f0:	00735a63          	bge	t1,t2,20400104 <_start+0x86>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000f4:	0002a503          	lw	a0,0(t0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
204000f8:	0291                	addi	t0,t0,4
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
204000fa:	00a32023          	sw	a0,0(t1)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
204000fe:	0311                	addi	t1,t1,4
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20400100:	fe734ae3          	blt	t1,t2,204000f4 <_start+0x76>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20400104:	0000100f          	fence.i
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
20400108:	5fc00317          	auipc	t1,0x5fc00
2040010c:	6d030313          	addi	t1,t1,1744 # 800007d8 <metal_segment_data_target_end>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20400110:	8ec18393          	addi	t2,gp,-1812 # 80000874 <metal_segment_bss_target_end>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
20400114:	00735763          	bge	t1,t2,20400122 <_start+0xa4>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20400118:	00032023          	sw	zero,0(t1)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
2040011c:	0311                	addi	t1,t1,4
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
2040011e:	fe734de3          	blt	t1,t2,20400118 <_start+0x9a>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
20400122:	c211                	beqz	a2,20400126 <_start+0xa8>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:148
  jalr a2
20400124:	9602                	jalr	a2
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
20400126:	00001517          	auipc	a0,0x1
2040012a:	5b450513          	addi	a0,a0,1460 # 204016da <__libc_fini_array>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:153
  call atexit
2040012e:	56a010ef          	jal	ra,20401698 <atexit>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
20400132:	5e0010ef          	jal	ra,20401712 <__libc_init_array>

20400136 <_skip_init>:
_skip_init():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
20400136:	3f2d                	jal	20400070 <__metal_synchronize_harts>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20400138:	301027f3          	csrr	a5,misa
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
2040013c:	00010737          	lui	a4,0x10
20400140:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
20400144:	8ff9                	and	a5,a5,a4
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
20400146:	cb89                	beqz	a5,20400158 <_skip_init+0x22>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20400148:	300027f3          	csrr	a5,mstatus
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
2040014c:	6709                	lui	a4,0x2
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
2040014e:	8fd9                	or	a5,a5,a4
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
20400150:	30079073          	csrw	mstatus,a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
20400154:	00305073          	csrwi	fcsr,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20400158:	4505                	li	a0,1
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
2040015a:	00006597          	auipc	a1,0x6
2040015e:	91e58593          	addi	a1,a1,-1762 # 20405a78 <argv>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
20400162:	00006617          	auipc	a2,0x6
20400166:	91a60613          	addi	a2,a2,-1766 # 20405a7c <envp>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:180
  call secondary_main
2040016a:	2031                	jal	20400176 <secondary_main>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
2040016c:	542010ef          	jal	ra,204016ae <exit>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
20400170:	80a2                	mv	ra,s0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:192
  ret
20400172:	8082                	ret

20400174 <_fini>:
_init():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
20400174:	8082                	ret

20400176 <secondary_main>:
secondary_main():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
20400176:	1141                	addi	sp,sp,-16
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20400178:	c206                	sw	ra,4(sp)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
2040017a:	f14022f3          	csrr	t0,mhartid
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
2040017e:	00000313          	li	t1,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
20400182:	00628563          	beq	t0,t1,2040018c <secondary_main+0x16>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:225
1:
  wfi
20400186:	10500073          	wfi
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:226
  j 1b
2040018a:	bff5                	j	20400186 <secondary_main+0x10>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:228
2:
  call main
2040018c:	2895                	jal	20400200 <main>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
2040018e:	4092                	lw	ra,4(sp)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
20400190:	0141                	addi	sp,sp,16
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/crt0.S:235
  ret
20400192:	8082                	ret

Disassembly of section .text:

20400200 <main>:
main():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/src/hello.c:8

#include <stdio.h>

extern int add(int x, int y);
extern int inc(int x);
int main() {
20400200:	1101                	addi	sp,sp,-32
20400202:	ce06                	sw	ra,28(sp)
20400204:	cc22                	sw	s0,24(sp)
20400206:	1000                	addi	s0,sp,32
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/src/hello.c:10

    printf("Hello, World!\n");
20400208:	204067b7          	lui	a5,0x20406
2040020c:	9b878513          	addi	a0,a5,-1608 # 204059b8 <_exit+0x16>
20400210:	2295                	jal	20400374 <puts>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/src/hello.c:12

    int a = 0xF0;
20400212:	0f000793          	li	a5,240
20400216:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/src/hello.c:13
    int b = 0x0E;
2040021a:	47b9                	li	a5,14
2040021c:	fef42423          	sw	a5,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/src/hello.c:16

    //inc(b);
    int result = add(a,inc(b));
20400220:	fe842503          	lw	a0,-24(s0)
20400224:	203d                	jal	20400252 <inc>
20400226:	87aa                	mv	a5,a0
20400228:	85be                	mv	a1,a5
2040022a:	fec42503          	lw	a0,-20(s0)
2040022e:	2005                	jal	2040024e <add>
20400230:	fea42223          	sw	a0,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/src/hello.c:17
    printf("result is: 0x%x\n", result);
20400234:	fe442583          	lw	a1,-28(s0)
20400238:	204067b7          	lui	a5,0x20406
2040023c:	9c878513          	addi	a0,a5,-1592 # 204059c8 <_exit+0x26>
20400240:	2819                	jal	20400256 <iprintf>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/src/hello.c:18
    return 0;
20400242:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/src/hello.c:19
}
20400244:	853e                	mv	a0,a5
20400246:	40f2                	lw	ra,28(sp)
20400248:	4462                	lw	s0,24(sp)
2040024a:	6105                	addi	sp,sp,32
2040024c:	8082                	ret

2040024e <add>:
add():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/src/add.S:10

.global inc
.type inc, @function

add:
	add a0, a0, a1
2040024e:	952e                	add	a0,a0,a1
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/src/add.S:11
	ret
20400250:	8082                	ret

20400252 <inc>:
inc():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/src/add.S:14

inc:
	addi a0, a0, 1
20400252:	0505                	addi	a0,a0,1
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/src/add.S:15
	ret
20400254:	8082                	ret

20400256 <iprintf>:
printf():
20400256:	7139                	addi	sp,sp,-64
20400258:	da3e                	sw	a5,52(sp)
2040025a:	d22e                	sw	a1,36(sp)
2040025c:	d432                	sw	a2,40(sp)
2040025e:	d636                	sw	a3,44(sp)
20400260:	d83a                	sw	a4,48(sp)
20400262:	dc42                	sw	a6,56(sp)
20400264:	de46                	sw	a7,60(sp)
20400266:	5fc00797          	auipc	a5,0x5fc00
2040026a:	52278793          	addi	a5,a5,1314 # 80000788 <_impure_ptr>
2040026e:	cc22                	sw	s0,24(sp)
20400270:	4380                	lw	s0,0(a5)
20400272:	ca26                	sw	s1,20(sp)
20400274:	ce06                	sw	ra,28(sp)
20400276:	84aa                	mv	s1,a0
20400278:	c409                	beqz	s0,20400282 <iprintf+0x2c>
2040027a:	4c1c                	lw	a5,24(s0)
2040027c:	e399                	bnez	a5,20400282 <iprintf+0x2c>
2040027e:	8522                	mv	a0,s0
20400280:	2b1d                	jal	204007b6 <__sinit>
20400282:	440c                	lw	a1,8(s0)
20400284:	1054                	addi	a3,sp,36
20400286:	8626                	mv	a2,s1
20400288:	8522                	mv	a0,s0
2040028a:	c636                	sw	a3,12(sp)
2040028c:	231000ef          	jal	ra,20400cbc <_vfiprintf_r>
20400290:	40f2                	lw	ra,28(sp)
20400292:	4462                	lw	s0,24(sp)
20400294:	44d2                	lw	s1,20(sp)
20400296:	6121                	addi	sp,sp,64
20400298:	8082                	ret

2040029a <_puts_r>:
_puts_r():
2040029a:	1101                	addi	sp,sp,-32
2040029c:	ca26                	sw	s1,20(sp)
2040029e:	c84a                	sw	s2,16(sp)
204002a0:	ce06                	sw	ra,28(sp)
204002a2:	cc22                	sw	s0,24(sp)
204002a4:	c64e                	sw	s3,12(sp)
204002a6:	c452                	sw	s4,8(sp)
204002a8:	84aa                	mv	s1,a0
204002aa:	892e                	mv	s2,a1
204002ac:	c501                	beqz	a0,204002b4 <_puts_r+0x1a>
204002ae:	4d1c                	lw	a5,24(a0)
204002b0:	e391                	bnez	a5,204002b4 <_puts_r+0x1a>
204002b2:	2311                	jal	204007b6 <__sinit>
204002b4:	4c9c                	lw	a5,24(s1)
204002b6:	4480                	lw	s0,8(s1)
204002b8:	e399                	bnez	a5,204002be <_puts_r+0x24>
204002ba:	8526                	mv	a0,s1
204002bc:	29ed                	jal	204007b6 <__sinit>
204002be:	00005797          	auipc	a5,0x5
204002c2:	73e78793          	addi	a5,a5,1854 # 204059fc <__sf_fake_stdin>
204002c6:	02f41c63          	bne	s0,a5,204002fe <_puts_r+0x64>
204002ca:	40c0                	lw	s0,4(s1)
204002cc:	00c45783          	lhu	a5,12(s0)
204002d0:	8ba1                	andi	a5,a5,8
204002d2:	c7b1                	beqz	a5,2040031e <_puts_r+0x84>
204002d4:	481c                	lw	a5,16(s0)
204002d6:	c7a1                	beqz	a5,2040031e <_puts_r+0x84>
204002d8:	59fd                	li	s3,-1
204002da:	4a29                	li	s4,10
204002dc:	441c                	lw	a5,8(s0)
204002de:	00094583          	lbu	a1,0(s2)
204002e2:	17fd                	addi	a5,a5,-1
204002e4:	e9b1                	bnez	a1,20400338 <_puts_r+0x9e>
204002e6:	c41c                	sw	a5,8(s0)
204002e8:	0607de63          	bgez	a5,20400364 <_puts_r+0xca>
204002ec:	8622                	mv	a2,s0
204002ee:	45a9                	li	a1,10
204002f0:	8526                	mv	a0,s1
204002f2:	2841                	jal	20400382 <__swbuf_r>
204002f4:	57fd                	li	a5,-1
204002f6:	02f50863          	beq	a0,a5,20400326 <_puts_r+0x8c>
204002fa:	4529                	li	a0,10
204002fc:	a035                	j	20400328 <_puts_r+0x8e>
204002fe:	00005797          	auipc	a5,0x5
20400302:	71e78793          	addi	a5,a5,1822 # 20405a1c <__sf_fake_stdout>
20400306:	00f41463          	bne	s0,a5,2040030e <_puts_r+0x74>
2040030a:	4480                	lw	s0,8(s1)
2040030c:	b7c1                	j	204002cc <_puts_r+0x32>
2040030e:	00005797          	auipc	a5,0x5
20400312:	6ce78793          	addi	a5,a5,1742 # 204059dc <__sf_fake_stderr>
20400316:	faf41be3          	bne	s0,a5,204002cc <_puts_r+0x32>
2040031a:	44c0                	lw	s0,12(s1)
2040031c:	bf45                	j	204002cc <_puts_r+0x32>
2040031e:	85a2                	mv	a1,s0
20400320:	8526                	mv	a0,s1
20400322:	2205                	jal	20400442 <__swsetup_r>
20400324:	d955                	beqz	a0,204002d8 <_puts_r+0x3e>
20400326:	557d                	li	a0,-1
20400328:	40f2                	lw	ra,28(sp)
2040032a:	4462                	lw	s0,24(sp)
2040032c:	44d2                	lw	s1,20(sp)
2040032e:	4942                	lw	s2,16(sp)
20400330:	49b2                	lw	s3,12(sp)
20400332:	4a22                	lw	s4,8(sp)
20400334:	6105                	addi	sp,sp,32
20400336:	8082                	ret
20400338:	c41c                	sw	a5,8(s0)
2040033a:	0905                	addi	s2,s2,1
2040033c:	0007d763          	bgez	a5,2040034a <_puts_r+0xb0>
20400340:	4c18                	lw	a4,24(s0)
20400342:	00e7cb63          	blt	a5,a4,20400358 <_puts_r+0xbe>
20400346:	01458963          	beq	a1,s4,20400358 <_puts_r+0xbe>
2040034a:	401c                	lw	a5,0(s0)
2040034c:	00178713          	addi	a4,a5,1
20400350:	c018                	sw	a4,0(s0)
20400352:	00b78023          	sb	a1,0(a5)
20400356:	b759                	j	204002dc <_puts_r+0x42>
20400358:	8622                	mv	a2,s0
2040035a:	8526                	mv	a0,s1
2040035c:	201d                	jal	20400382 <__swbuf_r>
2040035e:	f7351fe3          	bne	a0,s3,204002dc <_puts_r+0x42>
20400362:	b7d1                	j	20400326 <_puts_r+0x8c>
20400364:	401c                	lw	a5,0(s0)
20400366:	00178713          	addi	a4,a5,1
2040036a:	c018                	sw	a4,0(s0)
2040036c:	4729                	li	a4,10
2040036e:	00e78023          	sb	a4,0(a5)
20400372:	b761                	j	204002fa <_puts_r+0x60>

20400374 <puts>:
puts():
20400374:	5fc00797          	auipc	a5,0x5fc00
20400378:	41478793          	addi	a5,a5,1044 # 80000788 <_impure_ptr>
2040037c:	85aa                	mv	a1,a0
2040037e:	4388                	lw	a0,0(a5)
20400380:	bf29                	j	2040029a <_puts_r>

20400382 <__swbuf_r>:
__swbuf_r():
20400382:	1101                	addi	sp,sp,-32
20400384:	cc22                	sw	s0,24(sp)
20400386:	ca26                	sw	s1,20(sp)
20400388:	c84a                	sw	s2,16(sp)
2040038a:	ce06                	sw	ra,28(sp)
2040038c:	c64e                	sw	s3,12(sp)
2040038e:	84aa                	mv	s1,a0
20400390:	892e                	mv	s2,a1
20400392:	8432                	mv	s0,a2
20400394:	c501                	beqz	a0,2040039c <__swbuf_r+0x1a>
20400396:	4d1c                	lw	a5,24(a0)
20400398:	e391                	bnez	a5,2040039c <__swbuf_r+0x1a>
2040039a:	2931                	jal	204007b6 <__sinit>
2040039c:	00005797          	auipc	a5,0x5
204003a0:	66078793          	addi	a5,a5,1632 # 204059fc <__sf_fake_stdin>
204003a4:	06f41963          	bne	s0,a5,20400416 <__swbuf_r+0x94>
204003a8:	40c0                	lw	s0,4(s1)
204003aa:	4c1c                	lw	a5,24(s0)
204003ac:	c41c                	sw	a5,8(s0)
204003ae:	00c45783          	lhu	a5,12(s0)
204003b2:	8ba1                	andi	a5,a5,8
204003b4:	c3c9                	beqz	a5,20400436 <__swbuf_r+0xb4>
204003b6:	481c                	lw	a5,16(s0)
204003b8:	cfbd                	beqz	a5,20400436 <__swbuf_r+0xb4>
204003ba:	481c                	lw	a5,16(s0)
204003bc:	4008                	lw	a0,0(s0)
204003be:	0ff97993          	andi	s3,s2,255
204003c2:	0ff97913          	andi	s2,s2,255
204003c6:	8d1d                	sub	a0,a0,a5
204003c8:	485c                	lw	a5,20(s0)
204003ca:	00f54663          	blt	a0,a5,204003d6 <__swbuf_r+0x54>
204003ce:	85a2                	mv	a1,s0
204003d0:	8526                	mv	a0,s1
204003d2:	24e9                	jal	2040069c <_fflush_r>
204003d4:	e52d                	bnez	a0,2040043e <__swbuf_r+0xbc>
204003d6:	441c                	lw	a5,8(s0)
204003d8:	0505                	addi	a0,a0,1
204003da:	17fd                	addi	a5,a5,-1
204003dc:	c41c                	sw	a5,8(s0)
204003de:	401c                	lw	a5,0(s0)
204003e0:	00178713          	addi	a4,a5,1
204003e4:	c018                	sw	a4,0(s0)
204003e6:	01378023          	sb	s3,0(a5)
204003ea:	485c                	lw	a5,20(s0)
204003ec:	00a78963          	beq	a5,a0,204003fe <__swbuf_r+0x7c>
204003f0:	00c45783          	lhu	a5,12(s0)
204003f4:	8b85                	andi	a5,a5,1
204003f6:	cb81                	beqz	a5,20400406 <__swbuf_r+0x84>
204003f8:	47a9                	li	a5,10
204003fa:	00f91663          	bne	s2,a5,20400406 <__swbuf_r+0x84>
204003fe:	85a2                	mv	a1,s0
20400400:	8526                	mv	a0,s1
20400402:	2c69                	jal	2040069c <_fflush_r>
20400404:	ed0d                	bnez	a0,2040043e <__swbuf_r+0xbc>
20400406:	40f2                	lw	ra,28(sp)
20400408:	4462                	lw	s0,24(sp)
2040040a:	854a                	mv	a0,s2
2040040c:	44d2                	lw	s1,20(sp)
2040040e:	4942                	lw	s2,16(sp)
20400410:	49b2                	lw	s3,12(sp)
20400412:	6105                	addi	sp,sp,32
20400414:	8082                	ret
20400416:	00005797          	auipc	a5,0x5
2040041a:	60678793          	addi	a5,a5,1542 # 20405a1c <__sf_fake_stdout>
2040041e:	00f41463          	bne	s0,a5,20400426 <__swbuf_r+0xa4>
20400422:	4480                	lw	s0,8(s1)
20400424:	b759                	j	204003aa <__swbuf_r+0x28>
20400426:	00005797          	auipc	a5,0x5
2040042a:	5b678793          	addi	a5,a5,1462 # 204059dc <__sf_fake_stderr>
2040042e:	f6f41ee3          	bne	s0,a5,204003aa <__swbuf_r+0x28>
20400432:	44c0                	lw	s0,12(s1)
20400434:	bf9d                	j	204003aa <__swbuf_r+0x28>
20400436:	85a2                	mv	a1,s0
20400438:	8526                	mv	a0,s1
2040043a:	2021                	jal	20400442 <__swsetup_r>
2040043c:	dd3d                	beqz	a0,204003ba <__swbuf_r+0x38>
2040043e:	597d                	li	s2,-1
20400440:	b7d9                	j	20400406 <__swbuf_r+0x84>

20400442 <__swsetup_r>:
__swsetup_r():
20400442:	1141                	addi	sp,sp,-16
20400444:	5fc00797          	auipc	a5,0x5fc00
20400448:	34478793          	addi	a5,a5,836 # 80000788 <_impure_ptr>
2040044c:	c226                	sw	s1,4(sp)
2040044e:	4384                	lw	s1,0(a5)
20400450:	c422                	sw	s0,8(sp)
20400452:	c04a                	sw	s2,0(sp)
20400454:	c606                	sw	ra,12(sp)
20400456:	892a                	mv	s2,a0
20400458:	842e                	mv	s0,a1
2040045a:	c489                	beqz	s1,20400464 <__swsetup_r+0x22>
2040045c:	4c9c                	lw	a5,24(s1)
2040045e:	e399                	bnez	a5,20400464 <__swsetup_r+0x22>
20400460:	8526                	mv	a0,s1
20400462:	2e91                	jal	204007b6 <__sinit>
20400464:	00005797          	auipc	a5,0x5
20400468:	59878793          	addi	a5,a5,1432 # 204059fc <__sf_fake_stdin>
2040046c:	02f41c63          	bne	s0,a5,204004a4 <__swsetup_r+0x62>
20400470:	40c0                	lw	s0,4(s1)
20400472:	00c41703          	lh	a4,12(s0)
20400476:	01071793          	slli	a5,a4,0x10
2040047a:	83c1                	srli	a5,a5,0x10
2040047c:	0087f693          	andi	a3,a5,8
20400480:	eeb5                	bnez	a3,204004fc <__swsetup_r+0xba>
20400482:	0107f693          	andi	a3,a5,16
20400486:	ee9d                	bnez	a3,204004c4 <__swsetup_r+0x82>
20400488:	47a5                	li	a5,9
2040048a:	00f92023          	sw	a5,0(s2)
2040048e:	04076713          	ori	a4,a4,64
20400492:	00e41623          	sh	a4,12(s0)
20400496:	557d                	li	a0,-1
20400498:	40b2                	lw	ra,12(sp)
2040049a:	4422                	lw	s0,8(sp)
2040049c:	4492                	lw	s1,4(sp)
2040049e:	4902                	lw	s2,0(sp)
204004a0:	0141                	addi	sp,sp,16
204004a2:	8082                	ret
204004a4:	00005797          	auipc	a5,0x5
204004a8:	57878793          	addi	a5,a5,1400 # 20405a1c <__sf_fake_stdout>
204004ac:	00f41463          	bne	s0,a5,204004b4 <__swsetup_r+0x72>
204004b0:	4480                	lw	s0,8(s1)
204004b2:	b7c1                	j	20400472 <__swsetup_r+0x30>
204004b4:	00005797          	auipc	a5,0x5
204004b8:	52878793          	addi	a5,a5,1320 # 204059dc <__sf_fake_stderr>
204004bc:	faf41be3          	bne	s0,a5,20400472 <__swsetup_r+0x30>
204004c0:	44c0                	lw	s0,12(s1)
204004c2:	bf45                	j	20400472 <__swsetup_r+0x30>
204004c4:	8b91                	andi	a5,a5,4
204004c6:	c78d                	beqz	a5,204004f0 <__swsetup_r+0xae>
204004c8:	584c                	lw	a1,52(s0)
204004ca:	c989                	beqz	a1,204004dc <__swsetup_r+0x9a>
204004cc:	04440793          	addi	a5,s0,68
204004d0:	00f58463          	beq	a1,a5,204004d8 <__swsetup_r+0x96>
204004d4:	854a                	mv	a0,s2
204004d6:	2bc5                	jal	20400ac6 <_free_r>
204004d8:	02042a23          	sw	zero,52(s0)
204004dc:	00c45783          	lhu	a5,12(s0)
204004e0:	00042223          	sw	zero,4(s0)
204004e4:	fdb7f793          	andi	a5,a5,-37
204004e8:	00f41623          	sh	a5,12(s0)
204004ec:	481c                	lw	a5,16(s0)
204004ee:	c01c                	sw	a5,0(s0)
204004f0:	00c45783          	lhu	a5,12(s0)
204004f4:	0087e793          	ori	a5,a5,8
204004f8:	00f41623          	sh	a5,12(s0)
204004fc:	481c                	lw	a5,16(s0)
204004fe:	ef81                	bnez	a5,20400516 <__swsetup_r+0xd4>
20400500:	00c45783          	lhu	a5,12(s0)
20400504:	20000713          	li	a4,512
20400508:	2807f793          	andi	a5,a5,640
2040050c:	00e78563          	beq	a5,a4,20400516 <__swsetup_r+0xd4>
20400510:	85a2                	mv	a1,s0
20400512:	854a                	mv	a0,s2
20400514:	21bd                	jal	20400982 <__smakebuf_r>
20400516:	00c45783          	lhu	a5,12(s0)
2040051a:	0017f713          	andi	a4,a5,1
2040051e:	c705                	beqz	a4,20400546 <__swsetup_r+0x104>
20400520:	485c                	lw	a5,20(s0)
20400522:	00042423          	sw	zero,8(s0)
20400526:	40f007b3          	neg	a5,a5
2040052a:	cc1c                	sw	a5,24(s0)
2040052c:	481c                	lw	a5,16(s0)
2040052e:	4501                	li	a0,0
20400530:	f7a5                	bnez	a5,20400498 <__swsetup_r+0x56>
20400532:	00c41783          	lh	a5,12(s0)
20400536:	0807f713          	andi	a4,a5,128
2040053a:	df39                	beqz	a4,20400498 <__swsetup_r+0x56>
2040053c:	0407e793          	ori	a5,a5,64
20400540:	00f41623          	sh	a5,12(s0)
20400544:	bf89                	j	20400496 <__swsetup_r+0x54>
20400546:	8b89                	andi	a5,a5,2
20400548:	4701                	li	a4,0
2040054a:	e391                	bnez	a5,2040054e <__swsetup_r+0x10c>
2040054c:	4858                	lw	a4,20(s0)
2040054e:	c418                	sw	a4,8(s0)
20400550:	bff1                	j	2040052c <__swsetup_r+0xea>

20400552 <__sflush_r>:
__sflush_r():
20400552:	00c5d783          	lhu	a5,12(a1)
20400556:	1101                	addi	sp,sp,-32
20400558:	cc22                	sw	s0,24(sp)
2040055a:	ca26                	sw	s1,20(sp)
2040055c:	ce06                	sw	ra,28(sp)
2040055e:	c84a                	sw	s2,16(sp)
20400560:	c64e                	sw	s3,12(sp)
20400562:	0087f713          	andi	a4,a5,8
20400566:	84aa                	mv	s1,a0
20400568:	842e                	mv	s0,a1
2040056a:	e765                	bnez	a4,20400652 <__sflush_r+0x100>
2040056c:	41d8                	lw	a4,4(a1)
2040056e:	00e04763          	bgtz	a4,2040057c <__sflush_r+0x2a>
20400572:	41b8                	lw	a4,64(a1)
20400574:	00e04463          	bgtz	a4,2040057c <__sflush_r+0x2a>
20400578:	4501                	li	a0,0
2040057a:	a0c1                	j	2040063a <__sflush_r+0xe8>
2040057c:	5458                	lw	a4,44(s0)
2040057e:	df6d                	beqz	a4,20400578 <__sflush_r+0x26>
20400580:	0004a903          	lw	s2,0(s1)
20400584:	01379693          	slli	a3,a5,0x13
20400588:	0004a023          	sw	zero,0(s1)
2040058c:	0606de63          	bgez	a3,20400608 <__sflush_r+0xb6>
20400590:	4868                	lw	a0,84(s0)
20400592:	00c45783          	lhu	a5,12(s0)
20400596:	8b91                	andi	a5,a5,4
20400598:	c799                	beqz	a5,204005a6 <__sflush_r+0x54>
2040059a:	405c                	lw	a5,4(s0)
2040059c:	8d1d                	sub	a0,a0,a5
2040059e:	585c                	lw	a5,52(s0)
204005a0:	c399                	beqz	a5,204005a6 <__sflush_r+0x54>
204005a2:	403c                	lw	a5,64(s0)
204005a4:	8d1d                	sub	a0,a0,a5
204005a6:	545c                	lw	a5,44(s0)
204005a8:	500c                	lw	a1,32(s0)
204005aa:	862a                	mv	a2,a0
204005ac:	4681                	li	a3,0
204005ae:	8526                	mv	a0,s1
204005b0:	9782                	jalr	a5
204005b2:	57fd                	li	a5,-1
204005b4:	00c45703          	lhu	a4,12(s0)
204005b8:	00f51d63          	bne	a0,a5,204005d2 <__sflush_r+0x80>
204005bc:	4094                	lw	a3,0(s1)
204005be:	47f5                	li	a5,29
204005c0:	08d7e463          	bltu	a5,a3,20400648 <__sflush_r+0xf6>
204005c4:	204007b7          	lui	a5,0x20400
204005c8:	0785                	addi	a5,a5,1
204005ca:	00d7d7b3          	srl	a5,a5,a3
204005ce:	8b85                	andi	a5,a5,1
204005d0:	cfa5                	beqz	a5,20400648 <__sflush_r+0xf6>
204005d2:	481c                	lw	a5,16(s0)
204005d4:	00042223          	sw	zero,4(s0)
204005d8:	c01c                	sw	a5,0(s0)
204005da:	01371793          	slli	a5,a4,0x13
204005de:	0007d863          	bgez	a5,204005ee <__sflush_r+0x9c>
204005e2:	57fd                	li	a5,-1
204005e4:	00f51463          	bne	a0,a5,204005ec <__sflush_r+0x9a>
204005e8:	409c                	lw	a5,0(s1)
204005ea:	e391                	bnez	a5,204005ee <__sflush_r+0x9c>
204005ec:	c868                	sw	a0,84(s0)
204005ee:	584c                	lw	a1,52(s0)
204005f0:	0124a023          	sw	s2,0(s1)
204005f4:	d1d1                	beqz	a1,20400578 <__sflush_r+0x26>
204005f6:	04440793          	addi	a5,s0,68
204005fa:	00f58463          	beq	a1,a5,20400602 <__sflush_r+0xb0>
204005fe:	8526                	mv	a0,s1
20400600:	21d9                	jal	20400ac6 <_free_r>
20400602:	02042a23          	sw	zero,52(s0)
20400606:	bf8d                	j	20400578 <__sflush_r+0x26>
20400608:	500c                	lw	a1,32(s0)
2040060a:	4685                	li	a3,1
2040060c:	4601                	li	a2,0
2040060e:	8526                	mv	a0,s1
20400610:	9702                	jalr	a4
20400612:	57fd                	li	a5,-1
20400614:	f6f51fe3          	bne	a0,a5,20400592 <__sflush_r+0x40>
20400618:	409c                	lw	a5,0(s1)
2040061a:	dfa5                	beqz	a5,20400592 <__sflush_r+0x40>
2040061c:	4775                	li	a4,29
2040061e:	00e78563          	beq	a5,a4,20400628 <__sflush_r+0xd6>
20400622:	4759                	li	a4,22
20400624:	00e79563          	bne	a5,a4,2040062e <__sflush_r+0xdc>
20400628:	0124a023          	sw	s2,0(s1)
2040062c:	b7b1                	j	20400578 <__sflush_r+0x26>
2040062e:	00c45783          	lhu	a5,12(s0)
20400632:	0407e793          	ori	a5,a5,64
20400636:	00f41623          	sh	a5,12(s0)
2040063a:	40f2                	lw	ra,28(sp)
2040063c:	4462                	lw	s0,24(sp)
2040063e:	44d2                	lw	s1,20(sp)
20400640:	4942                	lw	s2,16(sp)
20400642:	49b2                	lw	s3,12(sp)
20400644:	6105                	addi	sp,sp,32
20400646:	8082                	ret
20400648:	04076713          	ori	a4,a4,64
2040064c:	00e41623          	sh	a4,12(s0)
20400650:	b7ed                	j	2040063a <__sflush_r+0xe8>
20400652:	0105a983          	lw	s3,16(a1)
20400656:	f20981e3          	beqz	s3,20400578 <__sflush_r+0x26>
2040065a:	0005a903          	lw	s2,0(a1)
2040065e:	8b8d                	andi	a5,a5,3
20400660:	0135a023          	sw	s3,0(a1)
20400664:	41390933          	sub	s2,s2,s3
20400668:	4701                	li	a4,0
2040066a:	e391                	bnez	a5,2040066e <__sflush_r+0x11c>
2040066c:	49d8                	lw	a4,20(a1)
2040066e:	c418                	sw	a4,8(s0)
20400670:	f12054e3          	blez	s2,20400578 <__sflush_r+0x26>
20400674:	541c                	lw	a5,40(s0)
20400676:	500c                	lw	a1,32(s0)
20400678:	86ca                	mv	a3,s2
2040067a:	864e                	mv	a2,s3
2040067c:	8526                	mv	a0,s1
2040067e:	9782                	jalr	a5
20400680:	00a04a63          	bgtz	a0,20400694 <__sflush_r+0x142>
20400684:	00c45783          	lhu	a5,12(s0)
20400688:	557d                	li	a0,-1
2040068a:	0407e793          	ori	a5,a5,64
2040068e:	00f41623          	sh	a5,12(s0)
20400692:	b765                	j	2040063a <__sflush_r+0xe8>
20400694:	99aa                	add	s3,s3,a0
20400696:	40a90933          	sub	s2,s2,a0
2040069a:	bfd9                	j	20400670 <__sflush_r+0x11e>

2040069c <_fflush_r>:
_fflush_r():
2040069c:	499c                	lw	a5,16(a1)
2040069e:	cfb9                	beqz	a5,204006fc <_fflush_r+0x60>
204006a0:	1101                	addi	sp,sp,-32
204006a2:	cc22                	sw	s0,24(sp)
204006a4:	ce06                	sw	ra,28(sp)
204006a6:	842a                	mv	s0,a0
204006a8:	c511                	beqz	a0,204006b4 <_fflush_r+0x18>
204006aa:	4d1c                	lw	a5,24(a0)
204006ac:	e781                	bnez	a5,204006b4 <_fflush_r+0x18>
204006ae:	c62e                	sw	a1,12(sp)
204006b0:	2219                	jal	204007b6 <__sinit>
204006b2:	45b2                	lw	a1,12(sp)
204006b4:	00005797          	auipc	a5,0x5
204006b8:	34878793          	addi	a5,a5,840 # 204059fc <__sf_fake_stdin>
204006bc:	00f59b63          	bne	a1,a5,204006d2 <_fflush_r+0x36>
204006c0:	404c                	lw	a1,4(s0)
204006c2:	00c59783          	lh	a5,12(a1)
204006c6:	c795                	beqz	a5,204006f2 <_fflush_r+0x56>
204006c8:	8522                	mv	a0,s0
204006ca:	4462                	lw	s0,24(sp)
204006cc:	40f2                	lw	ra,28(sp)
204006ce:	6105                	addi	sp,sp,32
204006d0:	b549                	j	20400552 <__sflush_r>
204006d2:	00005797          	auipc	a5,0x5
204006d6:	34a78793          	addi	a5,a5,842 # 20405a1c <__sf_fake_stdout>
204006da:	00f59463          	bne	a1,a5,204006e2 <_fflush_r+0x46>
204006de:	440c                	lw	a1,8(s0)
204006e0:	b7cd                	j	204006c2 <_fflush_r+0x26>
204006e2:	00005797          	auipc	a5,0x5
204006e6:	2fa78793          	addi	a5,a5,762 # 204059dc <__sf_fake_stderr>
204006ea:	fcf59ce3          	bne	a1,a5,204006c2 <_fflush_r+0x26>
204006ee:	444c                	lw	a1,12(s0)
204006f0:	bfc9                	j	204006c2 <_fflush_r+0x26>
204006f2:	40f2                	lw	ra,28(sp)
204006f4:	4462                	lw	s0,24(sp)
204006f6:	4501                	li	a0,0
204006f8:	6105                	addi	sp,sp,32
204006fa:	8082                	ret
204006fc:	4501                	li	a0,0
204006fe:	8082                	ret

20400700 <std>:
std():
20400700:	1141                	addi	sp,sp,-16
20400702:	c422                	sw	s0,8(sp)
20400704:	c606                	sw	ra,12(sp)
20400706:	842a                	mv	s0,a0
20400708:	00b51623          	sh	a1,12(a0)
2040070c:	00c51723          	sh	a2,14(a0)
20400710:	00052023          	sw	zero,0(a0)
20400714:	00052223          	sw	zero,4(a0)
20400718:	00052423          	sw	zero,8(a0)
2040071c:	06052223          	sw	zero,100(a0)
20400720:	00052823          	sw	zero,16(a0)
20400724:	00052a23          	sw	zero,20(a0)
20400728:	00052c23          	sw	zero,24(a0)
2040072c:	4621                	li	a2,8
2040072e:	4581                	li	a1,0
20400730:	05c50513          	addi	a0,a0,92
20400734:	24ed                	jal	20400a1e <memset>
20400736:	00001797          	auipc	a5,0x1
2040073a:	84678793          	addi	a5,a5,-1978 # 20400f7c <__sread>
2040073e:	d05c                	sw	a5,36(s0)
20400740:	00001797          	auipc	a5,0x1
20400744:	86c78793          	addi	a5,a5,-1940 # 20400fac <__swrite>
20400748:	d41c                	sw	a5,40(s0)
2040074a:	00001797          	auipc	a5,0x1
2040074e:	8b078793          	addi	a5,a5,-1872 # 20400ffa <__sseek>
20400752:	d45c                	sw	a5,44(s0)
20400754:	00001797          	auipc	a5,0x1
20400758:	8dc78793          	addi	a5,a5,-1828 # 20401030 <__sclose>
2040075c:	d000                	sw	s0,32(s0)
2040075e:	d81c                	sw	a5,48(s0)
20400760:	40b2                	lw	ra,12(sp)
20400762:	4422                	lw	s0,8(sp)
20400764:	0141                	addi	sp,sp,16
20400766:	8082                	ret

20400768 <_cleanup_r>:
_cleanup_r():
20400768:	00000597          	auipc	a1,0x0
2040076c:	f3458593          	addi	a1,a1,-204 # 2040069c <_fflush_r>
20400770:	a2b9                	j	204008be <_fwalk_reent>

20400772 <__sfmoreglue>:
__sfmoreglue():
20400772:	1141                	addi	sp,sp,-16
20400774:	c226                	sw	s1,4(sp)
20400776:	06800613          	li	a2,104
2040077a:	fff58493          	addi	s1,a1,-1
2040077e:	02c484b3          	mul	s1,s1,a2
20400782:	c04a                	sw	s2,0(sp)
20400784:	892e                	mv	s2,a1
20400786:	c422                	sw	s0,8(sp)
20400788:	c606                	sw	ra,12(sp)
2040078a:	07448593          	addi	a1,s1,116
2040078e:	26d5                	jal	20400b72 <_malloc_r>
20400790:	842a                	mv	s0,a0
20400792:	c919                	beqz	a0,204007a8 <__sfmoreglue+0x36>
20400794:	00052023          	sw	zero,0(a0)
20400798:	01252223          	sw	s2,4(a0)
2040079c:	0531                	addi	a0,a0,12
2040079e:	c408                	sw	a0,8(s0)
204007a0:	06848613          	addi	a2,s1,104
204007a4:	4581                	li	a1,0
204007a6:	2ca5                	jal	20400a1e <memset>
204007a8:	8522                	mv	a0,s0
204007aa:	40b2                	lw	ra,12(sp)
204007ac:	4422                	lw	s0,8(sp)
204007ae:	4492                	lw	s1,4(sp)
204007b0:	4902                	lw	s2,0(sp)
204007b2:	0141                	addi	sp,sp,16
204007b4:	8082                	ret

204007b6 <__sinit>:
__sinit():
204007b6:	4d1c                	lw	a5,24(a0)
204007b8:	e3bd                	bnez	a5,2040081e <__sinit+0x68>
204007ba:	1141                	addi	sp,sp,-16
204007bc:	c606                	sw	ra,12(sp)
204007be:	c422                	sw	s0,8(sp)
204007c0:	00000797          	auipc	a5,0x0
204007c4:	fa878793          	addi	a5,a5,-88 # 20400768 <_cleanup_r>
204007c8:	d51c                	sw	a5,40(a0)
204007ca:	5fc00797          	auipc	a5,0x5fc00
204007ce:	fc278793          	addi	a5,a5,-62 # 8000078c <_global_impure_ptr>
204007d2:	439c                	lw	a5,0(a5)
204007d4:	04052423          	sw	zero,72(a0)
204007d8:	04052623          	sw	zero,76(a0)
204007dc:	04052823          	sw	zero,80(a0)
204007e0:	00f51463          	bne	a0,a5,204007e8 <__sinit+0x32>
204007e4:	4785                	li	a5,1
204007e6:	cd1c                	sw	a5,24(a0)
204007e8:	842a                	mv	s0,a0
204007ea:	281d                	jal	20400820 <__sfp>
204007ec:	c048                	sw	a0,4(s0)
204007ee:	8522                	mv	a0,s0
204007f0:	2805                	jal	20400820 <__sfp>
204007f2:	c408                	sw	a0,8(s0)
204007f4:	8522                	mv	a0,s0
204007f6:	202d                	jal	20400820 <__sfp>
204007f8:	c448                	sw	a0,12(s0)
204007fa:	4048                	lw	a0,4(s0)
204007fc:	4601                	li	a2,0
204007fe:	4591                	li	a1,4
20400800:	3701                	jal	20400700 <std>
20400802:	4408                	lw	a0,8(s0)
20400804:	4605                	li	a2,1
20400806:	45a5                	li	a1,9
20400808:	3de5                	jal	20400700 <std>
2040080a:	4448                	lw	a0,12(s0)
2040080c:	4609                	li	a2,2
2040080e:	45c9                	li	a1,18
20400810:	3dc5                	jal	20400700 <std>
20400812:	4785                	li	a5,1
20400814:	cc1c                	sw	a5,24(s0)
20400816:	40b2                	lw	ra,12(sp)
20400818:	4422                	lw	s0,8(sp)
2040081a:	0141                	addi	sp,sp,16
2040081c:	8082                	ret
2040081e:	8082                	ret

20400820 <__sfp>:
__sfp():
20400820:	1141                	addi	sp,sp,-16
20400822:	5fc00797          	auipc	a5,0x5fc00
20400826:	f6a78793          	addi	a5,a5,-150 # 8000078c <_global_impure_ptr>
2040082a:	c226                	sw	s1,4(sp)
2040082c:	4384                	lw	s1,0(a5)
2040082e:	c04a                	sw	s2,0(sp)
20400830:	c606                	sw	ra,12(sp)
20400832:	4c9c                	lw	a5,24(s1)
20400834:	c422                	sw	s0,8(sp)
20400836:	892a                	mv	s2,a0
20400838:	e399                	bnez	a5,2040083e <__sfp+0x1e>
2040083a:	8526                	mv	a0,s1
2040083c:	3fad                	jal	204007b6 <__sinit>
2040083e:	04848493          	addi	s1,s1,72
20400842:	4480                	lw	s0,8(s1)
20400844:	40dc                	lw	a5,4(s1)
20400846:	17fd                	addi	a5,a5,-1
20400848:	0007d663          	bgez	a5,20400854 <__sfp+0x34>
2040084c:	409c                	lw	a5,0(s1)
2040084e:	cfb1                	beqz	a5,204008aa <__sfp+0x8a>
20400850:	4084                	lw	s1,0(s1)
20400852:	bfc5                	j	20400842 <__sfp+0x22>
20400854:	00c41703          	lh	a4,12(s0)
20400858:	e731                	bnez	a4,204008a4 <__sfp+0x84>
2040085a:	77c1                	lui	a5,0xffff0
2040085c:	0785                	addi	a5,a5,1
2040085e:	06042223          	sw	zero,100(s0)
20400862:	00042023          	sw	zero,0(s0)
20400866:	00042223          	sw	zero,4(s0)
2040086a:	00042423          	sw	zero,8(s0)
2040086e:	c45c                	sw	a5,12(s0)
20400870:	00042823          	sw	zero,16(s0)
20400874:	00042a23          	sw	zero,20(s0)
20400878:	00042c23          	sw	zero,24(s0)
2040087c:	4621                	li	a2,8
2040087e:	4581                	li	a1,0
20400880:	05c40513          	addi	a0,s0,92
20400884:	2a69                	jal	20400a1e <memset>
20400886:	02042a23          	sw	zero,52(s0)
2040088a:	02042c23          	sw	zero,56(s0)
2040088e:	04042423          	sw	zero,72(s0)
20400892:	04042623          	sw	zero,76(s0)
20400896:	8522                	mv	a0,s0
20400898:	40b2                	lw	ra,12(sp)
2040089a:	4422                	lw	s0,8(sp)
2040089c:	4492                	lw	s1,4(sp)
2040089e:	4902                	lw	s2,0(sp)
204008a0:	0141                	addi	sp,sp,16
204008a2:	8082                	ret
204008a4:	06840413          	addi	s0,s0,104
204008a8:	bf79                	j	20400846 <__sfp+0x26>
204008aa:	4591                	li	a1,4
204008ac:	854a                	mv	a0,s2
204008ae:	35d1                	jal	20400772 <__sfmoreglue>
204008b0:	c088                	sw	a0,0(s1)
204008b2:	842a                	mv	s0,a0
204008b4:	fd51                	bnez	a0,20400850 <__sfp+0x30>
204008b6:	47b1                	li	a5,12
204008b8:	00f92023          	sw	a5,0(s2)
204008bc:	bfe9                	j	20400896 <__sfp+0x76>

204008be <_fwalk_reent>:
_fwalk_reent():
204008be:	7179                	addi	sp,sp,-48
204008c0:	d422                	sw	s0,40(sp)
204008c2:	d04a                	sw	s2,32(sp)
204008c4:	cc52                	sw	s4,24(sp)
204008c6:	ca56                	sw	s5,20(sp)
204008c8:	c85a                	sw	s6,16(sp)
204008ca:	c65e                	sw	s7,12(sp)
204008cc:	d606                	sw	ra,44(sp)
204008ce:	d226                	sw	s1,36(sp)
204008d0:	ce4e                	sw	s3,28(sp)
204008d2:	8a2a                	mv	s4,a0
204008d4:	8aae                	mv	s5,a1
204008d6:	04850413          	addi	s0,a0,72
204008da:	4901                	li	s2,0
204008dc:	4b05                	li	s6,1
204008de:	5bfd                	li	s7,-1
204008e0:	ec09                	bnez	s0,204008fa <_fwalk_reent+0x3c>
204008e2:	50b2                	lw	ra,44(sp)
204008e4:	5422                	lw	s0,40(sp)
204008e6:	854a                	mv	a0,s2
204008e8:	5492                	lw	s1,36(sp)
204008ea:	5902                	lw	s2,32(sp)
204008ec:	49f2                	lw	s3,28(sp)
204008ee:	4a62                	lw	s4,24(sp)
204008f0:	4ad2                	lw	s5,20(sp)
204008f2:	4b42                	lw	s6,16(sp)
204008f4:	4bb2                	lw	s7,12(sp)
204008f6:	6145                	addi	sp,sp,48
204008f8:	8082                	ret
204008fa:	4404                	lw	s1,8(s0)
204008fc:	00442983          	lw	s3,4(s0)
20400900:	19fd                	addi	s3,s3,-1
20400902:	0009d463          	bgez	s3,2040090a <_fwalk_reent+0x4c>
20400906:	4000                	lw	s0,0(s0)
20400908:	bfe1                	j	204008e0 <_fwalk_reent+0x22>
2040090a:	00c4d783          	lhu	a5,12(s1)
2040090e:	00fb7b63          	bgeu	s6,a5,20400924 <_fwalk_reent+0x66>
20400912:	00e49783          	lh	a5,14(s1)
20400916:	01778763          	beq	a5,s7,20400924 <_fwalk_reent+0x66>
2040091a:	85a6                	mv	a1,s1
2040091c:	8552                	mv	a0,s4
2040091e:	9a82                	jalr	s5
20400920:	00a96933          	or	s2,s2,a0
20400924:	06848493          	addi	s1,s1,104
20400928:	bfe1                	j	20400900 <_fwalk_reent+0x42>

2040092a <__swhatbuf_r>:
__swhatbuf_r():
2040092a:	7119                	addi	sp,sp,-128
2040092c:	daa6                	sw	s1,116(sp)
2040092e:	84ae                	mv	s1,a1
20400930:	00e59583          	lh	a1,14(a1)
20400934:	dca2                	sw	s0,120(sp)
20400936:	de86                	sw	ra,124(sp)
20400938:	8432                	mv	s0,a2
2040093a:	0005dc63          	bgez	a1,20400952 <__swhatbuf_r+0x28>
2040093e:	00c4d783          	lhu	a5,12(s1)
20400942:	0006a023          	sw	zero,0(a3)
20400946:	0807f793          	andi	a5,a5,128
2040094a:	e39d                	bnez	a5,20400970 <__swhatbuf_r+0x46>
2040094c:	40000793          	li	a5,1024
20400950:	a015                	j	20400974 <__swhatbuf_r+0x4a>
20400952:	0830                	addi	a2,sp,24
20400954:	c636                	sw	a3,12(sp)
20400956:	2f15                	jal	2040108a <_fstat_r>
20400958:	46b2                	lw	a3,12(sp)
2040095a:	fe0542e3          	bltz	a0,2040093e <__swhatbuf_r+0x14>
2040095e:	4772                	lw	a4,28(sp)
20400960:	67bd                	lui	a5,0xf
20400962:	8ff9                	and	a5,a5,a4
20400964:	7779                	lui	a4,0xffffe
20400966:	97ba                	add	a5,a5,a4
20400968:	0017b793          	seqz	a5,a5
2040096c:	c29c                	sw	a5,0(a3)
2040096e:	bff9                	j	2040094c <__swhatbuf_r+0x22>
20400970:	04000793          	li	a5,64
20400974:	c01c                	sw	a5,0(s0)
20400976:	50f6                	lw	ra,124(sp)
20400978:	5466                	lw	s0,120(sp)
2040097a:	54d6                	lw	s1,116(sp)
2040097c:	4501                	li	a0,0
2040097e:	6109                	addi	sp,sp,128
20400980:	8082                	ret

20400982 <__smakebuf_r>:
__smakebuf_r():
20400982:	00c5d783          	lhu	a5,12(a1)
20400986:	1101                	addi	sp,sp,-32
20400988:	cc22                	sw	s0,24(sp)
2040098a:	ce06                	sw	ra,28(sp)
2040098c:	ca26                	sw	s1,20(sp)
2040098e:	c84a                	sw	s2,16(sp)
20400990:	8b89                	andi	a5,a5,2
20400992:	842e                	mv	s0,a1
20400994:	cf89                	beqz	a5,204009ae <__smakebuf_r+0x2c>
20400996:	04740793          	addi	a5,s0,71
2040099a:	c01c                	sw	a5,0(s0)
2040099c:	c81c                	sw	a5,16(s0)
2040099e:	4785                	li	a5,1
204009a0:	c85c                	sw	a5,20(s0)
204009a2:	40f2                	lw	ra,28(sp)
204009a4:	4462                	lw	s0,24(sp)
204009a6:	44d2                	lw	s1,20(sp)
204009a8:	4942                	lw	s2,16(sp)
204009aa:	6105                	addi	sp,sp,32
204009ac:	8082                	ret
204009ae:	0074                	addi	a3,sp,12
204009b0:	0030                	addi	a2,sp,8
204009b2:	84aa                	mv	s1,a0
204009b4:	3f9d                	jal	2040092a <__swhatbuf_r>
204009b6:	45a2                	lw	a1,8(sp)
204009b8:	892a                	mv	s2,a0
204009ba:	8526                	mv	a0,s1
204009bc:	2a5d                	jal	20400b72 <_malloc_r>
204009be:	ed01                	bnez	a0,204009d6 <__smakebuf_r+0x54>
204009c0:	00c41783          	lh	a5,12(s0)
204009c4:	2007f713          	andi	a4,a5,512
204009c8:	ff69                	bnez	a4,204009a2 <__smakebuf_r+0x20>
204009ca:	9bf1                	andi	a5,a5,-4
204009cc:	0027e793          	ori	a5,a5,2
204009d0:	00f41623          	sh	a5,12(s0)
204009d4:	b7c9                	j	20400996 <__smakebuf_r+0x14>
204009d6:	00000797          	auipc	a5,0x0
204009da:	d9278793          	addi	a5,a5,-622 # 20400768 <_cleanup_r>
204009de:	d49c                	sw	a5,40(s1)
204009e0:	00c45783          	lhu	a5,12(s0)
204009e4:	c008                	sw	a0,0(s0)
204009e6:	c808                	sw	a0,16(s0)
204009e8:	0807e793          	ori	a5,a5,128
204009ec:	00f41623          	sh	a5,12(s0)
204009f0:	47a2                	lw	a5,8(sp)
204009f2:	c85c                	sw	a5,20(s0)
204009f4:	47b2                	lw	a5,12(sp)
204009f6:	cf89                	beqz	a5,20400a10 <__smakebuf_r+0x8e>
204009f8:	00e41583          	lh	a1,14(s0)
204009fc:	8526                	mv	a0,s1
204009fe:	2d5d                	jal	204010b4 <_isatty_r>
20400a00:	c901                	beqz	a0,20400a10 <__smakebuf_r+0x8e>
20400a02:	00c45783          	lhu	a5,12(s0)
20400a06:	9bf1                	andi	a5,a5,-4
20400a08:	0017e793          	ori	a5,a5,1
20400a0c:	00f41623          	sh	a5,12(s0)
20400a10:	00c45783          	lhu	a5,12(s0)
20400a14:	00f96933          	or	s2,s2,a5
20400a18:	01241623          	sh	s2,12(s0)
20400a1c:	b759                	j	204009a2 <__smakebuf_r+0x20>

20400a1e <memset>:
memset():
20400a1e:	433d                	li	t1,15
20400a20:	872a                	mv	a4,a0
20400a22:	02c37363          	bgeu	t1,a2,20400a48 <memset+0x2a>
20400a26:	00f77793          	andi	a5,a4,15
20400a2a:	efbd                	bnez	a5,20400aa8 <memset+0x8a>
20400a2c:	e5ad                	bnez	a1,20400a96 <memset+0x78>
20400a2e:	ff067693          	andi	a3,a2,-16
20400a32:	8a3d                	andi	a2,a2,15
20400a34:	96ba                	add	a3,a3,a4
20400a36:	c30c                	sw	a1,0(a4)
20400a38:	c34c                	sw	a1,4(a4)
20400a3a:	c70c                	sw	a1,8(a4)
20400a3c:	c74c                	sw	a1,12(a4)
20400a3e:	0741                	addi	a4,a4,16
20400a40:	fed76be3          	bltu	a4,a3,20400a36 <memset+0x18>
20400a44:	e211                	bnez	a2,20400a48 <memset+0x2a>
20400a46:	8082                	ret
20400a48:	40c306b3          	sub	a3,t1,a2
20400a4c:	068a                	slli	a3,a3,0x2
20400a4e:	00000297          	auipc	t0,0x0
20400a52:	9696                	add	a3,a3,t0
20400a54:	00a68067          	jr	10(a3)
20400a58:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7fffcb9a>
20400a5c:	00b706a3          	sb	a1,13(a4)
20400a60:	00b70623          	sb	a1,12(a4)
20400a64:	00b705a3          	sb	a1,11(a4)
20400a68:	00b70523          	sb	a1,10(a4)
20400a6c:	00b704a3          	sb	a1,9(a4)
20400a70:	00b70423          	sb	a1,8(a4)
20400a74:	00b703a3          	sb	a1,7(a4)
20400a78:	00b70323          	sb	a1,6(a4)
20400a7c:	00b702a3          	sb	a1,5(a4)
20400a80:	00b70223          	sb	a1,4(a4)
20400a84:	00b701a3          	sb	a1,3(a4)
20400a88:	00b70123          	sb	a1,2(a4)
20400a8c:	00b700a3          	sb	a1,1(a4)
20400a90:	00b70023          	sb	a1,0(a4)
20400a94:	8082                	ret
20400a96:	0ff5f593          	andi	a1,a1,255
20400a9a:	00859693          	slli	a3,a1,0x8
20400a9e:	8dd5                	or	a1,a1,a3
20400aa0:	01059693          	slli	a3,a1,0x10
20400aa4:	8dd5                	or	a1,a1,a3
20400aa6:	b761                	j	20400a2e <memset+0x10>
20400aa8:	00279693          	slli	a3,a5,0x2
20400aac:	00000297          	auipc	t0,0x0
20400ab0:	9696                	add	a3,a3,t0
20400ab2:	8286                	mv	t0,ra
20400ab4:	fa8680e7          	jalr	-88(a3)
20400ab8:	8096                	mv	ra,t0
20400aba:	17c1                	addi	a5,a5,-16
20400abc:	8f1d                	sub	a4,a4,a5
20400abe:	963e                	add	a2,a2,a5
20400ac0:	f8c374e3          	bgeu	t1,a2,20400a48 <memset+0x2a>
20400ac4:	b7a5                	j	20400a2c <memset+0xe>

20400ac6 <_free_r>:
_free_r():
20400ac6:	c5cd                	beqz	a1,20400b70 <_free_r+0xaa>
20400ac8:	ffc5a783          	lw	a5,-4(a1)
20400acc:	1141                	addi	sp,sp,-16
20400ace:	c422                	sw	s0,8(sp)
20400ad0:	c606                	sw	ra,12(sp)
20400ad2:	c226                	sw	s1,4(sp)
20400ad4:	ffc58413          	addi	s0,a1,-4
20400ad8:	0007d363          	bgez	a5,20400ade <_free_r+0x18>
20400adc:	943e                	add	s0,s0,a5
20400ade:	84aa                	mv	s1,a0
20400ae0:	2589                	jal	20401122 <__malloc_lock>
20400ae2:	5fc00797          	auipc	a5,0x5fc00
20400ae6:	cf678793          	addi	a5,a5,-778 # 800007d8 <metal_segment_data_target_end>
20400aea:	439c                	lw	a5,0(a5)
20400aec:	ef89                	bnez	a5,20400b06 <_free_r+0x40>
20400aee:	00042223          	sw	zero,4(s0)
20400af2:	5fc00797          	auipc	a5,0x5fc00
20400af6:	ce87a323          	sw	s0,-794(a5) # 800007d8 <metal_segment_data_target_end>
20400afa:	4422                	lw	s0,8(sp)
20400afc:	40b2                	lw	ra,12(sp)
20400afe:	8526                	mv	a0,s1
20400b00:	4492                	lw	s1,4(sp)
20400b02:	0141                	addi	sp,sp,16
20400b04:	a505                	j	20401124 <__malloc_unlock>
20400b06:	00f47e63          	bgeu	s0,a5,20400b22 <_free_r+0x5c>
20400b0a:	4014                	lw	a3,0(s0)
20400b0c:	00d40733          	add	a4,s0,a3
20400b10:	00e79663          	bne	a5,a4,20400b1c <_free_r+0x56>
20400b14:	4398                	lw	a4,0(a5)
20400b16:	43dc                	lw	a5,4(a5)
20400b18:	9736                	add	a4,a4,a3
20400b1a:	c018                	sw	a4,0(s0)
20400b1c:	c05c                	sw	a5,4(s0)
20400b1e:	bfd1                	j	20400af2 <_free_r+0x2c>
20400b20:	87ba                	mv	a5,a4
20400b22:	43d8                	lw	a4,4(a5)
20400b24:	c319                	beqz	a4,20400b2a <_free_r+0x64>
20400b26:	fee47de3          	bgeu	s0,a4,20400b20 <_free_r+0x5a>
20400b2a:	4394                	lw	a3,0(a5)
20400b2c:	00d78633          	add	a2,a5,a3
20400b30:	00861f63          	bne	a2,s0,20400b4e <_free_r+0x88>
20400b34:	4010                	lw	a2,0(s0)
20400b36:	96b2                	add	a3,a3,a2
20400b38:	c394                	sw	a3,0(a5)
20400b3a:	00d78633          	add	a2,a5,a3
20400b3e:	fac71ee3          	bne	a4,a2,20400afa <_free_r+0x34>
20400b42:	4310                	lw	a2,0(a4)
20400b44:	4358                	lw	a4,4(a4)
20400b46:	96b2                	add	a3,a3,a2
20400b48:	c394                	sw	a3,0(a5)
20400b4a:	c3d8                	sw	a4,4(a5)
20400b4c:	b77d                	j	20400afa <_free_r+0x34>
20400b4e:	00c47563          	bgeu	s0,a2,20400b58 <_free_r+0x92>
20400b52:	47b1                	li	a5,12
20400b54:	c09c                	sw	a5,0(s1)
20400b56:	b755                	j	20400afa <_free_r+0x34>
20400b58:	4010                	lw	a2,0(s0)
20400b5a:	00c406b3          	add	a3,s0,a2
20400b5e:	00d71663          	bne	a4,a3,20400b6a <_free_r+0xa4>
20400b62:	4314                	lw	a3,0(a4)
20400b64:	4358                	lw	a4,4(a4)
20400b66:	96b2                	add	a3,a3,a2
20400b68:	c014                	sw	a3,0(s0)
20400b6a:	c058                	sw	a4,4(s0)
20400b6c:	c3c0                	sw	s0,4(a5)
20400b6e:	b771                	j	20400afa <_free_r+0x34>
20400b70:	8082                	ret

20400b72 <_malloc_r>:
_malloc_r():
20400b72:	1101                	addi	sp,sp,-32
20400b74:	ca26                	sw	s1,20(sp)
20400b76:	00358493          	addi	s1,a1,3
20400b7a:	98f1                	andi	s1,s1,-4
20400b7c:	ce06                	sw	ra,28(sp)
20400b7e:	cc22                	sw	s0,24(sp)
20400b80:	c84a                	sw	s2,16(sp)
20400b82:	c64e                	sw	s3,12(sp)
20400b84:	04a1                	addi	s1,s1,8
20400b86:	47b1                	li	a5,12
20400b88:	04f4f763          	bgeu	s1,a5,20400bd6 <_malloc_r+0x64>
20400b8c:	44b1                	li	s1,12
20400b8e:	04b4e663          	bltu	s1,a1,20400bda <_malloc_r+0x68>
20400b92:	892a                	mv	s2,a0
20400b94:	2379                	jal	20401122 <__malloc_lock>
20400b96:	5fc00797          	auipc	a5,0x5fc00
20400b9a:	c4278793          	addi	a5,a5,-958 # 800007d8 <metal_segment_data_target_end>
20400b9e:	4398                	lw	a4,0(a5)
20400ba0:	843a                	mv	s0,a4
20400ba2:	e431                	bnez	s0,20400bee <_malloc_r+0x7c>
20400ba4:	5fc00797          	auipc	a5,0x5fc00
20400ba8:	c3878793          	addi	a5,a5,-968 # 800007dc <__malloc_sbrk_start>
20400bac:	439c                	lw	a5,0(a5)
20400bae:	eb81                	bnez	a5,20400bbe <_malloc_r+0x4c>
20400bb0:	4581                	li	a1,0
20400bb2:	854a                	mv	a0,s2
20400bb4:	2645                	jal	20400f54 <_sbrk_r>
20400bb6:	5fc00797          	auipc	a5,0x5fc00
20400bba:	c2a7a323          	sw	a0,-986(a5) # 800007dc <__malloc_sbrk_start>
20400bbe:	85a6                	mv	a1,s1
20400bc0:	854a                	mv	a0,s2
20400bc2:	2e49                	jal	20400f54 <_sbrk_r>
20400bc4:	59fd                	li	s3,-1
20400bc6:	07351963          	bne	a0,s3,20400c38 <_malloc_r+0xc6>
20400bca:	47b1                	li	a5,12
20400bcc:	00f92023          	sw	a5,0(s2)
20400bd0:	854a                	mv	a0,s2
20400bd2:	2b89                	jal	20401124 <__malloc_unlock>
20400bd4:	a029                	j	20400bde <_malloc_r+0x6c>
20400bd6:	fa04dce3          	bgez	s1,20400b8e <_malloc_r+0x1c>
20400bda:	47b1                	li	a5,12
20400bdc:	c11c                	sw	a5,0(a0)
20400bde:	4501                	li	a0,0
20400be0:	40f2                	lw	ra,28(sp)
20400be2:	4462                	lw	s0,24(sp)
20400be4:	44d2                	lw	s1,20(sp)
20400be6:	4942                	lw	s2,16(sp)
20400be8:	49b2                	lw	s3,12(sp)
20400bea:	6105                	addi	sp,sp,32
20400bec:	8082                	ret
20400bee:	401c                	lw	a5,0(s0)
20400bf0:	8f85                	sub	a5,a5,s1
20400bf2:	0407c063          	bltz	a5,20400c32 <_malloc_r+0xc0>
20400bf6:	46ad                	li	a3,11
20400bf8:	00f6f663          	bgeu	a3,a5,20400c04 <_malloc_r+0x92>
20400bfc:	c01c                	sw	a5,0(s0)
20400bfe:	943e                	add	s0,s0,a5
20400c00:	c004                	sw	s1,0(s0)
20400c02:	a801                	j	20400c12 <_malloc_r+0xa0>
20400c04:	405c                	lw	a5,4(s0)
20400c06:	02871463          	bne	a4,s0,20400c2e <_malloc_r+0xbc>
20400c0a:	5fc00717          	auipc	a4,0x5fc00
20400c0e:	bcf72723          	sw	a5,-1074(a4) # 800007d8 <metal_segment_data_target_end>
20400c12:	854a                	mv	a0,s2
20400c14:	2b01                	jal	20401124 <__malloc_unlock>
20400c16:	00b40513          	addi	a0,s0,11
20400c1a:	00440793          	addi	a5,s0,4
20400c1e:	9961                	andi	a0,a0,-8
20400c20:	40f50733          	sub	a4,a0,a5
20400c24:	df55                	beqz	a4,20400be0 <_malloc_r+0x6e>
20400c26:	943a                	add	s0,s0,a4
20400c28:	8f89                	sub	a5,a5,a0
20400c2a:	c01c                	sw	a5,0(s0)
20400c2c:	bf55                	j	20400be0 <_malloc_r+0x6e>
20400c2e:	c35c                	sw	a5,4(a4)
20400c30:	b7cd                	j	20400c12 <_malloc_r+0xa0>
20400c32:	8722                	mv	a4,s0
20400c34:	4040                	lw	s0,4(s0)
20400c36:	b7b5                	j	20400ba2 <_malloc_r+0x30>
20400c38:	00350413          	addi	s0,a0,3
20400c3c:	9871                	andi	s0,s0,-4
20400c3e:	fc8501e3          	beq	a0,s0,20400c00 <_malloc_r+0x8e>
20400c42:	40a405b3          	sub	a1,s0,a0
20400c46:	854a                	mv	a0,s2
20400c48:	2631                	jal	20400f54 <_sbrk_r>
20400c4a:	fb351be3          	bne	a0,s3,20400c00 <_malloc_r+0x8e>
20400c4e:	bfb5                	j	20400bca <_malloc_r+0x58>

20400c50 <__sfputc_r>:
__sfputc_r():
20400c50:	461c                	lw	a5,8(a2)
20400c52:	17fd                	addi	a5,a5,-1
20400c54:	c61c                	sw	a5,8(a2)
20400c56:	0007da63          	bgez	a5,20400c6a <__sfputc_r+0x1a>
20400c5a:	4e18                	lw	a4,24(a2)
20400c5c:	00e7c563          	blt	a5,a4,20400c66 <__sfputc_r+0x16>
20400c60:	47a9                	li	a5,10
20400c62:	00f59463          	bne	a1,a5,20400c6a <__sfputc_r+0x1a>
20400c66:	f1cff06f          	j	20400382 <__swbuf_r>
20400c6a:	421c                	lw	a5,0(a2)
20400c6c:	852e                	mv	a0,a1
20400c6e:	00178713          	addi	a4,a5,1
20400c72:	c218                	sw	a4,0(a2)
20400c74:	00b78023          	sb	a1,0(a5)
20400c78:	8082                	ret

20400c7a <__sfputs_r>:
__sfputs_r():
20400c7a:	1101                	addi	sp,sp,-32
20400c7c:	cc22                	sw	s0,24(sp)
20400c7e:	ca26                	sw	s1,20(sp)
20400c80:	c84a                	sw	s2,16(sp)
20400c82:	c64e                	sw	s3,12(sp)
20400c84:	c452                	sw	s4,8(sp)
20400c86:	ce06                	sw	ra,28(sp)
20400c88:	892a                	mv	s2,a0
20400c8a:	89ae                	mv	s3,a1
20400c8c:	8432                	mv	s0,a2
20400c8e:	00d604b3          	add	s1,a2,a3
20400c92:	5a7d                	li	s4,-1
20400c94:	00941463          	bne	s0,s1,20400c9c <__sfputs_r+0x22>
20400c98:	4501                	li	a0,0
20400c9a:	a809                	j	20400cac <__sfputs_r+0x32>
20400c9c:	00044583          	lbu	a1,0(s0)
20400ca0:	864e                	mv	a2,s3
20400ca2:	854a                	mv	a0,s2
20400ca4:	3775                	jal	20400c50 <__sfputc_r>
20400ca6:	0405                	addi	s0,s0,1
20400ca8:	ff4516e3          	bne	a0,s4,20400c94 <__sfputs_r+0x1a>
20400cac:	40f2                	lw	ra,28(sp)
20400cae:	4462                	lw	s0,24(sp)
20400cb0:	44d2                	lw	s1,20(sp)
20400cb2:	4942                	lw	s2,16(sp)
20400cb4:	49b2                	lw	s3,12(sp)
20400cb6:	4a22                	lw	s4,8(sp)
20400cb8:	6105                	addi	sp,sp,32
20400cba:	8082                	ret

20400cbc <_vfiprintf_r>:
_vfiprintf_r():
20400cbc:	7135                	addi	sp,sp,-160
20400cbe:	cd22                	sw	s0,152(sp)
20400cc0:	cb26                	sw	s1,148(sp)
20400cc2:	c94a                	sw	s2,144(sp)
20400cc4:	c74e                	sw	s3,140(sp)
20400cc6:	cf06                	sw	ra,156(sp)
20400cc8:	c552                	sw	s4,136(sp)
20400cca:	c356                	sw	s5,132(sp)
20400ccc:	c15a                	sw	s6,128(sp)
20400cce:	dede                	sw	s7,124(sp)
20400cd0:	dce2                	sw	s8,120(sp)
20400cd2:	dae6                	sw	s9,116(sp)
20400cd4:	89aa                	mv	s3,a0
20400cd6:	84ae                	mv	s1,a1
20400cd8:	8932                	mv	s2,a2
20400cda:	8436                	mv	s0,a3
20400cdc:	c501                	beqz	a0,20400ce4 <_vfiprintf_r+0x28>
20400cde:	4d1c                	lw	a5,24(a0)
20400ce0:	e391                	bnez	a5,20400ce4 <_vfiprintf_r+0x28>
20400ce2:	3cd1                	jal	204007b6 <__sinit>
20400ce4:	00005797          	auipc	a5,0x5
20400ce8:	d1878793          	addi	a5,a5,-744 # 204059fc <__sf_fake_stdin>
20400cec:	0cf49b63          	bne	s1,a5,20400dc2 <_vfiprintf_r+0x106>
20400cf0:	0049a483          	lw	s1,4(s3)
20400cf4:	00c4d783          	lhu	a5,12(s1)
20400cf8:	8ba1                	andi	a5,a5,8
20400cfa:	c7f5                	beqz	a5,20400de6 <_vfiprintf_r+0x12a>
20400cfc:	489c                	lw	a5,16(s1)
20400cfe:	c7e5                	beqz	a5,20400de6 <_vfiprintf_r+0x12a>
20400d00:	02000793          	li	a5,32
20400d04:	02f104a3          	sb	a5,41(sp)
20400d08:	03000793          	li	a5,48
20400d0c:	d202                	sw	zero,36(sp)
20400d0e:	02f10523          	sb	a5,42(sp)
20400d12:	c622                	sw	s0,12(sp)
20400d14:	02500b93          	li	s7,37
20400d18:	00005a97          	auipc	s5,0x5
20400d1c:	d24a8a93          	addi	s5,s5,-732 # 20405a3c <__sf_fake_stdout+0x20>
20400d20:	4c05                	li	s8,1
20400d22:	4b29                	li	s6,10
20400d24:	844a                	mv	s0,s2
20400d26:	00044783          	lbu	a5,0(s0)
20400d2a:	c399                	beqz	a5,20400d30 <_vfiprintf_r+0x74>
20400d2c:	0f779063          	bne	a5,s7,20400e0c <_vfiprintf_r+0x150>
20400d30:	41240cb3          	sub	s9,s0,s2
20400d34:	000c8d63          	beqz	s9,20400d4e <_vfiprintf_r+0x92>
20400d38:	86e6                	mv	a3,s9
20400d3a:	864a                	mv	a2,s2
20400d3c:	85a6                	mv	a1,s1
20400d3e:	854e                	mv	a0,s3
20400d40:	3f2d                	jal	20400c7a <__sfputs_r>
20400d42:	57fd                	li	a5,-1
20400d44:	1ef50663          	beq	a0,a5,20400f30 <_vfiprintf_r+0x274>
20400d48:	5692                	lw	a3,36(sp)
20400d4a:	96e6                	add	a3,a3,s9
20400d4c:	d236                	sw	a3,36(sp)
20400d4e:	00044783          	lbu	a5,0(s0)
20400d52:	1c078f63          	beqz	a5,20400f30 <_vfiprintf_r+0x274>
20400d56:	57fd                	li	a5,-1
20400d58:	00140913          	addi	s2,s0,1
20400d5c:	c802                	sw	zero,16(sp)
20400d5e:	ce02                	sw	zero,28(sp)
20400d60:	ca3e                	sw	a5,20(sp)
20400d62:	cc02                	sw	zero,24(sp)
20400d64:	040109a3          	sb	zero,83(sp)
20400d68:	d482                	sw	zero,104(sp)
20400d6a:	00094583          	lbu	a1,0(s2)
20400d6e:	4615                	li	a2,5
20400d70:	8556                	mv	a0,s5
20400d72:	2e59                	jal	20401108 <memchr>
20400d74:	00190413          	addi	s0,s2,1
20400d78:	47c2                	lw	a5,16(sp)
20400d7a:	e959                	bnez	a0,20400e10 <_vfiprintf_r+0x154>
20400d7c:	0107f713          	andi	a4,a5,16
20400d80:	c709                	beqz	a4,20400d8a <_vfiprintf_r+0xce>
20400d82:	02000713          	li	a4,32
20400d86:	04e109a3          	sb	a4,83(sp)
20400d8a:	0087f713          	andi	a4,a5,8
20400d8e:	c709                	beqz	a4,20400d98 <_vfiprintf_r+0xdc>
20400d90:	02b00713          	li	a4,43
20400d94:	04e109a3          	sb	a4,83(sp)
20400d98:	00094683          	lbu	a3,0(s2)
20400d9c:	02a00713          	li	a4,42
20400da0:	08e68063          	beq	a3,a4,20400e20 <_vfiprintf_r+0x164>
20400da4:	47f2                	lw	a5,28(sp)
20400da6:	844a                	mv	s0,s2
20400da8:	4681                	li	a3,0
20400daa:	4625                	li	a2,9
20400dac:	00044703          	lbu	a4,0(s0)
20400db0:	00140593          	addi	a1,s0,1
20400db4:	fd070713          	addi	a4,a4,-48
20400db8:	0ae67963          	bgeu	a2,a4,20400e6a <_vfiprintf_r+0x1ae>
20400dbc:	cab5                	beqz	a3,20400e30 <_vfiprintf_r+0x174>
20400dbe:	ce3e                	sw	a5,28(sp)
20400dc0:	a885                	j	20400e30 <_vfiprintf_r+0x174>
20400dc2:	00005797          	auipc	a5,0x5
20400dc6:	c5a78793          	addi	a5,a5,-934 # 20405a1c <__sf_fake_stdout>
20400dca:	00f49563          	bne	s1,a5,20400dd4 <_vfiprintf_r+0x118>
20400dce:	0089a483          	lw	s1,8(s3)
20400dd2:	b70d                	j	20400cf4 <_vfiprintf_r+0x38>
20400dd4:	00005797          	auipc	a5,0x5
20400dd8:	c0878793          	addi	a5,a5,-1016 # 204059dc <__sf_fake_stderr>
20400ddc:	f0f49ce3          	bne	s1,a5,20400cf4 <_vfiprintf_r+0x38>
20400de0:	00c9a483          	lw	s1,12(s3)
20400de4:	bf01                	j	20400cf4 <_vfiprintf_r+0x38>
20400de6:	85a6                	mv	a1,s1
20400de8:	854e                	mv	a0,s3
20400dea:	e58ff0ef          	jal	ra,20400442 <__swsetup_r>
20400dee:	d909                	beqz	a0,20400d00 <_vfiprintf_r+0x44>
20400df0:	557d                	li	a0,-1
20400df2:	40fa                	lw	ra,156(sp)
20400df4:	446a                	lw	s0,152(sp)
20400df6:	44da                	lw	s1,148(sp)
20400df8:	494a                	lw	s2,144(sp)
20400dfa:	49ba                	lw	s3,140(sp)
20400dfc:	4a2a                	lw	s4,136(sp)
20400dfe:	4a9a                	lw	s5,132(sp)
20400e00:	4b0a                	lw	s6,128(sp)
20400e02:	5bf6                	lw	s7,124(sp)
20400e04:	5c66                	lw	s8,120(sp)
20400e06:	5cd6                	lw	s9,116(sp)
20400e08:	610d                	addi	sp,sp,160
20400e0a:	8082                	ret
20400e0c:	0405                	addi	s0,s0,1
20400e0e:	bf21                	j	20400d26 <_vfiprintf_r+0x6a>
20400e10:	41550533          	sub	a0,a0,s5
20400e14:	00ac1533          	sll	a0,s8,a0
20400e18:	8fc9                	or	a5,a5,a0
20400e1a:	c83e                	sw	a5,16(sp)
20400e1c:	8922                	mv	s2,s0
20400e1e:	b7b1                	j	20400d6a <_vfiprintf_r+0xae>
20400e20:	4732                	lw	a4,12(sp)
20400e22:	00470693          	addi	a3,a4,4
20400e26:	4318                	lw	a4,0(a4)
20400e28:	c636                	sw	a3,12(sp)
20400e2a:	02074963          	bltz	a4,20400e5c <_vfiprintf_r+0x1a0>
20400e2e:	ce3a                	sw	a4,28(sp)
20400e30:	00044703          	lbu	a4,0(s0)
20400e34:	02e00793          	li	a5,46
20400e38:	04f71f63          	bne	a4,a5,20400e96 <_vfiprintf_r+0x1da>
20400e3c:	00144703          	lbu	a4,1(s0)
20400e40:	02a00793          	li	a5,42
20400e44:	02f71b63          	bne	a4,a5,20400e7a <_vfiprintf_r+0x1be>
20400e48:	47b2                	lw	a5,12(sp)
20400e4a:	0409                	addi	s0,s0,2
20400e4c:	00478713          	addi	a4,a5,4
20400e50:	439c                	lw	a5,0(a5)
20400e52:	c63a                	sw	a4,12(sp)
20400e54:	0207c163          	bltz	a5,20400e76 <_vfiprintf_r+0x1ba>
20400e58:	ca3e                	sw	a5,20(sp)
20400e5a:	a835                	j	20400e96 <_vfiprintf_r+0x1da>
20400e5c:	40e00733          	neg	a4,a4
20400e60:	0027e793          	ori	a5,a5,2
20400e64:	ce3a                	sw	a4,28(sp)
20400e66:	c83e                	sw	a5,16(sp)
20400e68:	b7e1                	j	20400e30 <_vfiprintf_r+0x174>
20400e6a:	036787b3          	mul	a5,a5,s6
20400e6e:	4685                	li	a3,1
20400e70:	842e                	mv	s0,a1
20400e72:	97ba                	add	a5,a5,a4
20400e74:	bf25                	j	20400dac <_vfiprintf_r+0xf0>
20400e76:	57fd                	li	a5,-1
20400e78:	b7c5                	j	20400e58 <_vfiprintf_r+0x19c>
20400e7a:	0405                	addi	s0,s0,1
20400e7c:	ca02                	sw	zero,20(sp)
20400e7e:	4681                	li	a3,0
20400e80:	4781                	li	a5,0
20400e82:	4625                	li	a2,9
20400e84:	00044703          	lbu	a4,0(s0)
20400e88:	00140593          	addi	a1,s0,1
20400e8c:	fd070713          	addi	a4,a4,-48
20400e90:	06e67663          	bgeu	a2,a4,20400efc <_vfiprintf_r+0x240>
20400e94:	f2f1                	bnez	a3,20400e58 <_vfiprintf_r+0x19c>
20400e96:	00044583          	lbu	a1,0(s0)
20400e9a:	460d                	li	a2,3
20400e9c:	00005517          	auipc	a0,0x5
20400ea0:	ba850513          	addi	a0,a0,-1112 # 20405a44 <__sf_fake_stdout+0x28>
20400ea4:	2495                	jal	20401108 <memchr>
20400ea6:	cd11                	beqz	a0,20400ec2 <_vfiprintf_r+0x206>
20400ea8:	00005797          	auipc	a5,0x5
20400eac:	b9c78793          	addi	a5,a5,-1124 # 20405a44 <__sf_fake_stdout+0x28>
20400eb0:	8d1d                	sub	a0,a0,a5
20400eb2:	04000793          	li	a5,64
20400eb6:	00a797b3          	sll	a5,a5,a0
20400eba:	4542                	lw	a0,16(sp)
20400ebc:	0405                	addi	s0,s0,1
20400ebe:	8d5d                	or	a0,a0,a5
20400ec0:	c82a                	sw	a0,16(sp)
20400ec2:	00044583          	lbu	a1,0(s0)
20400ec6:	4619                	li	a2,6
20400ec8:	00005517          	auipc	a0,0x5
20400ecc:	b8050513          	addi	a0,a0,-1152 # 20405a48 <__sf_fake_stdout+0x2c>
20400ed0:	00140913          	addi	s2,s0,1
20400ed4:	02b10423          	sb	a1,40(sp)
20400ed8:	2c05                	jal	20401108 <memchr>
20400eda:	c13d                	beqz	a0,20400f40 <_vfiprintf_r+0x284>
20400edc:	dfbff797          	auipc	a5,0xdfbff
20400ee0:	12478793          	addi	a5,a5,292 # 0 <__metal_boot_hart>
20400ee4:	e795                	bnez	a5,20400f10 <_vfiprintf_r+0x254>
20400ee6:	4742                	lw	a4,16(sp)
20400ee8:	47b2                	lw	a5,12(sp)
20400eea:	10077713          	andi	a4,a4,256
20400eee:	cf09                	beqz	a4,20400f08 <_vfiprintf_r+0x24c>
20400ef0:	0791                	addi	a5,a5,4
20400ef2:	c63e                	sw	a5,12(sp)
20400ef4:	5792                	lw	a5,36(sp)
20400ef6:	97d2                	add	a5,a5,s4
20400ef8:	d23e                	sw	a5,36(sp)
20400efa:	b52d                	j	20400d24 <_vfiprintf_r+0x68>
20400efc:	036787b3          	mul	a5,a5,s6
20400f00:	4685                	li	a3,1
20400f02:	842e                	mv	s0,a1
20400f04:	97ba                	add	a5,a5,a4
20400f06:	bfbd                	j	20400e84 <_vfiprintf_r+0x1c8>
20400f08:	079d                	addi	a5,a5,7
20400f0a:	9be1                	andi	a5,a5,-8
20400f0c:	07a1                	addi	a5,a5,8
20400f0e:	b7d5                	j	20400ef2 <_vfiprintf_r+0x236>
20400f10:	0078                	addi	a4,sp,12
20400f12:	00000697          	auipc	a3,0x0
20400f16:	d6868693          	addi	a3,a3,-664 # 20400c7a <__sfputs_r>
20400f1a:	8626                	mv	a2,s1
20400f1c:	080c                	addi	a1,sp,16
20400f1e:	854e                	mv	a0,s3
20400f20:	00000097          	auipc	ra,0x0
20400f24:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
20400f28:	57fd                	li	a5,-1
20400f2a:	8a2a                	mv	s4,a0
20400f2c:	fcf514e3          	bne	a0,a5,20400ef4 <_vfiprintf_r+0x238>
20400f30:	00c4d783          	lhu	a5,12(s1)
20400f34:	0407f793          	andi	a5,a5,64
20400f38:	ea079ce3          	bnez	a5,20400df0 <_vfiprintf_r+0x134>
20400f3c:	5512                	lw	a0,36(sp)
20400f3e:	bd55                	j	20400df2 <_vfiprintf_r+0x136>
20400f40:	0078                	addi	a4,sp,12
20400f42:	00000697          	auipc	a3,0x0
20400f46:	d3868693          	addi	a3,a3,-712 # 20400c7a <__sfputs_r>
20400f4a:	8626                	mv	a2,s1
20400f4c:	080c                	addi	a1,sp,16
20400f4e:	854e                	mv	a0,s3
20400f50:	24cd                	jal	20401232 <_printf_i>
20400f52:	bfd9                	j	20400f28 <_vfiprintf_r+0x26c>

20400f54 <_sbrk_r>:
_sbrk_r():
20400f54:	1141                	addi	sp,sp,-16
20400f56:	c422                	sw	s0,8(sp)
20400f58:	842a                	mv	s0,a0
20400f5a:	852e                	mv	a0,a1
20400f5c:	8e01a423          	sw	zero,-1816(gp) # 80000870 <errno>
20400f60:	c606                	sw	ra,12(sp)
20400f62:	2da9                	jal	204015bc <_sbrk>
20400f64:	57fd                	li	a5,-1
20400f66:	00f51763          	bne	a0,a5,20400f74 <_sbrk_r+0x20>
20400f6a:	8e818793          	addi	a5,gp,-1816 # 80000870 <errno>
20400f6e:	439c                	lw	a5,0(a5)
20400f70:	c391                	beqz	a5,20400f74 <_sbrk_r+0x20>
20400f72:	c01c                	sw	a5,0(s0)
20400f74:	40b2                	lw	ra,12(sp)
20400f76:	4422                	lw	s0,8(sp)
20400f78:	0141                	addi	sp,sp,16
20400f7a:	8082                	ret

20400f7c <__sread>:
__sread():
20400f7c:	1141                	addi	sp,sp,-16
20400f7e:	c422                	sw	s0,8(sp)
20400f80:	842e                	mv	s0,a1
20400f82:	00e59583          	lh	a1,14(a1)
20400f86:	c606                	sw	ra,12(sp)
20400f88:	23b1                	jal	204014d4 <_read_r>
20400f8a:	00054963          	bltz	a0,20400f9c <__sread+0x20>
20400f8e:	487c                	lw	a5,84(s0)
20400f90:	97aa                	add	a5,a5,a0
20400f92:	c87c                	sw	a5,84(s0)
20400f94:	40b2                	lw	ra,12(sp)
20400f96:	4422                	lw	s0,8(sp)
20400f98:	0141                	addi	sp,sp,16
20400f9a:	8082                	ret
20400f9c:	00c45783          	lhu	a5,12(s0)
20400fa0:	777d                	lui	a4,0xfffff
20400fa2:	177d                	addi	a4,a4,-1
20400fa4:	8ff9                	and	a5,a5,a4
20400fa6:	00f41623          	sh	a5,12(s0)
20400faa:	b7ed                	j	20400f94 <__sread+0x18>

20400fac <__swrite>:
__swrite():
20400fac:	00c5d783          	lhu	a5,12(a1)
20400fb0:	1101                	addi	sp,sp,-32
20400fb2:	cc22                	sw	s0,24(sp)
20400fb4:	ca26                	sw	s1,20(sp)
20400fb6:	c84a                	sw	s2,16(sp)
20400fb8:	c64e                	sw	s3,12(sp)
20400fba:	ce06                	sw	ra,28(sp)
20400fbc:	1007f793          	andi	a5,a5,256
20400fc0:	84aa                	mv	s1,a0
20400fc2:	842e                	mv	s0,a1
20400fc4:	8932                	mv	s2,a2
20400fc6:	89b6                	mv	s3,a3
20400fc8:	c791                	beqz	a5,20400fd4 <__swrite+0x28>
20400fca:	00e59583          	lh	a1,14(a1)
20400fce:	4689                	li	a3,2
20400fd0:	4601                	li	a2,0
20400fd2:	2229                	jal	204010dc <_lseek_r>
20400fd4:	00c45783          	lhu	a5,12(s0)
20400fd8:	777d                	lui	a4,0xfffff
20400fda:	177d                	addi	a4,a4,-1
20400fdc:	8ff9                	and	a5,a5,a4
20400fde:	00f41623          	sh	a5,12(s0)
20400fe2:	00e41583          	lh	a1,14(s0)
20400fe6:	4462                	lw	s0,24(sp)
20400fe8:	40f2                	lw	ra,28(sp)
20400fea:	86ce                	mv	a3,s3
20400fec:	864a                	mv	a2,s2
20400fee:	49b2                	lw	s3,12(sp)
20400ff0:	4942                	lw	s2,16(sp)
20400ff2:	8526                	mv	a0,s1
20400ff4:	44d2                	lw	s1,20(sp)
20400ff6:	6105                	addi	sp,sp,32
20400ff8:	a83d                	j	20401036 <_write_r>

20400ffa <__sseek>:
__sseek():
20400ffa:	1141                	addi	sp,sp,-16
20400ffc:	c422                	sw	s0,8(sp)
20400ffe:	842e                	mv	s0,a1
20401000:	00e59583          	lh	a1,14(a1)
20401004:	c606                	sw	ra,12(sp)
20401006:	28d9                	jal	204010dc <_lseek_r>
20401008:	57fd                	li	a5,-1
2040100a:	00c45703          	lhu	a4,12(s0)
2040100e:	00f51b63          	bne	a0,a5,20401024 <__sseek+0x2a>
20401012:	77fd                	lui	a5,0xfffff
20401014:	17fd                	addi	a5,a5,-1
20401016:	8ff9                	and	a5,a5,a4
20401018:	00f41623          	sh	a5,12(s0)
2040101c:	40b2                	lw	ra,12(sp)
2040101e:	4422                	lw	s0,8(sp)
20401020:	0141                	addi	sp,sp,16
20401022:	8082                	ret
20401024:	6785                	lui	a5,0x1
20401026:	8fd9                	or	a5,a5,a4
20401028:	00f41623          	sh	a5,12(s0)
2040102c:	c868                	sw	a0,84(s0)
2040102e:	b7fd                	j	2040101c <__sseek+0x22>

20401030 <__sclose>:
__sclose():
20401030:	00e59583          	lh	a1,14(a1)
20401034:	a03d                	j	20401062 <_close_r>

20401036 <_write_r>:
_write_r():
20401036:	1141                	addi	sp,sp,-16
20401038:	c422                	sw	s0,8(sp)
2040103a:	842a                	mv	s0,a0
2040103c:	852e                	mv	a0,a1
2040103e:	85b2                	mv	a1,a2
20401040:	8636                	mv	a2,a3
20401042:	8e01a423          	sw	zero,-1816(gp) # 80000870 <errno>
20401046:	c606                	sw	ra,12(sp)
20401048:	23cd                	jal	2040162a <_write>
2040104a:	57fd                	li	a5,-1
2040104c:	00f51763          	bne	a0,a5,2040105a <_write_r+0x24>
20401050:	8e818793          	addi	a5,gp,-1816 # 80000870 <errno>
20401054:	439c                	lw	a5,0(a5)
20401056:	c391                	beqz	a5,2040105a <_write_r+0x24>
20401058:	c01c                	sw	a5,0(s0)
2040105a:	40b2                	lw	ra,12(sp)
2040105c:	4422                	lw	s0,8(sp)
2040105e:	0141                	addi	sp,sp,16
20401060:	8082                	ret

20401062 <_close_r>:
_close_r():
20401062:	1141                	addi	sp,sp,-16
20401064:	c422                	sw	s0,8(sp)
20401066:	842a                	mv	s0,a0
20401068:	852e                	mv	a0,a1
2040106a:	8e01a423          	sw	zero,-1816(gp) # 80000870 <errno>
2040106e:	c606                	sw	ra,12(sp)
20401070:	2941                	jal	20401500 <_close>
20401072:	57fd                	li	a5,-1
20401074:	00f51763          	bne	a0,a5,20401082 <_close_r+0x20>
20401078:	8e818793          	addi	a5,gp,-1816 # 80000870 <errno>
2040107c:	439c                	lw	a5,0(a5)
2040107e:	c391                	beqz	a5,20401082 <_close_r+0x20>
20401080:	c01c                	sw	a5,0(s0)
20401082:	40b2                	lw	ra,12(sp)
20401084:	4422                	lw	s0,8(sp)
20401086:	0141                	addi	sp,sp,16
20401088:	8082                	ret

2040108a <_fstat_r>:
_fstat_r():
2040108a:	1141                	addi	sp,sp,-16
2040108c:	c422                	sw	s0,8(sp)
2040108e:	842a                	mv	s0,a0
20401090:	852e                	mv	a0,a1
20401092:	85b2                	mv	a1,a2
20401094:	8e01a423          	sw	zero,-1816(gp) # 80000870 <errno>
20401098:	c606                	sw	ra,12(sp)
2040109a:	2161                	jal	20401522 <_fstat>
2040109c:	57fd                	li	a5,-1
2040109e:	00f51763          	bne	a0,a5,204010ac <_fstat_r+0x22>
204010a2:	8e818793          	addi	a5,gp,-1816 # 80000870 <errno>
204010a6:	439c                	lw	a5,0(a5)
204010a8:	c391                	beqz	a5,204010ac <_fstat_r+0x22>
204010aa:	c01c                	sw	a5,0(s0)
204010ac:	40b2                	lw	ra,12(sp)
204010ae:	4422                	lw	s0,8(sp)
204010b0:	0141                	addi	sp,sp,16
204010b2:	8082                	ret

204010b4 <_isatty_r>:
_isatty_r():
204010b4:	1141                	addi	sp,sp,-16
204010b6:	c422                	sw	s0,8(sp)
204010b8:	842a                	mv	s0,a0
204010ba:	852e                	mv	a0,a1
204010bc:	8e01a423          	sw	zero,-1816(gp) # 80000870 <errno>
204010c0:	c606                	sw	ra,12(sp)
204010c2:	2159                	jal	20401548 <_isatty>
204010c4:	57fd                	li	a5,-1
204010c6:	00f51763          	bne	a0,a5,204010d4 <_isatty_r+0x20>
204010ca:	8e818793          	addi	a5,gp,-1816 # 80000870 <errno>
204010ce:	439c                	lw	a5,0(a5)
204010d0:	c391                	beqz	a5,204010d4 <_isatty_r+0x20>
204010d2:	c01c                	sw	a5,0(s0)
204010d4:	40b2                	lw	ra,12(sp)
204010d6:	4422                	lw	s0,8(sp)
204010d8:	0141                	addi	sp,sp,16
204010da:	8082                	ret

204010dc <_lseek_r>:
_lseek_r():
204010dc:	1141                	addi	sp,sp,-16
204010de:	c422                	sw	s0,8(sp)
204010e0:	842a                	mv	s0,a0
204010e2:	852e                	mv	a0,a1
204010e4:	85b2                	mv	a1,a2
204010e6:	8636                	mv	a2,a3
204010e8:	8e01a423          	sw	zero,-1816(gp) # 80000870 <errno>
204010ec:	c606                	sw	ra,12(sp)
204010ee:	29ad                	jal	20401568 <_lseek>
204010f0:	57fd                	li	a5,-1
204010f2:	00f51763          	bne	a0,a5,20401100 <_lseek_r+0x24>
204010f6:	8e818793          	addi	a5,gp,-1816 # 80000870 <errno>
204010fa:	439c                	lw	a5,0(a5)
204010fc:	c391                	beqz	a5,20401100 <_lseek_r+0x24>
204010fe:	c01c                	sw	a5,0(s0)
20401100:	40b2                	lw	ra,12(sp)
20401102:	4422                	lw	s0,8(sp)
20401104:	0141                	addi	sp,sp,16
20401106:	8082                	ret

20401108 <memchr>:
memchr():
20401108:	0ff5f593          	andi	a1,a1,255
2040110c:	962a                	add	a2,a2,a0
2040110e:	00c51463          	bne	a0,a2,20401116 <memchr+0xe>
20401112:	4501                	li	a0,0
20401114:	8082                	ret
20401116:	00054783          	lbu	a5,0(a0)
2040111a:	feb78de3          	beq	a5,a1,20401114 <memchr+0xc>
2040111e:	0505                	addi	a0,a0,1
20401120:	b7fd                	j	2040110e <memchr+0x6>

20401122 <__malloc_lock>:
__malloc_lock():
20401122:	8082                	ret

20401124 <__malloc_unlock>:
__malloc_unlock():
20401124:	8082                	ret

20401126 <_printf_common>:
_printf_common():
20401126:	7179                	addi	sp,sp,-48
20401128:	ca56                	sw	s5,20(sp)
2040112a:	499c                	lw	a5,16(a1)
2040112c:	8aba                	mv	s5,a4
2040112e:	4598                	lw	a4,8(a1)
20401130:	d422                	sw	s0,40(sp)
20401132:	d226                	sw	s1,36(sp)
20401134:	ce4e                	sw	s3,28(sp)
20401136:	cc52                	sw	s4,24(sp)
20401138:	d606                	sw	ra,44(sp)
2040113a:	d04a                	sw	s2,32(sp)
2040113c:	c85a                	sw	s6,16(sp)
2040113e:	c65e                	sw	s7,12(sp)
20401140:	89aa                	mv	s3,a0
20401142:	842e                	mv	s0,a1
20401144:	84b2                	mv	s1,a2
20401146:	8a36                	mv	s4,a3
20401148:	00e7d363          	bge	a5,a4,2040114e <_printf_common+0x28>
2040114c:	87ba                	mv	a5,a4
2040114e:	c09c                	sw	a5,0(s1)
20401150:	04344703          	lbu	a4,67(s0)
20401154:	c319                	beqz	a4,2040115a <_printf_common+0x34>
20401156:	0785                	addi	a5,a5,1
20401158:	c09c                	sw	a5,0(s1)
2040115a:	401c                	lw	a5,0(s0)
2040115c:	0207f793          	andi	a5,a5,32
20401160:	c781                	beqz	a5,20401168 <_printf_common+0x42>
20401162:	409c                	lw	a5,0(s1)
20401164:	0789                	addi	a5,a5,2
20401166:	c09c                	sw	a5,0(s1)
20401168:	00042903          	lw	s2,0(s0)
2040116c:	00697913          	andi	s2,s2,6
20401170:	00091a63          	bnez	s2,20401184 <_printf_common+0x5e>
20401174:	01940b13          	addi	s6,s0,25
20401178:	5bfd                	li	s7,-1
2040117a:	445c                	lw	a5,12(s0)
2040117c:	4098                	lw	a4,0(s1)
2040117e:	8f99                	sub	a5,a5,a4
20401180:	04f94c63          	blt	s2,a5,204011d8 <_printf_common+0xb2>
20401184:	401c                	lw	a5,0(s0)
20401186:	04344683          	lbu	a3,67(s0)
2040118a:	0207f793          	andi	a5,a5,32
2040118e:	00d036b3          	snez	a3,a3
20401192:	eba5                	bnez	a5,20401202 <_printf_common+0xdc>
20401194:	04340613          	addi	a2,s0,67
20401198:	85d2                	mv	a1,s4
2040119a:	854e                	mv	a0,s3
2040119c:	9a82                	jalr	s5
2040119e:	57fd                	li	a5,-1
204011a0:	04f50363          	beq	a0,a5,204011e6 <_printf_common+0xc0>
204011a4:	401c                	lw	a5,0(s0)
204011a6:	4611                	li	a2,4
204011a8:	4098                	lw	a4,0(s1)
204011aa:	8b99                	andi	a5,a5,6
204011ac:	4454                	lw	a3,12(s0)
204011ae:	4481                	li	s1,0
204011b0:	00c79763          	bne	a5,a2,204011be <_printf_common+0x98>
204011b4:	40e684b3          	sub	s1,a3,a4
204011b8:	0004d363          	bgez	s1,204011be <_printf_common+0x98>
204011bc:	4481                	li	s1,0
204011be:	441c                	lw	a5,8(s0)
204011c0:	4818                	lw	a4,16(s0)
204011c2:	00f75463          	bge	a4,a5,204011ca <_printf_common+0xa4>
204011c6:	8f99                	sub	a5,a5,a4
204011c8:	94be                	add	s1,s1,a5
204011ca:	4901                	li	s2,0
204011cc:	0469                	addi	s0,s0,26
204011ce:	5b7d                	li	s6,-1
204011d0:	05249863          	bne	s1,s2,20401220 <_printf_common+0xfa>
204011d4:	4501                	li	a0,0
204011d6:	a809                	j	204011e8 <_printf_common+0xc2>
204011d8:	4685                	li	a3,1
204011da:	865a                	mv	a2,s6
204011dc:	85d2                	mv	a1,s4
204011de:	854e                	mv	a0,s3
204011e0:	9a82                	jalr	s5
204011e2:	01751e63          	bne	a0,s7,204011fe <_printf_common+0xd8>
204011e6:	557d                	li	a0,-1
204011e8:	50b2                	lw	ra,44(sp)
204011ea:	5422                	lw	s0,40(sp)
204011ec:	5492                	lw	s1,36(sp)
204011ee:	5902                	lw	s2,32(sp)
204011f0:	49f2                	lw	s3,28(sp)
204011f2:	4a62                	lw	s4,24(sp)
204011f4:	4ad2                	lw	s5,20(sp)
204011f6:	4b42                	lw	s6,16(sp)
204011f8:	4bb2                	lw	s7,12(sp)
204011fa:	6145                	addi	sp,sp,48
204011fc:	8082                	ret
204011fe:	0905                	addi	s2,s2,1
20401200:	bfad                	j	2040117a <_printf_common+0x54>
20401202:	00d40733          	add	a4,s0,a3
20401206:	03000613          	li	a2,48
2040120a:	04c701a3          	sb	a2,67(a4) # fffff043 <metal_segment_heap_target_end+0x7fffdbcf>
2040120e:	04544703          	lbu	a4,69(s0)
20401212:	00168793          	addi	a5,a3,1
20401216:	97a2                	add	a5,a5,s0
20401218:	0689                	addi	a3,a3,2
2040121a:	04e781a3          	sb	a4,67(a5) # 1043 <__heap_size+0x843>
2040121e:	bf9d                	j	20401194 <_printf_common+0x6e>
20401220:	4685                	li	a3,1
20401222:	8622                	mv	a2,s0
20401224:	85d2                	mv	a1,s4
20401226:	854e                	mv	a0,s3
20401228:	9a82                	jalr	s5
2040122a:	fb650ee3          	beq	a0,s6,204011e6 <_printf_common+0xc0>
2040122e:	0905                	addi	s2,s2,1
20401230:	b745                	j	204011d0 <_printf_common+0xaa>

20401232 <_printf_i>:
_printf_i():
20401232:	7179                	addi	sp,sp,-48
20401234:	d422                	sw	s0,40(sp)
20401236:	d226                	sw	s1,36(sp)
20401238:	d04a                	sw	s2,32(sp)
2040123a:	ce4e                	sw	s3,28(sp)
2040123c:	d606                	sw	ra,44(sp)
2040123e:	cc52                	sw	s4,24(sp)
20401240:	ca56                	sw	s5,20(sp)
20401242:	c85a                	sw	s6,16(sp)
20401244:	89b6                	mv	s3,a3
20401246:	0185c683          	lbu	a3,24(a1)
2040124a:	06e00793          	li	a5,110
2040124e:	8932                	mv	s2,a2
20401250:	84aa                	mv	s1,a0
20401252:	842e                	mv	s0,a1
20401254:	04358613          	addi	a2,a1,67
20401258:	1ef68063          	beq	a3,a5,20401438 <_printf_i+0x206>
2040125c:	06d7e263          	bltu	a5,a3,204012c0 <_printf_i+0x8e>
20401260:	06300793          	li	a5,99
20401264:	0af68263          	beq	a3,a5,20401308 <_printf_i+0xd6>
20401268:	00d7ed63          	bltu	a5,a3,20401282 <_printf_i+0x50>
2040126c:	1e068a63          	beqz	a3,20401460 <_printf_i+0x22e>
20401270:	05800793          	li	a5,88
20401274:	16f68663          	beq	a3,a5,204013e0 <_printf_i+0x1ae>
20401278:	04240a93          	addi	s5,s0,66
2040127c:	04d40123          	sb	a3,66(s0)
20401280:	a869                	j	2040131a <_printf_i+0xe8>
20401282:	06400793          	li	a5,100
20401286:	00f68663          	beq	a3,a5,20401292 <_printf_i+0x60>
2040128a:	06900793          	li	a5,105
2040128e:	fef695e3          	bne	a3,a5,20401278 <_printf_i+0x46>
20401292:	401c                	lw	a5,0(s0)
20401294:	4308                	lw	a0,0(a4)
20401296:	0807f693          	andi	a3,a5,128
2040129a:	00450593          	addi	a1,a0,4
2040129e:	c2c1                	beqz	a3,2040131e <_printf_i+0xec>
204012a0:	411c                	lw	a5,0(a0)
204012a2:	c30c                	sw	a1,0(a4)
204012a4:	0007d863          	bgez	a5,204012b4 <_printf_i+0x82>
204012a8:	02d00713          	li	a4,45
204012ac:	40f007b3          	neg	a5,a5
204012b0:	04e401a3          	sb	a4,67(s0)
204012b4:	00004697          	auipc	a3,0x4
204012b8:	79c68693          	addi	a3,a3,1948 # 20405a50 <__sf_fake_stdout+0x34>
204012bc:	4729                	li	a4,10
204012be:	a065                	j	20401366 <_printf_i+0x134>
204012c0:	07300793          	li	a5,115
204012c4:	1af68263          	beq	a3,a5,20401468 <_printf_i+0x236>
204012c8:	00d7ef63          	bltu	a5,a3,204012e6 <_printf_i+0xb4>
204012cc:	06f00793          	li	a5,111
204012d0:	04f68f63          	beq	a3,a5,2040132e <_printf_i+0xfc>
204012d4:	07000793          	li	a5,112
204012d8:	faf690e3          	bne	a3,a5,20401278 <_printf_i+0x46>
204012dc:	419c                	lw	a5,0(a1)
204012de:	0207e793          	ori	a5,a5,32
204012e2:	c19c                	sw	a5,0(a1)
204012e4:	a809                	j	204012f6 <_printf_i+0xc4>
204012e6:	07500793          	li	a5,117
204012ea:	04f68263          	beq	a3,a5,2040132e <_printf_i+0xfc>
204012ee:	07800793          	li	a5,120
204012f2:	f8f693e3          	bne	a3,a5,20401278 <_printf_i+0x46>
204012f6:	07800793          	li	a5,120
204012fa:	04f402a3          	sb	a5,69(s0)
204012fe:	00004697          	auipc	a3,0x4
20401302:	76668693          	addi	a3,a3,1894 # 20405a64 <__sf_fake_stdout+0x48>
20401306:	a0dd                	j	204013ec <_printf_i+0x1ba>
20401308:	431c                	lw	a5,0(a4)
2040130a:	04258a93          	addi	s5,a1,66
2040130e:	00478693          	addi	a3,a5,4
20401312:	439c                	lw	a5,0(a5)
20401314:	c314                	sw	a3,0(a4)
20401316:	04f58123          	sb	a5,66(a1)
2040131a:	4785                	li	a5,1
2040131c:	a2ad                	j	20401486 <_printf_i+0x254>
2040131e:	0407f693          	andi	a3,a5,64
20401322:	411c                	lw	a5,0(a0)
20401324:	c30c                	sw	a1,0(a4)
20401326:	debd                	beqz	a3,204012a4 <_printf_i+0x72>
20401328:	07c2                	slli	a5,a5,0x10
2040132a:	87c1                	srai	a5,a5,0x10
2040132c:	bfa5                	j	204012a4 <_printf_i+0x72>
2040132e:	400c                	lw	a1,0(s0)
20401330:	431c                	lw	a5,0(a4)
20401332:	0805f813          	andi	a6,a1,128
20401336:	00478513          	addi	a0,a5,4
2040133a:	00080563          	beqz	a6,20401344 <_printf_i+0x112>
2040133e:	c308                	sw	a0,0(a4)
20401340:	439c                	lw	a5,0(a5)
20401342:	a039                	j	20401350 <_printf_i+0x11e>
20401344:	0405f593          	andi	a1,a1,64
20401348:	c308                	sw	a0,0(a4)
2040134a:	d9fd                	beqz	a1,20401340 <_printf_i+0x10e>
2040134c:	0007d783          	lhu	a5,0(a5)
20401350:	06f00713          	li	a4,111
20401354:	0ce68a63          	beq	a3,a4,20401428 <_printf_i+0x1f6>
20401358:	00004697          	auipc	a3,0x4
2040135c:	6f868693          	addi	a3,a3,1784 # 20405a50 <__sf_fake_stdout+0x34>
20401360:	4729                	li	a4,10
20401362:	040401a3          	sb	zero,67(s0)
20401366:	404c                	lw	a1,4(s0)
20401368:	c40c                	sw	a1,8(s0)
2040136a:	0005c563          	bltz	a1,20401374 <_printf_i+0x142>
2040136e:	4008                	lw	a0,0(s0)
20401370:	996d                	andi	a0,a0,-5
20401372:	c008                	sw	a0,0(s0)
20401374:	e399                	bnez	a5,2040137a <_printf_i+0x148>
20401376:	8ab2                	mv	s5,a2
20401378:	cd91                	beqz	a1,20401394 <_printf_i+0x162>
2040137a:	8ab2                	mv	s5,a2
2040137c:	02e7f5b3          	remu	a1,a5,a4
20401380:	1afd                	addi	s5,s5,-1
20401382:	95b6                	add	a1,a1,a3
20401384:	0005c583          	lbu	a1,0(a1)
20401388:	00ba8023          	sb	a1,0(s5)
2040138c:	02e7d5b3          	divu	a1,a5,a4
20401390:	0ae7f263          	bgeu	a5,a4,20401434 <_printf_i+0x202>
20401394:	47a1                	li	a5,8
20401396:	00f71e63          	bne	a4,a5,204013b2 <_printf_i+0x180>
2040139a:	401c                	lw	a5,0(s0)
2040139c:	8b85                	andi	a5,a5,1
2040139e:	cb91                	beqz	a5,204013b2 <_printf_i+0x180>
204013a0:	4058                	lw	a4,4(s0)
204013a2:	481c                	lw	a5,16(s0)
204013a4:	00e7c763          	blt	a5,a4,204013b2 <_printf_i+0x180>
204013a8:	03000793          	li	a5,48
204013ac:	fefa8fa3          	sb	a5,-1(s5)
204013b0:	1afd                	addi	s5,s5,-1
204013b2:	41560633          	sub	a2,a2,s5
204013b6:	c810                	sw	a2,16(s0)
204013b8:	874e                	mv	a4,s3
204013ba:	86ca                	mv	a3,s2
204013bc:	0070                	addi	a2,sp,12
204013be:	85a2                	mv	a1,s0
204013c0:	8526                	mv	a0,s1
204013c2:	3395                	jal	20401126 <_printf_common>
204013c4:	5a7d                	li	s4,-1
204013c6:	0d451463          	bne	a0,s4,2040148e <_printf_i+0x25c>
204013ca:	557d                	li	a0,-1
204013cc:	50b2                	lw	ra,44(sp)
204013ce:	5422                	lw	s0,40(sp)
204013d0:	5492                	lw	s1,36(sp)
204013d2:	5902                	lw	s2,32(sp)
204013d4:	49f2                	lw	s3,28(sp)
204013d6:	4a62                	lw	s4,24(sp)
204013d8:	4ad2                	lw	s5,20(sp)
204013da:	4b42                	lw	s6,16(sp)
204013dc:	6145                	addi	sp,sp,48
204013de:	8082                	ret
204013e0:	04d582a3          	sb	a3,69(a1)
204013e4:	00004697          	auipc	a3,0x4
204013e8:	66c68693          	addi	a3,a3,1644 # 20405a50 <__sf_fake_stdout+0x34>
204013ec:	400c                	lw	a1,0(s0)
204013ee:	4308                	lw	a0,0(a4)
204013f0:	0805f813          	andi	a6,a1,128
204013f4:	411c                	lw	a5,0(a0)
204013f6:	0511                	addi	a0,a0,4
204013f8:	02080063          	beqz	a6,20401418 <_printf_i+0x1e6>
204013fc:	c308                	sw	a0,0(a4)
204013fe:	0015f713          	andi	a4,a1,1
20401402:	c701                	beqz	a4,2040140a <_printf_i+0x1d8>
20401404:	0205e593          	ori	a1,a1,32
20401408:	c00c                	sw	a1,0(s0)
2040140a:	4741                	li	a4,16
2040140c:	fbb9                	bnez	a5,20401362 <_printf_i+0x130>
2040140e:	400c                	lw	a1,0(s0)
20401410:	fdf5f593          	andi	a1,a1,-33
20401414:	c00c                	sw	a1,0(s0)
20401416:	b7b1                	j	20401362 <_printf_i+0x130>
20401418:	0405f813          	andi	a6,a1,64
2040141c:	c308                	sw	a0,0(a4)
2040141e:	fe0800e3          	beqz	a6,204013fe <_printf_i+0x1cc>
20401422:	07c2                	slli	a5,a5,0x10
20401424:	83c1                	srli	a5,a5,0x10
20401426:	bfe1                	j	204013fe <_printf_i+0x1cc>
20401428:	00004697          	auipc	a3,0x4
2040142c:	62868693          	addi	a3,a3,1576 # 20405a50 <__sf_fake_stdout+0x34>
20401430:	4721                	li	a4,8
20401432:	bf05                	j	20401362 <_printf_i+0x130>
20401434:	87ae                	mv	a5,a1
20401436:	b799                	j	2040137c <_printf_i+0x14a>
20401438:	4194                	lw	a3,0(a1)
2040143a:	431c                	lw	a5,0(a4)
2040143c:	49cc                	lw	a1,20(a1)
2040143e:	0806f813          	andi	a6,a3,128
20401442:	00478513          	addi	a0,a5,4
20401446:	00080663          	beqz	a6,20401452 <_printf_i+0x220>
2040144a:	c308                	sw	a0,0(a4)
2040144c:	439c                	lw	a5,0(a5)
2040144e:	c38c                	sw	a1,0(a5)
20401450:	a801                	j	20401460 <_printf_i+0x22e>
20401452:	c308                	sw	a0,0(a4)
20401454:	0406f693          	andi	a3,a3,64
20401458:	439c                	lw	a5,0(a5)
2040145a:	daf5                	beqz	a3,2040144e <_printf_i+0x21c>
2040145c:	00b79023          	sh	a1,0(a5)
20401460:	00042823          	sw	zero,16(s0)
20401464:	8ab2                	mv	s5,a2
20401466:	bf89                	j	204013b8 <_printf_i+0x186>
20401468:	431c                	lw	a5,0(a4)
2040146a:	41d0                	lw	a2,4(a1)
2040146c:	4581                	li	a1,0
2040146e:	00478693          	addi	a3,a5,4
20401472:	c314                	sw	a3,0(a4)
20401474:	0007aa83          	lw	s5,0(a5)
20401478:	8556                	mv	a0,s5
2040147a:	3179                	jal	20401108 <memchr>
2040147c:	c501                	beqz	a0,20401484 <_printf_i+0x252>
2040147e:	41550533          	sub	a0,a0,s5
20401482:	c048                	sw	a0,4(s0)
20401484:	405c                	lw	a5,4(s0)
20401486:	c81c                	sw	a5,16(s0)
20401488:	040401a3          	sb	zero,67(s0)
2040148c:	b735                	j	204013b8 <_printf_i+0x186>
2040148e:	4814                	lw	a3,16(s0)
20401490:	8656                	mv	a2,s5
20401492:	85ca                	mv	a1,s2
20401494:	8526                	mv	a0,s1
20401496:	9982                	jalr	s3
20401498:	f34509e3          	beq	a0,s4,204013ca <_printf_i+0x198>
2040149c:	401c                	lw	a5,0(s0)
2040149e:	8b89                	andi	a5,a5,2
204014a0:	e78d                	bnez	a5,204014ca <_printf_i+0x298>
204014a2:	47b2                	lw	a5,12(sp)
204014a4:	4448                	lw	a0,12(s0)
204014a6:	f2f553e3          	bge	a0,a5,204013cc <_printf_i+0x19a>
204014aa:	853e                	mv	a0,a5
204014ac:	b705                	j	204013cc <_printf_i+0x19a>
204014ae:	4685                	li	a3,1
204014b0:	8656                	mv	a2,s5
204014b2:	85ca                	mv	a1,s2
204014b4:	8526                	mv	a0,s1
204014b6:	9982                	jalr	s3
204014b8:	f16509e3          	beq	a0,s6,204013ca <_printf_i+0x198>
204014bc:	0a05                	addi	s4,s4,1
204014be:	445c                	lw	a5,12(s0)
204014c0:	4732                	lw	a4,12(sp)
204014c2:	8f99                	sub	a5,a5,a4
204014c4:	fefa45e3          	blt	s4,a5,204014ae <_printf_i+0x27c>
204014c8:	bfe9                	j	204014a2 <_printf_i+0x270>
204014ca:	4a01                	li	s4,0
204014cc:	01940a93          	addi	s5,s0,25
204014d0:	5b7d                	li	s6,-1
204014d2:	b7f5                	j	204014be <_printf_i+0x28c>

204014d4 <_read_r>:
_read_r():
204014d4:	1141                	addi	sp,sp,-16
204014d6:	c422                	sw	s0,8(sp)
204014d8:	842a                	mv	s0,a0
204014da:	852e                	mv	a0,a1
204014dc:	85b2                	mv	a1,a2
204014de:	8636                	mv	a2,a3
204014e0:	8e01a423          	sw	zero,-1816(gp) # 80000870 <errno>
204014e4:	c606                	sw	ra,12(sp)
204014e6:	2075                	jal	20401592 <_read>
204014e8:	57fd                	li	a5,-1
204014ea:	00f51763          	bne	a0,a5,204014f8 <_read_r+0x24>
204014ee:	8e818793          	addi	a5,gp,-1816 # 80000870 <errno>
204014f2:	439c                	lw	a5,0(a5)
204014f4:	c391                	beqz	a5,204014f8 <_read_r+0x24>
204014f6:	c01c                	sw	a5,0(s0)
204014f8:	40b2                	lw	ra,12(sp)
204014fa:	4422                	lw	s0,8(sp)
204014fc:	0141                	addi	sp,sp,16
204014fe:	8082                	ret

20401500 <_close>:
_close():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
20401500:	1101                	addi	sp,sp,-32
20401502:	ce06                	sw	ra,28(sp)
20401504:	cc22                	sw	s0,24(sp)
20401506:	1000                	addi	s0,sp,32
20401508:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
2040150c:	2a59                	jal	204016a2 <__errno>
2040150e:	872a                	mv	a4,a0
20401510:	05800793          	li	a5,88
20401514:	c31c                	sw	a5,0(a4)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_close.c:7
  return -1;
20401516:	57fd                	li	a5,-1
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_close.c:8
}
20401518:	853e                	mv	a0,a5
2040151a:	40f2                	lw	ra,28(sp)
2040151c:	4462                	lw	s0,24(sp)
2040151e:	6105                	addi	sp,sp,32
20401520:	8082                	ret

20401522 <_fstat>:
_fstat():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
20401522:	1101                	addi	sp,sp,-32
20401524:	ce06                	sw	ra,28(sp)
20401526:	cc22                	sw	s0,24(sp)
20401528:	1000                	addi	s0,sp,32
2040152a:	fea42623          	sw	a0,-20(s0)
2040152e:	feb42423          	sw	a1,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
20401532:	2a85                	jal	204016a2 <__errno>
20401534:	872a                	mv	a4,a0
20401536:	fa800793          	li	a5,-88
2040153a:	c31c                	sw	a5,0(a4)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_fstat.c:8
  return -1;
2040153c:	57fd                	li	a5,-1
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_fstat.c:9
}
2040153e:	853e                	mv	a0,a5
20401540:	40f2                	lw	ra,28(sp)
20401542:	4462                	lw	s0,24(sp)
20401544:	6105                	addi	sp,sp,32
20401546:	8082                	ret

20401548 <_isatty>:
_isatty():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
20401548:	1101                	addi	sp,sp,-32
2040154a:	ce22                	sw	s0,28(sp)
2040154c:	1000                	addi	s0,sp,32
2040154e:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
20401552:	fec42783          	lw	a5,-20(s0)
20401556:	17fd                	addi	a5,a5,-1
20401558:	0017b793          	seqz	a5,a5
2040155c:	0ff7f793          	andi	a5,a5,255
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_isatty.c:7
}
20401560:	853e                	mv	a0,a5
20401562:	4472                	lw	s0,28(sp)
20401564:	6105                	addi	sp,sp,32
20401566:	8082                	ret

20401568 <_lseek>:
_lseek():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
20401568:	1101                	addi	sp,sp,-32
2040156a:	ce06                	sw	ra,28(sp)
2040156c:	cc22                	sw	s0,24(sp)
2040156e:	1000                	addi	s0,sp,32
20401570:	fea42623          	sw	a0,-20(s0)
20401574:	feb42423          	sw	a1,-24(s0)
20401578:	fec42223          	sw	a2,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
2040157c:	221d                	jal	204016a2 <__errno>
2040157e:	872a                	mv	a4,a0
20401580:	05800793          	li	a5,88
20401584:	c31c                	sw	a5,0(a4)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_lseek.c:8
  return -1;
20401586:	57fd                	li	a5,-1
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_lseek.c:9
}
20401588:	853e                	mv	a0,a5
2040158a:	40f2                	lw	ra,28(sp)
2040158c:	4462                	lw	s0,24(sp)
2040158e:	6105                	addi	sp,sp,32
20401590:	8082                	ret

20401592 <_read>:
_read():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
20401592:	1101                	addi	sp,sp,-32
20401594:	ce06                	sw	ra,28(sp)
20401596:	cc22                	sw	s0,24(sp)
20401598:	1000                	addi	s0,sp,32
2040159a:	fea42623          	sw	a0,-20(s0)
2040159e:	feb42423          	sw	a1,-24(s0)
204015a2:	fec42223          	sw	a2,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
204015a6:	28f5                	jal	204016a2 <__errno>
204015a8:	872a                	mv	a4,a0
204015aa:	05800793          	li	a5,88
204015ae:	c31c                	sw	a5,0(a4)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_read.c:8
  return -1;
204015b0:	57fd                	li	a5,-1
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_read.c:9
}
204015b2:	853e                	mv	a0,a5
204015b4:	40f2                	lw	ra,28(sp)
204015b6:	4462                	lw	s0,24(sp)
204015b8:	6105                	addi	sp,sp,32
204015ba:	8082                	ret

204015bc <_sbrk>:
_sbrk():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
204015bc:	7179                	addi	sp,sp,-48
204015be:	d622                	sw	s0,44(sp)
204015c0:	1800                	addi	s0,sp,48
204015c2:	fca42e23          	sw	a0,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
204015c6:	800007b7          	lui	a5,0x80000
204015ca:	7907a783          	lw	a5,1936(a5) # 80000790 <metal_segment_heap_target_end+0xfffff31c>
204015ce:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
204015d2:	cec18713          	addi	a4,gp,-788 # 80000c74 <_sp>
204015d6:	4ec18793          	addi	a5,gp,1260 # 80001474 <metal_segment_heap_target_end>
204015da:	00f71463          	bne	a4,a5,204015e2 <_sbrk+0x26>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
204015de:	57fd                	li	a5,-1
204015e0:	a089                	j	20401622 <_sbrk+0x66>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
204015e2:	800007b7          	lui	a5,0x80000
204015e6:	7907a703          	lw	a4,1936(a5) # 80000790 <metal_segment_heap_target_end+0xfffff31c>
204015ea:	fdc42783          	lw	a5,-36(s0)
204015ee:	973e                	add	a4,a4,a5
204015f0:	4ec18793          	addi	a5,gp,1260 # 80001474 <metal_segment_heap_target_end>
204015f4:	02f77063          	bgeu	a4,a5,20401614 <_sbrk+0x58>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
204015f8:	800007b7          	lui	a5,0x80000
204015fc:	7907a703          	lw	a4,1936(a5) # 80000790 <metal_segment_heap_target_end+0xfffff31c>
20401600:	fdc42783          	lw	a5,-36(s0)
20401604:	973e                	add	a4,a4,a5
20401606:	800007b7          	lui	a5,0x80000
2040160a:	78e7a823          	sw	a4,1936(a5) # 80000790 <metal_segment_heap_target_end+0xfffff31c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
2040160e:	fec42783          	lw	a5,-20(s0)
20401612:	a801                	j	20401622 <_sbrk+0x66>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
20401614:	800007b7          	lui	a5,0x80000
20401618:	4ec18713          	addi	a4,gp,1260 # 80001474 <metal_segment_heap_target_end>
2040161c:	78e7a823          	sw	a4,1936(a5) # 80000790 <metal_segment_heap_target_end+0xfffff31c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
20401620:	57fd                	li	a5,-1
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_sbrk.c:39
}
20401622:	853e                	mv	a0,a5
20401624:	5432                	lw	s0,44(sp)
20401626:	6145                	addi	sp,sp,48
20401628:	8082                	ret

2040162a <_write>:
_write():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
2040162a:	7179                	addi	sp,sp,-48
2040162c:	d606                	sw	ra,44(sp)
2040162e:	d422                	sw	s0,40(sp)
20401630:	1800                	addi	s0,sp,48
20401632:	fca42e23          	sw	a0,-36(s0)
20401636:	fcb42c23          	sw	a1,-40(s0)
2040163a:	fcc42a23          	sw	a2,-44(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
2040163e:	fdc42703          	lw	a4,-36(s0)
20401642:	4785                	li	a5,1
20401644:	00f70963          	beq	a4,a5,20401656 <_write+0x2c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
20401648:	28a9                	jal	204016a2 <__errno>
2040164a:	872a                	mv	a4,a0
2040164c:	05800793          	li	a5,88
20401650:	c31c                	sw	a5,0(a4)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_write.c:12
    return -1;
20401652:	57fd                	li	a5,-1
20401654:	a82d                	j	2040168e <_write+0x64>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
20401656:	fd842783          	lw	a5,-40(s0)
2040165a:	fef42423          	sw	a5,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
2040165e:	fe042623          	sw	zero,-20(s0)
20401662:	a839                	j	20401680 <_write+0x56>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
20401664:	fe842703          	lw	a4,-24(s0)
20401668:	fec42783          	lw	a5,-20(s0)
2040166c:	97ba                	add	a5,a5,a4
2040166e:	0007c783          	lbu	a5,0(a5)
20401672:	853e                	mv	a0,a5
20401674:	2ca1                	jal	204018cc <metal_tty_putc>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
20401676:	fec42783          	lw	a5,-20(s0)
2040167a:	0785                	addi	a5,a5,1
2040167c:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
20401680:	fec42703          	lw	a4,-20(s0)
20401684:	fd442783          	lw	a5,-44(s0)
20401688:	fcf76ee3          	bltu	a4,a5,20401664 <_write+0x3a>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_write.c:18
  return 0;
2040168c:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_write.c:19
}
2040168e:	853e                	mv	a0,a5
20401690:	50b2                	lw	ra,44(sp)
20401692:	5422                	lw	s0,40(sp)
20401694:	6145                	addi	sp,sp,48
20401696:	8082                	ret

20401698 <atexit>:
atexit():
20401698:	85aa                	mv	a1,a0
2040169a:	4681                	li	a3,0
2040169c:	4601                	li	a2,0
2040169e:	4501                	li	a0,0
204016a0:	a8f1                	j	2040177c <__register_exitproc>

204016a2 <__errno>:
__errno():
204016a2:	5fbff797          	auipc	a5,0x5fbff
204016a6:	0e678793          	addi	a5,a5,230 # 80000788 <_impure_ptr>
204016aa:	4388                	lw	a0,0(a5)
204016ac:	8082                	ret

204016ae <exit>:
exit():
204016ae:	1141                	addi	sp,sp,-16
204016b0:	c422                	sw	s0,8(sp)
204016b2:	c606                	sw	ra,12(sp)
204016b4:	00000797          	auipc	a5,0x0
204016b8:	15078793          	addi	a5,a5,336 # 20401804 <__call_exitprocs>
204016bc:	842a                	mv	s0,a0
204016be:	c399                	beqz	a5,204016c4 <exit+0x16>
204016c0:	4581                	li	a1,0
204016c2:	2289                	jal	20401804 <__call_exitprocs>
204016c4:	5fbff797          	auipc	a5,0x5fbff
204016c8:	0c878793          	addi	a5,a5,200 # 8000078c <_global_impure_ptr>
204016cc:	4388                	lw	a0,0(a5)
204016ce:	551c                	lw	a5,40(a0)
204016d0:	c391                	beqz	a5,204016d4 <exit+0x26>
204016d2:	9782                	jalr	a5
204016d4:	8522                	mv	a0,s0
204016d6:	2cc040ef          	jal	ra,204059a2 <_exit>

204016da <__libc_fini_array>:
__libc_fini_array():
204016da:	1141                	addi	sp,sp,-16
204016dc:	00005797          	auipc	a5,0x5
204016e0:	f8878793          	addi	a5,a5,-120 # 20406664 <__fini_array_end>
204016e4:	c422                	sw	s0,8(sp)
204016e6:	00005417          	auipc	s0,0x5
204016ea:	f7e40413          	addi	s0,s0,-130 # 20406664 <__fini_array_end>
204016ee:	8c1d                	sub	s0,s0,a5
204016f0:	c226                	sw	s1,4(sp)
204016f2:	c606                	sw	ra,12(sp)
204016f4:	8409                	srai	s0,s0,0x2
204016f6:	84be                	mv	s1,a5
204016f8:	e411                	bnez	s0,20401704 <__libc_fini_array+0x2a>
204016fa:	40b2                	lw	ra,12(sp)
204016fc:	4422                	lw	s0,8(sp)
204016fe:	4492                	lw	s1,4(sp)
20401700:	0141                	addi	sp,sp,16
20401702:	8082                	ret
20401704:	147d                	addi	s0,s0,-1
20401706:	00241793          	slli	a5,s0,0x2
2040170a:	97a6                	add	a5,a5,s1
2040170c:	439c                	lw	a5,0(a5)
2040170e:	9782                	jalr	a5
20401710:	b7e5                	j	204016f8 <__libc_fini_array+0x1e>

20401712 <__libc_init_array>:
__libc_init_array():
20401712:	1141                	addi	sp,sp,-16
20401714:	00005797          	auipc	a5,0x5
20401718:	f4478793          	addi	a5,a5,-188 # 20406658 <__init_array_start>
2040171c:	c422                	sw	s0,8(sp)
2040171e:	00005417          	auipc	s0,0x5
20401722:	f3a40413          	addi	s0,s0,-198 # 20406658 <__init_array_start>
20401726:	8c1d                	sub	s0,s0,a5
20401728:	c226                	sw	s1,4(sp)
2040172a:	c04a                	sw	s2,0(sp)
2040172c:	c606                	sw	ra,12(sp)
2040172e:	8409                	srai	s0,s0,0x2
20401730:	4481                	li	s1,0
20401732:	893e                	mv	s2,a5
20401734:	02849663          	bne	s1,s0,20401760 <__libc_init_array+0x4e>
20401738:	00005797          	auipc	a5,0x5
2040173c:	f2078793          	addi	a5,a5,-224 # 20406658 <__init_array_start>
20401740:	00005417          	auipc	s0,0x5
20401744:	f2440413          	addi	s0,s0,-220 # 20406664 <__fini_array_end>
20401748:	8c1d                	sub	s0,s0,a5
2040174a:	8409                	srai	s0,s0,0x2
2040174c:	4481                	li	s1,0
2040174e:	893e                	mv	s2,a5
20401750:	00849f63          	bne	s1,s0,2040176e <__libc_init_array+0x5c>
20401754:	40b2                	lw	ra,12(sp)
20401756:	4422                	lw	s0,8(sp)
20401758:	4492                	lw	s1,4(sp)
2040175a:	4902                	lw	s2,0(sp)
2040175c:	0141                	addi	sp,sp,16
2040175e:	8082                	ret
20401760:	00249793          	slli	a5,s1,0x2
20401764:	97ca                	add	a5,a5,s2
20401766:	439c                	lw	a5,0(a5)
20401768:	0485                	addi	s1,s1,1
2040176a:	9782                	jalr	a5
2040176c:	b7e1                	j	20401734 <__libc_init_array+0x22>
2040176e:	00249793          	slli	a5,s1,0x2
20401772:	97ca                	add	a5,a5,s2
20401774:	439c                	lw	a5,0(a5)
20401776:	0485                	addi	s1,s1,1
20401778:	9782                	jalr	a5
2040177a:	bfd9                	j	20401750 <__libc_init_array+0x3e>

2040177c <__register_exitproc>:
__register_exitproc():
2040177c:	5fbff797          	auipc	a5,0x5fbff
20401780:	06478793          	addi	a5,a5,100 # 800007e0 <_global_atexit>
20401784:	439c                	lw	a5,0(a5)
20401786:	8e2a                	mv	t3,a0
20401788:	e39d                	bnez	a5,204017ae <__register_exitproc+0x32>
2040178a:	5fbff717          	auipc	a4,0x5fbff
2040178e:	05a70713          	addi	a4,a4,90 # 800007e4 <_global_atexit0>
20401792:	5fbff797          	auipc	a5,0x5fbff
20401796:	04e7a723          	sw	a4,78(a5) # 800007e0 <_global_atexit>
2040179a:	dfbff517          	auipc	a0,0xdfbff
2040179e:	86650513          	addi	a0,a0,-1946 # 0 <__metal_boot_hart>
204017a2:	87ba                	mv	a5,a4
204017a4:	c509                	beqz	a0,204017ae <__register_exitproc+0x32>
204017a6:	411c                	lw	a5,0(a0)
204017a8:	8ef1a223          	sw	a5,-1820(gp) # 8000086c <_global_atexit0+0x88>
204017ac:	87ba                	mv	a5,a4
204017ae:	43d8                	lw	a4,4(a5)
204017b0:	487d                	li	a6,31
204017b2:	557d                	li	a0,-1
204017b4:	04e84763          	blt	a6,a4,20401802 <__register_exitproc+0x86>
204017b8:	020e0e63          	beqz	t3,204017f4 <__register_exitproc+0x78>
204017bc:	0887a803          	lw	a6,136(a5)
204017c0:	04080163          	beqz	a6,20401802 <__register_exitproc+0x86>
204017c4:	00271893          	slli	a7,a4,0x2
204017c8:	98c2                	add	a7,a7,a6
204017ca:	00c8a023          	sw	a2,0(a7)
204017ce:	10082303          	lw	t1,256(a6)
204017d2:	4605                	li	a2,1
204017d4:	00e61633          	sll	a2,a2,a4
204017d8:	00c36333          	or	t1,t1,a2
204017dc:	10682023          	sw	t1,256(a6)
204017e0:	08d8a023          	sw	a3,128(a7)
204017e4:	4689                	li	a3,2
204017e6:	00de1763          	bne	t3,a3,204017f4 <__register_exitproc+0x78>
204017ea:	10482683          	lw	a3,260(a6)
204017ee:	8e55                	or	a2,a2,a3
204017f0:	10c82223          	sw	a2,260(a6)
204017f4:	00170693          	addi	a3,a4,1
204017f8:	070a                	slli	a4,a4,0x2
204017fa:	c3d4                	sw	a3,4(a5)
204017fc:	97ba                	add	a5,a5,a4
204017fe:	c78c                	sw	a1,8(a5)
20401800:	4501                	li	a0,0
20401802:	8082                	ret

20401804 <__call_exitprocs>:
__call_exitprocs():
20401804:	7179                	addi	sp,sp,-48
20401806:	cc52                	sw	s4,24(sp)
20401808:	ca56                	sw	s5,20(sp)
2040180a:	c85a                	sw	s6,16(sp)
2040180c:	c65e                	sw	s7,12(sp)
2040180e:	d606                	sw	ra,44(sp)
20401810:	d422                	sw	s0,40(sp)
20401812:	d226                	sw	s1,36(sp)
20401814:	d04a                	sw	s2,32(sp)
20401816:	ce4e                	sw	s3,28(sp)
20401818:	c462                	sw	s8,8(sp)
2040181a:	8b2a                	mv	s6,a0
2040181c:	8a2e                	mv	s4,a1
2040181e:	5fbffa97          	auipc	s5,0x5fbff
20401822:	fc2a8a93          	addi	s5,s5,-62 # 800007e0 <_global_atexit>
20401826:	4b85                	li	s7,1
20401828:	000aa403          	lw	s0,0(s5)
2040182c:	c811                	beqz	s0,20401840 <__call_exitprocs+0x3c>
2040182e:	4044                	lw	s1,4(s0)
20401830:	08842983          	lw	s3,136(s0)
20401834:	fff48913          	addi	s2,s1,-1
20401838:	048a                	slli	s1,s1,0x2
2040183a:	94a2                	add	s1,s1,s0
2040183c:	00095e63          	bgez	s2,20401858 <__call_exitprocs+0x54>
20401840:	50b2                	lw	ra,44(sp)
20401842:	5422                	lw	s0,40(sp)
20401844:	5492                	lw	s1,36(sp)
20401846:	5902                	lw	s2,32(sp)
20401848:	49f2                	lw	s3,28(sp)
2040184a:	4a62                	lw	s4,24(sp)
2040184c:	4ad2                	lw	s5,20(sp)
2040184e:	4b42                	lw	s6,16(sp)
20401850:	4bb2                	lw	s7,12(sp)
20401852:	4c22                	lw	s8,8(sp)
20401854:	6145                	addi	sp,sp,48
20401856:	8082                	ret
20401858:	000a0e63          	beqz	s4,20401874 <__call_exitprocs+0x70>
2040185c:	00099563          	bnez	s3,20401866 <__call_exitprocs+0x62>
20401860:	197d                	addi	s2,s2,-1
20401862:	14f1                	addi	s1,s1,-4
20401864:	bfe1                	j	2040183c <__call_exitprocs+0x38>
20401866:	00291793          	slli	a5,s2,0x2
2040186a:	97ce                	add	a5,a5,s3
2040186c:	0807a783          	lw	a5,128(a5)
20401870:	ff4798e3          	bne	a5,s4,20401860 <__call_exitprocs+0x5c>
20401874:	4058                	lw	a4,4(s0)
20401876:	40dc                	lw	a5,4(s1)
20401878:	177d                	addi	a4,a4,-1
2040187a:	03271863          	bne	a4,s2,204018aa <__call_exitprocs+0xa6>
2040187e:	01242223          	sw	s2,4(s0)
20401882:	dff9                	beqz	a5,20401860 <__call_exitprocs+0x5c>
20401884:	00442c03          	lw	s8,4(s0)
20401888:	00098863          	beqz	s3,20401898 <__call_exitprocs+0x94>
2040188c:	1009a683          	lw	a3,256(s3)
20401890:	012b9733          	sll	a4,s7,s2
20401894:	8ef9                	and	a3,a3,a4
20401896:	ee89                	bnez	a3,204018b0 <__call_exitprocs+0xac>
20401898:	9782                	jalr	a5
2040189a:	4058                	lw	a4,4(s0)
2040189c:	000aa783          	lw	a5,0(s5)
204018a0:	f98714e3          	bne	a4,s8,20401828 <__call_exitprocs+0x24>
204018a4:	faf40ee3          	beq	s0,a5,20401860 <__call_exitprocs+0x5c>
204018a8:	b741                	j	20401828 <__call_exitprocs+0x24>
204018aa:	0004a223          	sw	zero,4(s1)
204018ae:	bfd1                	j	20401882 <__call_exitprocs+0x7e>
204018b0:	00291693          	slli	a3,s2,0x2
204018b4:	96ce                	add	a3,a3,s3
204018b6:	428c                	lw	a1,0(a3)
204018b8:	1049a683          	lw	a3,260(s3)
204018bc:	8f75                	and	a4,a4,a3
204018be:	e701                	bnez	a4,204018c6 <__call_exitprocs+0xc2>
204018c0:	855a                	mv	a0,s6
204018c2:	9782                	jalr	a5
204018c4:	bfd9                	j	2040189a <__call_exitprocs+0x96>
204018c6:	852e                	mv	a0,a1
204018c8:	9782                	jalr	a5
204018ca:	bfc1                	j	2040189a <__call_exitprocs+0x96>

204018cc <metal_tty_putc>:
metal_tty_putc():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
204018cc:	1101                	addi	sp,sp,-32
204018ce:	ce06                	sw	ra,28(sp)
204018d0:	cc22                	sw	s0,24(sp)
204018d2:	1000                	addi	s0,sp,32
204018d4:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/tty.c:13
    if (c == '\n') {
204018d8:	fec42703          	lw	a4,-20(s0)
204018dc:	47a9                	li	a5,10
204018de:	00f71463          	bne	a4,a5,204018e6 <metal_tty_putc+0x1a>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
204018e2:	4535                	li	a0,13
204018e4:	2811                	jal	204018f8 <metal_tty_putc_raw>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
204018e6:	fec42503          	lw	a0,-20(s0)
204018ea:	2039                	jal	204018f8 <metal_tty_putc_raw>
204018ec:	87aa                	mv	a5,a0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/tty.c:17
}
204018ee:	853e                	mv	a0,a5
204018f0:	40f2                	lw	ra,28(sp)
204018f2:	4462                	lw	s0,24(sp)
204018f4:	6105                	addi	sp,sp,32
204018f6:	8082                	ret

204018f8 <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
204018f8:	1101                	addi	sp,sp,-32
204018fa:	ce06                	sw	ra,28(sp)
204018fc:	cc22                	sw	s0,24(sp)
204018fe:	1000                	addi	s0,sp,32
20401900:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
20401904:	fec42583          	lw	a1,-20(s0)
20401908:	800007b7          	lui	a5,0x80000
2040190c:	74078513          	addi	a0,a5,1856 # 80000740 <metal_segment_heap_target_end+0xfffff2cc>
20401910:	28b1                	jal	2040196c <metal_uart_putc>
20401912:	87aa                	mv	a5,a0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/tty.c:22
}
20401914:	853e                	mv	a0,a5
20401916:	40f2                	lw	ra,28(sp)
20401918:	4462                	lw	s0,24(sp)
2040191a:	6105                	addi	sp,sp,32
2040191c:	8082                	ret

2040191e <metal_tty_init>:
metal_tty_init():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
2040191e:	1141                	addi	sp,sp,-16
20401920:	c606                	sw	ra,12(sp)
20401922:	c422                	sw	s0,8(sp)
20401924:	0800                	addi	s0,sp,16
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
20401926:	67f1                	lui	a5,0x1c
20401928:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
2040192c:	800007b7          	lui	a5,0x80000
20401930:	74078513          	addi	a0,a5,1856 # 80000740 <metal_segment_heap_target_end+0xfffff2cc>
20401934:	2031                	jal	20401940 <metal_uart_init>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/tty.c:42
}
20401936:	0001                	nop
20401938:	40b2                	lw	ra,12(sp)
2040193a:	4422                	lw	s0,8(sp)
2040193c:	0141                	addi	sp,sp,16
2040193e:	8082                	ret

20401940 <metal_uart_init>:
metal_uart_init():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
20401940:	1101                	addi	sp,sp,-32
20401942:	ce06                	sw	ra,28(sp)
20401944:	cc22                	sw	s0,24(sp)
20401946:	1000                	addi	s0,sp,32
20401948:	fea42623          	sw	a0,-20(s0)
2040194c:	feb42423          	sw	a1,-24(s0)
20401950:	fec42783          	lw	a5,-20(s0)
20401954:	439c                	lw	a5,0(a5)
20401956:	439c                	lw	a5,0(a5)
20401958:	fe842583          	lw	a1,-24(s0)
2040195c:	fec42503          	lw	a0,-20(s0)
20401960:	9782                	jalr	a5
20401962:	0001                	nop
20401964:	40f2                	lw	ra,28(sp)
20401966:	4462                	lw	s0,24(sp)
20401968:	6105                	addi	sp,sp,32
2040196a:	8082                	ret

2040196c <metal_uart_putc>:
metal_uart_putc():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
2040196c:	1101                	addi	sp,sp,-32
2040196e:	ce06                	sw	ra,28(sp)
20401970:	cc22                	sw	s0,24(sp)
20401972:	1000                	addi	s0,sp,32
20401974:	fea42623          	sw	a0,-20(s0)
20401978:	feb42423          	sw	a1,-24(s0)
2040197c:	fec42783          	lw	a5,-20(s0)
20401980:	439c                	lw	a5,0(a5)
20401982:	43dc                	lw	a5,4(a5)
20401984:	fe842583          	lw	a1,-24(s0)
20401988:	fec42503          	lw	a0,-20(s0)
2040198c:	9782                	jalr	a5
2040198e:	87aa                	mv	a5,a0
20401990:	853e                	mv	a0,a5
20401992:	40f2                	lw	ra,28(sp)
20401994:	4462                	lw	s0,24(sp)
20401996:	6105                	addi	sp,sp,32
20401998:	8082                	ret

2040199a <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
2040199a:	1101                	addi	sp,sp,-32
2040199c:	ce06                	sw	ra,28(sp)
2040199e:	cc22                	sw	s0,24(sp)
204019a0:	1000                	addi	s0,sp,32
204019a2:	fea42623          	sw	a0,-20(s0)
204019a6:	feb42423          	sw	a1,-24(s0)
204019aa:	fec42783          	lw	a5,-20(s0)
204019ae:	439c                	lw	a5,0(a5)
204019b0:	4bdc                	lw	a5,20(a5)
204019b2:	fe842583          	lw	a1,-24(s0)
204019b6:	fec42503          	lw	a0,-20(s0)
204019ba:	9782                	jalr	a5
204019bc:	87aa                	mv	a5,a0
204019be:	853e                	mv	a0,a5
204019c0:	40f2                	lw	ra,28(sp)
204019c2:	4462                	lw	s0,24(sp)
204019c4:	6105                	addi	sp,sp,32
204019c6:	8082                	ret

204019c8 <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:188
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
204019c8:	1101                	addi	sp,sp,-32
204019ca:	ce22                	sw	s0,28(sp)
204019cc:	1000                	addi	s0,sp,32
204019ce:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:189
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
204019d2:	fec42703          	lw	a4,-20(s0)
204019d6:	81018793          	addi	a5,gp,-2032 # 80000798 <__metal_dt_clint_2000000>
204019da:	00f71563          	bne	a4,a5,204019e4 <__metal_driver_sifive_clint0_control_base+0x1c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:190
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
204019de:	020007b7          	lui	a5,0x2000
204019e2:	a011                	j	204019e6 <__metal_driver_sifive_clint0_control_base+0x1e>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:193
	}
	else {
		return 0;
204019e4:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:195
	}
}
204019e6:	853e                	mv	a0,a5
204019e8:	4472                	lw	s0,28(sp)
204019ea:	6105                	addi	sp,sp,32
204019ec:	8082                	ret

204019ee <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:208
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
204019ee:	1101                	addi	sp,sp,-32
204019f0:	ce22                	sw	s0,28(sp)
204019f2:	1000                	addi	s0,sp,32
204019f4:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:209
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
204019f8:	fec42703          	lw	a4,-20(s0)
204019fc:	81018793          	addi	a5,gp,-2032 # 80000798 <__metal_dt_clint_2000000>
20401a00:	00f71463          	bne	a4,a5,20401a08 <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:210
		return METAL_MAX_CLINT_INTERRUPTS;
20401a04:	4789                	li	a5,2
20401a06:	a011                	j	20401a0a <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:213
	}
	else {
		return 0;
20401a08:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:215
	}
}
20401a0a:	853e                	mv	a0,a5
20401a0c:	4472                	lw	s0,28(sp)
20401a0e:	6105                	addi	sp,sp,32
20401a10:	8082                	ret

20401a12 <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:218

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20401a12:	1101                	addi	sp,sp,-32
20401a14:	ce22                	sw	s0,28(sp)
20401a16:	1000                	addi	s0,sp,32
20401a18:	fea42623          	sw	a0,-20(s0)
20401a1c:	feb42423          	sw	a1,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:219
	if (idx == 0) {
20401a20:	fe842783          	lw	a5,-24(s0)
20401a24:	e791                	bnez	a5,20401a30 <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:220
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20401a26:	800007b7          	lui	a5,0x80000
20401a2a:	08878793          	addi	a5,a5,136 # 80000088 <metal_segment_heap_target_end+0xffffec14>
20401a2e:	a821                	j	20401a46 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:222
	}
	else if (idx == 1) {
20401a30:	fe842703          	lw	a4,-24(s0)
20401a34:	4785                	li	a5,1
20401a36:	00f71763          	bne	a4,a5,20401a44 <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:223
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20401a3a:	800007b7          	lui	a5,0x80000
20401a3e:	08878793          	addi	a5,a5,136 # 80000088 <metal_segment_heap_target_end+0xffffec14>
20401a42:	a011                	j	20401a46 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:226
	}
	else {
		return NULL;
20401a44:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:228
	}
}
20401a46:	853e                	mv	a0,a5
20401a48:	4472                	lw	s0,28(sp)
20401a4a:	6105                	addi	sp,sp,32
20401a4c:	8082                	ret

20401a4e <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:231

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20401a4e:	1101                	addi	sp,sp,-32
20401a50:	ce22                	sw	s0,28(sp)
20401a52:	1000                	addi	s0,sp,32
20401a54:	fea42623          	sw	a0,-20(s0)
20401a58:	feb42423          	sw	a1,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:232
	if (idx == 0) {
20401a5c:	fe842783          	lw	a5,-24(s0)
20401a60:	e399                	bnez	a5,20401a66 <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:233
		return 3;
20401a62:	478d                	li	a5,3
20401a64:	a809                	j	20401a76 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:235
	}
	else if (idx == 1) {
20401a66:	fe842703          	lw	a4,-24(s0)
20401a6a:	4785                	li	a5,1
20401a6c:	00f71463          	bne	a4,a5,20401a74 <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:236
		return 7;
20401a70:	479d                	li	a5,7
20401a72:	a011                	j	20401a76 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:239
	}
	else {
		return 0;
20401a74:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:241
	}
}
20401a76:	853e                	mv	a0,a5
20401a78:	4472                	lw	s0,28(sp)
20401a7a:	6105                	addi	sp,sp,32
20401a7c:	8082                	ret

20401a7e <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
20401a7e:	715d                	addi	sp,sp,-80
20401a80:	c686                	sw	ra,76(sp)
20401a82:	c4a2                	sw	s0,72(sp)
20401a84:	c2ca                	sw	s2,68(sp)
20401a86:	c0ce                	sw	s3,64(sp)
20401a88:	de52                	sw	s4,60(sp)
20401a8a:	dc56                	sw	s5,56(sp)
20401a8c:	da5a                	sw	s6,52(sp)
20401a8e:	d85e                	sw	s7,48(sp)
20401a90:	d662                	sw	s8,44(sp)
20401a92:	d466                	sw	s9,40(sp)
20401a94:	0880                	addi	s0,sp,80
20401a96:	faa42e23          	sw	a0,-68(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20401a9a:	fbc42783          	lw	a5,-68(s0)
20401a9e:	853e                	mv	a0,a5
20401aa0:	3725                	jal	204019c8 <__metal_driver_sifive_clint0_control_base>
20401aa2:	fca42623          	sw	a0,-52(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
20401aa6:	fcc42703          	lw	a4,-52(s0)
20401aaa:	67b1                	lui	a5,0xc
20401aac:	17f1                	addi	a5,a5,-4
20401aae:	97ba                	add	a5,a5,a4
20401ab0:	439c                	lw	a5,0(a5)
20401ab2:	fcf42423          	sw	a5,-56(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
20401ab6:	fcc42703          	lw	a4,-52(s0)
20401aba:	67b1                	lui	a5,0xc
20401abc:	17e1                	addi	a5,a5,-8
20401abe:	97ba                	add	a5,a5,a4
20401ac0:	439c                	lw	a5,0(a5)
20401ac2:	fcf42223          	sw	a5,-60(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
20401ac6:	fcc42703          	lw	a4,-52(s0)
20401aca:	67b1                	lui	a5,0xc
20401acc:	17f1                	addi	a5,a5,-4
20401ace:	97ba                	add	a5,a5,a4
20401ad0:	439c                	lw	a5,0(a5)
20401ad2:	fc842703          	lw	a4,-56(s0)
20401ad6:	fcf718e3          	bne	a4,a5,20401aa6 <__metal_clint0_mtime_get+0x28>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
20401ada:	fc842783          	lw	a5,-56(s0)
20401ade:	8c3e                	mv	s8,a5
20401ae0:	4c81                	li	s9,0
20401ae2:	000c1993          	slli	s3,s8,0x0
20401ae6:	4901                	li	s2,0
20401ae8:	fc442783          	lw	a5,-60(s0)
20401aec:	8a3e                	mv	s4,a5
20401aee:	4a81                	li	s5,0
20401af0:	01496b33          	or	s6,s2,s4
20401af4:	0159ebb3          	or	s7,s3,s5
20401af8:	87da                	mv	a5,s6
20401afa:	885e                	mv	a6,s7
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:25
}
20401afc:	853e                	mv	a0,a5
20401afe:	85c2                	mv	a1,a6
20401b00:	40b6                	lw	ra,76(sp)
20401b02:	4426                	lw	s0,72(sp)
20401b04:	4916                	lw	s2,68(sp)
20401b06:	4986                	lw	s3,64(sp)
20401b08:	5a72                	lw	s4,60(sp)
20401b0a:	5ae2                	lw	s5,56(sp)
20401b0c:	5b52                	lw	s6,52(sp)
20401b0e:	5bc2                	lw	s7,48(sp)
20401b10:	5c32                	lw	s8,44(sp)
20401b12:	5ca2                	lw	s9,40(sp)
20401b14:	6161                	addi	sp,sp,80
20401b16:	8082                	ret

20401b18 <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
20401b18:	7179                	addi	sp,sp,-48
20401b1a:	d606                	sw	ra,44(sp)
20401b1c:	d422                	sw	s0,40(sp)
20401b1e:	d24a                	sw	s2,36(sp)
20401b20:	d04e                	sw	s3,32(sp)
20401b22:	1800                	addi	s0,sp,48
20401b24:	fca42e23          	sw	a0,-36(s0)
20401b28:	fcb42c23          	sw	a1,-40(s0)
20401b2c:	fcc42823          	sw	a2,-48(s0)
20401b30:	fcd42a23          	sw	a3,-44(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
20401b34:	fdc42783          	lw	a5,-36(s0)
20401b38:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20401b3c:	fec42783          	lw	a5,-20(s0)
20401b40:	853e                	mv	a0,a5
20401b42:	3559                	jal	204019c8 <__metal_driver_sifive_clint0_control_base>
20401b44:	fea42423          	sw	a0,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
20401b48:	fd842783          	lw	a5,-40(s0)
20401b4c:	078e                	slli	a5,a5,0x3
20401b4e:	873e                	mv	a4,a5
20401b50:	fe842783          	lw	a5,-24(s0)
20401b54:	973e                	add	a4,a4,a5
20401b56:	6791                	lui	a5,0x4
20401b58:	0791                	addi	a5,a5,4
20401b5a:	97ba                	add	a5,a5,a4
20401b5c:	873e                	mv	a4,a5
20401b5e:	57fd                	li	a5,-1
20401b60:	c31c                	sw	a5,0(a4)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
20401b62:	fd842783          	lw	a5,-40(s0)
20401b66:	078e                	slli	a5,a5,0x3
20401b68:	873e                	mv	a4,a5
20401b6a:	fe842783          	lw	a5,-24(s0)
20401b6e:	973e                	add	a4,a4,a5
20401b70:	6791                	lui	a5,0x4
20401b72:	97ba                	add	a5,a5,a4
20401b74:	873e                	mv	a4,a5
20401b76:	fd042783          	lw	a5,-48(s0)
20401b7a:	c31c                	sw	a5,0(a4)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
20401b7c:	fd442783          	lw	a5,-44(s0)
20401b80:	0007d913          	srli	s2,a5,0x0
20401b84:	4981                	li	s3,0
20401b86:	fd842783          	lw	a5,-40(s0)
20401b8a:	078e                	slli	a5,a5,0x3
20401b8c:	873e                	mv	a4,a5
20401b8e:	fe842783          	lw	a5,-24(s0)
20401b92:	973e                	add	a4,a4,a5
20401b94:	6791                	lui	a5,0x4
20401b96:	0791                	addi	a5,a5,4
20401b98:	97ba                	add	a5,a5,a4
20401b9a:	874a                	mv	a4,s2
20401b9c:	c398                	sw	a4,0(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
20401b9e:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:44
}
20401ba0:	853e                	mv	a0,a5
20401ba2:	50b2                	lw	ra,44(sp)
20401ba4:	5422                	lw	s0,40(sp)
20401ba6:	5912                	lw	s2,36(sp)
20401ba8:	5982                	lw	s3,32(sp)
20401baa:	6145                	addi	sp,sp,48
20401bac:	8082                	ret

20401bae <_get_cpu_intc>:
_get_cpu_intc():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
20401bae:	1101                	addi	sp,sp,-32
20401bb0:	ce06                	sw	ra,28(sp)
20401bb2:	cc22                	sw	s0,24(sp)
20401bb4:	1000                	addi	s0,sp,32
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
20401bb6:	fe042623          	sw	zero,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
20401bba:	f14027f3          	csrr	a5,mhartid
20401bbe:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
20401bc2:	fec42783          	lw	a5,-20(s0)
20401bc6:	853e                	mv	a0,a5
20401bc8:	439030ef          	jal	ra,20405800 <metal_cpu_get>
20401bcc:	fea42423          	sw	a0,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
20401bd0:	fe842503          	lw	a0,-24(s0)
20401bd4:	407030ef          	jal	ra,204057da <metal_cpu_interrupt_controller>
20401bd8:	87aa                	mv	a5,a0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:55
}
20401bda:	853e                	mv	a0,a5
20401bdc:	40f2                	lw	ra,28(sp)
20401bde:	4462                	lw	s0,24(sp)
20401be0:	6105                	addi	sp,sp,32
20401be2:	8082                	ret

20401be4 <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
20401be4:	7139                	addi	sp,sp,-64
20401be6:	de06                	sw	ra,60(sp)
20401be8:	dc22                	sw	s0,56(sp)
20401bea:	0080                	addi	s0,sp,64
20401bec:	fca42623          	sw	a0,-52(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20401bf0:	fcc42503          	lw	a0,-52(s0)
20401bf4:	3bed                	jal	204019ee <__metal_driver_sifive_clint0_num_interrupts>
20401bf6:	fea42423          	sw	a0,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
20401bfa:	fcc42783          	lw	a5,-52(s0)
20401bfe:	fef42223          	sw	a5,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
20401c02:	fe442783          	lw	a5,-28(s0)
20401c06:	43dc                	lw	a5,4(a5)
20401c08:	efa9                	bnez	a5,20401c62 <__metal_driver_riscv_clint0_init+0x7e>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
20401c0a:	fe042623          	sw	zero,-20(s0)
20401c0e:	a081                	j	20401c4e <__metal_driver_riscv_clint0_init+0x6a>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20401c10:	fec42583          	lw	a1,-20(s0)
20401c14:	fcc42503          	lw	a0,-52(s0)
20401c18:	3bed                	jal	20401a12 <__metal_driver_sifive_clint0_interrupt_parents>
20401c1a:	fea42023          	sw	a0,-32(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20401c1e:	fec42583          	lw	a1,-20(s0)
20401c22:	fcc42503          	lw	a0,-52(s0)
20401c26:	3525                	jal	20401a4e <__metal_driver_sifive_clint0_interrupt_lines>
20401c28:	fca42e23          	sw	a0,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
20401c2c:	fe042783          	lw	a5,-32(s0)
20401c30:	439c                	lw	a5,0(a5)
20401c32:	4fdc                	lw	a5,28(a5)
20401c34:	fcc42683          	lw	a3,-52(s0)
20401c38:	4601                	li	a2,0
20401c3a:	fdc42583          	lw	a1,-36(s0)
20401c3e:	fe042503          	lw	a0,-32(s0)
20401c42:	9782                	jalr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
20401c44:	fec42783          	lw	a5,-20(s0)
20401c48:	0785                	addi	a5,a5,1
20401c4a:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
20401c4e:	fec42703          	lw	a4,-20(s0)
20401c52:	fe842783          	lw	a5,-24(s0)
20401c56:	faf74de3          	blt	a4,a5,20401c10 <__metal_driver_riscv_clint0_init+0x2c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
20401c5a:	fe442783          	lw	a5,-28(s0)
20401c5e:	4705                	li	a4,1
20401c60:	c3d8                	sw	a4,4(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
20401c62:	0001                	nop
20401c64:	50f2                	lw	ra,60(sp)
20401c66:	5462                	lw	s0,56(sp)
20401c68:	6121                	addi	sp,sp,64
20401c6a:	8082                	ret

20401c6c <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
20401c6c:	7139                	addi	sp,sp,-64
20401c6e:	de06                	sw	ra,60(sp)
20401c70:	dc22                	sw	s0,56(sp)
20401c72:	0080                	addi	s0,sp,64
20401c74:	fca42623          	sw	a0,-52(s0)
20401c78:	fcb42423          	sw	a1,-56(s0)
20401c7c:	fcc42223          	sw	a2,-60(s0)
20401c80:	fcd42023          	sw	a3,-64(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
20401c84:	57fd                	li	a5,-1
20401c86:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
20401c8a:	388010ef          	jal	ra,20403012 <__metal_controller_interrupt_vector_mode>
20401c8e:	fea42023          	sw	a0,-32(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
20401c92:	fe042423          	sw	zero,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
20401c96:	3f21                	jal	20401bae <_get_cpu_intc>
20401c98:	fca42e23          	sw	a0,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20401c9c:	fcc42503          	lw	a0,-52(s0)
20401ca0:	33b9                	jal	204019ee <__metal_driver_sifive_clint0_num_interrupts>
20401ca2:	fca42c23          	sw	a0,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
20401ca6:	fe042703          	lw	a4,-32(s0)
20401caa:	4785                	li	a5,1
20401cac:	00f70863          	beq	a4,a5,20401cbc <__metal_driver_riscv_clint0_register+0x50>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
20401cb0:	fe042783          	lw	a5,-32(s0)
20401cb4:	c781                	beqz	a5,20401cbc <__metal_driver_riscv_clint0_register+0x50>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
20401cb6:	fec42783          	lw	a5,-20(s0)
20401cba:	a049                	j	20401d3c <__metal_driver_riscv_clint0_register+0xd0>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
20401cbc:	fe042223          	sw	zero,-28(s0)
20401cc0:	a091                	j	20401d04 <__metal_driver_riscv_clint0_register+0x98>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20401cc2:	fe442583          	lw	a1,-28(s0)
20401cc6:	fcc42503          	lw	a0,-52(s0)
20401cca:	3351                	jal	20401a4e <__metal_driver_sifive_clint0_interrupt_lines>
20401ccc:	fca42a23          	sw	a0,-44(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20401cd0:	fe442583          	lw	a1,-28(s0)
20401cd4:	fcc42503          	lw	a0,-52(s0)
20401cd8:	3b2d                	jal	20401a12 <__metal_driver_sifive_clint0_interrupt_parents>
20401cda:	fea42423          	sw	a0,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
20401cde:	fdc42703          	lw	a4,-36(s0)
20401ce2:	fe842783          	lw	a5,-24(s0)
20401ce6:	00f71863          	bne	a4,a5,20401cf6 <__metal_driver_riscv_clint0_register+0x8a>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
20401cea:	fc842703          	lw	a4,-56(s0)
20401cee:	fd442783          	lw	a5,-44(s0)
20401cf2:	02f70063          	beq	a4,a5,20401d12 <__metal_driver_riscv_clint0_register+0xa6>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
20401cf6:	fe042423          	sw	zero,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
20401cfa:	fe442783          	lw	a5,-28(s0)
20401cfe:	0785                	addi	a5,a5,1
20401d00:	fef42223          	sw	a5,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
20401d04:	fe442703          	lw	a4,-28(s0)
20401d08:	fd842783          	lw	a5,-40(s0)
20401d0c:	faf74be3          	blt	a4,a5,20401cc2 <__metal_driver_riscv_clint0_register+0x56>
20401d10:	a011                	j	20401d14 <__metal_driver_riscv_clint0_register+0xa8>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
20401d12:	0001                	nop
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
20401d14:	fe842783          	lw	a5,-24(s0)
20401d18:	c385                	beqz	a5,20401d38 <__metal_driver_riscv_clint0_register+0xcc>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
20401d1a:	fe842783          	lw	a5,-24(s0)
20401d1e:	439c                	lw	a5,0(a5)
20401d20:	4fdc                	lw	a5,28(a5)
20401d22:	fc042683          	lw	a3,-64(s0)
20401d26:	fc442603          	lw	a2,-60(s0)
20401d2a:	fc842583          	lw	a1,-56(s0)
20401d2e:	fe842503          	lw	a0,-24(s0)
20401d32:	9782                	jalr	a5
20401d34:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
20401d38:	fec42783          	lw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:102
}
20401d3c:	853e                	mv	a0,a5
20401d3e:	50f2                	lw	ra,60(sp)
20401d40:	5462                	lw	s0,56(sp)
20401d42:	6121                	addi	sp,sp,64
20401d44:	8082                	ret

20401d46 <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
20401d46:	7179                	addi	sp,sp,-48
20401d48:	d622                	sw	s0,44(sp)
20401d4a:	1800                	addi	s0,sp,48
20401d4c:	fca42e23          	sw	a0,-36(s0)
20401d50:	fcb42c23          	sw	a1,-40(s0)
20401d54:	fcc42a23          	sw	a2,-44(s0)
20401d58:	fcd42823          	sw	a3,-48(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
20401d5c:	57fd                	li	a5,-1
20401d5e:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
20401d62:	fec42783          	lw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:111
}
20401d66:	853e                	mv	a0,a5
20401d68:	5432                	lw	s0,44(sp)
20401d6a:	6145                	addi	sp,sp,48
20401d6c:	8082                	ret

20401d6e <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
20401d6e:	1101                	addi	sp,sp,-32
20401d70:	ce06                	sw	ra,28(sp)
20401d72:	cc22                	sw	s0,24(sp)
20401d74:	1000                	addi	s0,sp,32
20401d76:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
20401d7a:	298010ef          	jal	ra,20403012 <__metal_controller_interrupt_vector_mode>
20401d7e:	87aa                	mv	a5,a0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:116
}
20401d80:	853e                	mv	a0,a5
20401d82:	40f2                	lw	ra,28(sp)
20401d84:	4462                	lw	s0,24(sp)
20401d86:	6105                	addi	sp,sp,32
20401d88:	8082                	ret

20401d8a <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
20401d8a:	7179                	addi	sp,sp,-48
20401d8c:	d606                	sw	ra,44(sp)
20401d8e:	d422                	sw	s0,40(sp)
20401d90:	1800                	addi	s0,sp,48
20401d92:	fca42e23          	sw	a0,-36(s0)
20401d96:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
20401d9a:	57fd                	li	a5,-1
20401d9c:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
20401da0:	3539                	jal	20401bae <_get_cpu_intc>
20401da2:	fea42423          	sw	a0,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
20401da6:	fe842783          	lw	a5,-24(s0)
20401daa:	c395                	beqz	a5,20401dce <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
20401dac:	fd842703          	lw	a4,-40(s0)
20401db0:	4785                	li	a5,1
20401db2:	00e7ef63          	bltu	a5,a4,20401dd0 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
20401db6:	fe842783          	lw	a5,-24(s0)
20401dba:	439c                	lw	a5,0(a5)
20401dbc:	43dc                	lw	a5,4(a5)
20401dbe:	fd842583          	lw	a1,-40(s0)
20401dc2:	fe842503          	lw	a0,-24(s0)
20401dc6:	9782                	jalr	a5
20401dc8:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
20401dcc:	a011                	j	20401dd0 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
20401dce:	0001                	nop
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
20401dd0:	fec42783          	lw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:133
}
20401dd4:	853e                	mv	a0,a5
20401dd6:	50b2                	lw	ra,44(sp)
20401dd8:	5422                	lw	s0,40(sp)
20401dda:	6145                	addi	sp,sp,48
20401ddc:	8082                	ret

20401dde <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
20401dde:	7139                	addi	sp,sp,-64
20401de0:	de06                	sw	ra,60(sp)
20401de2:	dc22                	sw	s0,56(sp)
20401de4:	0080                	addi	s0,sp,64
20401de6:	fca42623          	sw	a0,-52(s0)
20401dea:	fcb42423          	sw	a1,-56(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
20401dee:	57fd                	li	a5,-1
20401df0:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
20401df4:	fc842783          	lw	a5,-56(s0)
20401df8:	c7c9                	beqz	a5,20401e82 <__metal_driver_riscv_clint0_enable+0xa4>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
20401dfa:	fe042423          	sw	zero,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20401dfe:	3b45                	jal	20401bae <_get_cpu_intc>
20401e00:	fea42023          	sw	a0,-32(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20401e04:	fcc42503          	lw	a0,-52(s0)
20401e08:	36dd                	jal	204019ee <__metal_driver_sifive_clint0_num_interrupts>
20401e0a:	fca42e23          	sw	a0,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
20401e0e:	fe042223          	sw	zero,-28(s0)
20401e12:	a091                	j	20401e56 <__metal_driver_riscv_clint0_enable+0x78>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20401e14:	fe442583          	lw	a1,-28(s0)
20401e18:	fcc42503          	lw	a0,-52(s0)
20401e1c:	390d                	jal	20401a4e <__metal_driver_sifive_clint0_interrupt_lines>
20401e1e:	fca42c23          	sw	a0,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20401e22:	fe442583          	lw	a1,-28(s0)
20401e26:	fcc42503          	lw	a0,-52(s0)
20401e2a:	36e5                	jal	20401a12 <__metal_driver_sifive_clint0_interrupt_parents>
20401e2c:	fea42423          	sw	a0,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
20401e30:	fe042703          	lw	a4,-32(s0)
20401e34:	fe842783          	lw	a5,-24(s0)
20401e38:	00f71863          	bne	a4,a5,20401e48 <__metal_driver_riscv_clint0_enable+0x6a>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
20401e3c:	fc842703          	lw	a4,-56(s0)
20401e40:	fd842783          	lw	a5,-40(s0)
20401e44:	02f70063          	beq	a4,a5,20401e64 <__metal_driver_riscv_clint0_enable+0x86>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
20401e48:	fe042423          	sw	zero,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20401e4c:	fe442783          	lw	a5,-28(s0)
20401e50:	0785                	addi	a5,a5,1
20401e52:	fef42223          	sw	a5,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
20401e56:	fe442703          	lw	a4,-28(s0)
20401e5a:	fdc42783          	lw	a5,-36(s0)
20401e5e:	faf74be3          	blt	a4,a5,20401e14 <__metal_driver_riscv_clint0_enable+0x36>
20401e62:	a011                	j	20401e66 <__metal_driver_riscv_clint0_enable+0x88>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
20401e64:	0001                	nop
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
20401e66:	fe842783          	lw	a5,-24(s0)
20401e6a:	cf81                	beqz	a5,20401e82 <__metal_driver_riscv_clint0_enable+0xa4>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
20401e6c:	fe842783          	lw	a5,-24(s0)
20401e70:	439c                	lw	a5,0(a5)
20401e72:	53dc                	lw	a5,36(a5)
20401e74:	fc842583          	lw	a1,-56(s0)
20401e78:	fe842503          	lw	a0,-24(s0)
20401e7c:	9782                	jalr	a5
20401e7e:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
20401e82:	fec42783          	lw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:160
}
20401e86:	853e                	mv	a0,a5
20401e88:	50f2                	lw	ra,60(sp)
20401e8a:	5462                	lw	s0,56(sp)
20401e8c:	6121                	addi	sp,sp,64
20401e8e:	8082                	ret

20401e90 <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
20401e90:	7139                	addi	sp,sp,-64
20401e92:	de06                	sw	ra,60(sp)
20401e94:	dc22                	sw	s0,56(sp)
20401e96:	0080                	addi	s0,sp,64
20401e98:	fca42623          	sw	a0,-52(s0)
20401e9c:	fcb42423          	sw	a1,-56(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
20401ea0:	57fd                	li	a5,-1
20401ea2:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
20401ea6:	fc842783          	lw	a5,-56(s0)
20401eaa:	c7c9                	beqz	a5,20401f34 <__metal_driver_riscv_clint0_disable+0xa4>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
20401eac:	fe042423          	sw	zero,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20401eb0:	39fd                	jal	20401bae <_get_cpu_intc>
20401eb2:	fea42023          	sw	a0,-32(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20401eb6:	fcc42503          	lw	a0,-52(s0)
20401eba:	3e15                	jal	204019ee <__metal_driver_sifive_clint0_num_interrupts>
20401ebc:	fca42e23          	sw	a0,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
20401ec0:	fe042223          	sw	zero,-28(s0)
20401ec4:	a091                	j	20401f08 <__metal_driver_riscv_clint0_disable+0x78>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20401ec6:	fe442583          	lw	a1,-28(s0)
20401eca:	fcc42503          	lw	a0,-52(s0)
20401ece:	3641                	jal	20401a4e <__metal_driver_sifive_clint0_interrupt_lines>
20401ed0:	fca42c23          	sw	a0,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20401ed4:	fe442583          	lw	a1,-28(s0)
20401ed8:	fcc42503          	lw	a0,-52(s0)
20401edc:	3e1d                	jal	20401a12 <__metal_driver_sifive_clint0_interrupt_parents>
20401ede:	fea42423          	sw	a0,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
20401ee2:	fe042703          	lw	a4,-32(s0)
20401ee6:	fe842783          	lw	a5,-24(s0)
20401eea:	00f71863          	bne	a4,a5,20401efa <__metal_driver_riscv_clint0_disable+0x6a>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
20401eee:	fc842703          	lw	a4,-56(s0)
20401ef2:	fd842783          	lw	a5,-40(s0)
20401ef6:	02f70063          	beq	a4,a5,20401f16 <__metal_driver_riscv_clint0_disable+0x86>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
20401efa:	fe042423          	sw	zero,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20401efe:	fe442783          	lw	a5,-28(s0)
20401f02:	0785                	addi	a5,a5,1
20401f04:	fef42223          	sw	a5,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
20401f08:	fe442703          	lw	a4,-28(s0)
20401f0c:	fdc42783          	lw	a5,-36(s0)
20401f10:	faf74be3          	blt	a4,a5,20401ec6 <__metal_driver_riscv_clint0_disable+0x36>
20401f14:	a011                	j	20401f18 <__metal_driver_riscv_clint0_disable+0x88>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
20401f16:	0001                	nop
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
20401f18:	fe842783          	lw	a5,-24(s0)
20401f1c:	cf81                	beqz	a5,20401f34 <__metal_driver_riscv_clint0_disable+0xa4>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
20401f1e:	fe842783          	lw	a5,-24(s0)
20401f22:	439c                	lw	a5,0(a5)
20401f24:	579c                	lw	a5,40(a5)
20401f26:	fc842583          	lw	a1,-56(s0)
20401f2a:	fe842503          	lw	a0,-24(s0)
20401f2e:	9782                	jalr	a5
20401f30:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
20401f34:	fec42783          	lw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:187
}
20401f38:	853e                	mv	a0,a5
20401f3a:	50f2                	lw	ra,60(sp)
20401f3c:	5462                	lw	s0,56(sp)
20401f3e:	6121                	addi	sp,sp,64
20401f40:	8082                	ret

20401f42 <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
20401f42:	7179                	addi	sp,sp,-48
20401f44:	d606                	sw	ra,44(sp)
20401f46:	d422                	sw	s0,40(sp)
20401f48:	1800                	addi	s0,sp,48
20401f4a:	fca42e23          	sw	a0,-36(s0)
20401f4e:	fcb42c23          	sw	a1,-40(s0)
20401f52:	fcc42a23          	sw	a2,-44(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
20401f56:	57fd                	li	a5,-1
20401f58:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
20401f5c:	fdc42783          	lw	a5,-36(s0)
20401f60:	fef42423          	sw	a5,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
20401f64:	fdc42503          	lw	a0,-36(s0)
20401f68:	a61ff0ef          	jal	ra,204019c8 <__metal_driver_sifive_clint0_control_base>
20401f6c:	fea42223          	sw	a0,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
20401f70:	fd842703          	lw	a4,-40(s0)
20401f74:	4789                	li	a5,2
20401f76:	04f70863          	beq	a4,a5,20401fc6 <__metal_driver_riscv_clint0_command_request+0x84>
20401f7a:	fd842703          	lw	a4,-40(s0)
20401f7e:	4789                	li	a5,2
20401f80:	00e7c863          	blt	a5,a4,20401f90 <__metal_driver_riscv_clint0_command_request+0x4e>
20401f84:	fd842703          	lw	a4,-40(s0)
20401f88:	4785                	li	a5,1
20401f8a:	00f70e63          	beq	a4,a5,20401fa6 <__metal_driver_riscv_clint0_command_request+0x64>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
20401f8e:	a8e9                	j	20402068 <__metal_driver_riscv_clint0_command_request+0x126>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
20401f90:	fd842703          	lw	a4,-40(s0)
20401f94:	478d                	li	a5,3
20401f96:	04f70c63          	beq	a4,a5,20401fee <__metal_driver_riscv_clint0_command_request+0xac>
20401f9a:	fd842703          	lw	a4,-40(s0)
20401f9e:	4791                	li	a5,4
20401fa0:	08f70863          	beq	a4,a5,20402030 <__metal_driver_riscv_clint0_command_request+0xee>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
20401fa4:	a0d1                	j	20402068 <__metal_driver_riscv_clint0_command_request+0x126>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
20401fa6:	fd442783          	lw	a5,-44(s0)
20401faa:	cbc5                	beqz	a5,2040205a <__metal_driver_riscv_clint0_command_request+0x118>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
20401fac:	fe842503          	lw	a0,-24(s0)
20401fb0:	34f9                	jal	20401a7e <__metal_clint0_mtime_get>
20401fb2:	87aa                	mv	a5,a0
20401fb4:	882e                	mv	a6,a1
20401fb6:	fd442703          	lw	a4,-44(s0)
20401fba:	c31c                	sw	a5,0(a4)
20401fbc:	01072223          	sw	a6,4(a4)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
20401fc0:	fe042623          	sw	zero,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20401fc4:	a859                	j	2040205a <__metal_driver_riscv_clint0_command_request+0x118>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
20401fc6:	fd442783          	lw	a5,-44(s0)
20401fca:	cbd1                	beqz	a5,2040205e <__metal_driver_riscv_clint0_command_request+0x11c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
20401fcc:	fd442783          	lw	a5,-44(s0)
20401fd0:	439c                	lw	a5,0(a5)
20401fd2:	fef42023          	sw	a5,-32(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20401fd6:	fe042783          	lw	a5,-32(s0)
20401fda:	078a                	slli	a5,a5,0x2
20401fdc:	873e                	mv	a4,a5
20401fde:	fe442783          	lw	a5,-28(s0)
20401fe2:	97ba                	add	a5,a5,a4
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
20401fe4:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
20401fe8:	fe042623          	sw	zero,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20401fec:	a88d                	j	2040205e <__metal_driver_riscv_clint0_command_request+0x11c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
20401fee:	fd442783          	lw	a5,-44(s0)
20401ff2:	cba5                	beqz	a5,20402062 <__metal_driver_riscv_clint0_command_request+0x120>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
20401ff4:	fd442783          	lw	a5,-44(s0)
20401ff8:	439c                	lw	a5,0(a5)
20401ffa:	fef42023          	sw	a5,-32(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20401ffe:	fe042783          	lw	a5,-32(s0)
20402002:	078a                	slli	a5,a5,0x2
20402004:	873e                	mv	a4,a5
20402006:	fe442783          	lw	a5,-28(s0)
2040200a:	97ba                	add	a5,a5,a4
2040200c:	873e                	mv	a4,a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
2040200e:	4785                	li	a5,1
20402010:	c31c                	sw	a5,0(a4)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
20402012:	0480000f          	fence	o,i
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402016:	fe042783          	lw	a5,-32(s0)
2040201a:	078a                	slli	a5,a5,0x2
2040201c:	873e                	mv	a4,a5
2040201e:	fe442783          	lw	a5,-28(s0)
20402022:	97ba                	add	a5,a5,a4
20402024:	439c                	lw	a5,0(a5)
20402026:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
2040202a:	fe042623          	sw	zero,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
2040202e:	a815                	j	20402062 <__metal_driver_riscv_clint0_command_request+0x120>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
20402030:	fe042623          	sw	zero,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
20402034:	fd442783          	lw	a5,-44(s0)
20402038:	c79d                	beqz	a5,20402066 <__metal_driver_riscv_clint0_command_request+0x124>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
2040203a:	fd442783          	lw	a5,-44(s0)
2040203e:	439c                	lw	a5,0(a5)
20402040:	fef42023          	sw	a5,-32(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402044:	fe042783          	lw	a5,-32(s0)
20402048:	078a                	slli	a5,a5,0x2
2040204a:	873e                	mv	a4,a5
2040204c:	fe442783          	lw	a5,-28(s0)
20402050:	97ba                	add	a5,a5,a4
20402052:	439c                	lw	a5,0(a5)
20402054:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20402058:	a039                	j	20402066 <__metal_driver_riscv_clint0_command_request+0x124>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
2040205a:	0001                	nop
2040205c:	a031                	j	20402068 <__metal_driver_riscv_clint0_command_request+0x126>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
2040205e:	0001                	nop
20402060:	a021                	j	20402068 <__metal_driver_riscv_clint0_command_request+0x126>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20402062:	0001                	nop
20402064:	a011                	j	20402068 <__metal_driver_riscv_clint0_command_request+0x126>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20402066:	0001                	nop
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
20402068:	fec42783          	lw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:246
}
2040206c:	853e                	mv	a0,a5
2040206e:	50b2                	lw	ra,44(sp)
20402070:	5422                	lw	s0,40(sp)
20402072:	6145                	addi	sp,sp,48
20402074:	8082                	ret

20402076 <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
20402076:	7179                	addi	sp,sp,-48
20402078:	d606                	sw	ra,44(sp)
2040207a:	d422                	sw	s0,40(sp)
2040207c:	1800                	addi	s0,sp,48
2040207e:	fca42e23          	sw	a0,-36(s0)
20402082:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
20402086:	7a4030ef          	jal	ra,2040582a <metal_cpu_get_current_hartid>
2040208a:	87aa                	mv	a5,a0
2040208c:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
20402090:	fec40793          	addi	a5,s0,-20
20402094:	863e                	mv	a2,a5
20402096:	4589                	li	a1,2
20402098:	fdc42503          	lw	a0,-36(s0)
2040209c:	355d                	jal	20401f42 <__metal_driver_riscv_clint0_command_request>
2040209e:	87aa                	mv	a5,a0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
204020a0:	853e                	mv	a0,a5
204020a2:	50b2                	lw	ra,44(sp)
204020a4:	5422                	lw	s0,40(sp)
204020a6:	6145                	addi	sp,sp,48
204020a8:	8082                	ret

204020aa <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
204020aa:	7179                	addi	sp,sp,-48
204020ac:	d606                	sw	ra,44(sp)
204020ae:	d422                	sw	s0,40(sp)
204020b0:	1800                	addi	s0,sp,48
204020b2:	fca42e23          	sw	a0,-36(s0)
204020b6:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
204020ba:	770030ef          	jal	ra,2040582a <metal_cpu_get_current_hartid>
204020be:	87aa                	mv	a5,a0
204020c0:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
204020c4:	fec40793          	addi	a5,s0,-20
204020c8:	863e                	mv	a2,a5
204020ca:	458d                	li	a1,3
204020cc:	fdc42503          	lw	a0,-36(s0)
204020d0:	3d8d                	jal	20401f42 <__metal_driver_riscv_clint0_command_request>
204020d2:	87aa                	mv	a5,a0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
204020d4:	853e                	mv	a0,a5
204020d6:	50b2                	lw	ra,44(sp)
204020d8:	5422                	lw	s0,40(sp)
204020da:	6145                	addi	sp,sp,48
204020dc:	8082                	ret

204020de <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:247



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
204020de:	1101                	addi	sp,sp,-32
204020e0:	ce22                	sw	s0,28(sp)
204020e2:	1000                	addi	s0,sp,32
204020e4:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:248
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
204020e8:	fec42703          	lw	a4,-20(s0)
204020ec:	81818793          	addi	a5,gp,-2024 # 800007a0 <__metal_dt_cpu_0>
204020f0:	00f71463          	bne	a4,a5,204020f8 <__metal_driver_cpu_hartid+0x1a>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:249
		return 0;
204020f4:	4781                	li	a5,0
204020f6:	a011                	j	204020fa <__metal_driver_cpu_hartid+0x1c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:252
	}
	else {
		return -1;
204020f8:	57fd                	li	a5,-1
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:254
	}
}
204020fa:	853e                	mv	a0,a5
204020fc:	4472                	lw	s0,28(sp)
204020fe:	6105                	addi	sp,sp,32
20402100:	8082                	ret

20402102 <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:257

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
20402102:	1101                	addi	sp,sp,-32
20402104:	ce22                	sw	s0,28(sp)
20402106:	1000                	addi	s0,sp,32
20402108:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:258
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
2040210c:	fec42703          	lw	a4,-20(s0)
20402110:	81818793          	addi	a5,gp,-2024 # 800007a0 <__metal_dt_cpu_0>
20402114:	00f71763          	bne	a4,a5,20402122 <__metal_driver_cpu_timebase+0x20>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:259
		return 1000000;
20402118:	000f47b7          	lui	a5,0xf4
2040211c:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3a40>
20402120:	a011                	j	20402124 <__metal_driver_cpu_timebase+0x22>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:262
	}
	else {
		return 0;
20402122:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:264
	}
}
20402124:	853e                	mv	a0,a5
20402126:	4472                	lw	s0,28(sp)
20402128:	6105                	addi	sp,sp,32
2040212a:	8082                	ret

2040212c <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:267

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
2040212c:	1101                	addi	sp,sp,-32
2040212e:	ce22                	sw	s0,28(sp)
20402130:	1000                	addi	s0,sp,32
20402132:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:268
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402136:	fec42703          	lw	a4,-20(s0)
2040213a:	81818793          	addi	a5,gp,-2024 # 800007a0 <__metal_dt_cpu_0>
2040213e:	00f71763          	bne	a4,a5,2040214c <__metal_driver_cpu_interrupt_controller+0x20>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:269
		return &__metal_dt_cpu_0_interrupt_controller.controller;
20402142:	800007b7          	lui	a5,0x80000
20402146:	08878793          	addi	a5,a5,136 # 80000088 <metal_segment_heap_target_end+0xffffec14>
2040214a:	a011                	j	2040214e <__metal_driver_cpu_interrupt_controller+0x22>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:272
	}
	else {
		return NULL;
2040214c:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:274
	}
}
2040214e:	853e                	mv	a0,a5
20402150:	4472                	lw	s0,28(sp)
20402152:	6105                	addi	sp,sp,32
20402154:	8082                	ret

20402156 <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
20402156:	1101                	addi	sp,sp,-32
20402158:	ce22                	sw	s0,28(sp)
2040215a:	1000                	addi	s0,sp,32
2040215c:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
20402160:	fec42783          	lw	a5,-20(s0)
20402164:	00f04a63          	bgtz	a5,20402178 <__metal_driver_cpu_get+0x22>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
20402168:	fec42703          	lw	a4,-20(s0)
2040216c:	070a                	slli	a4,a4,0x2
2040216e:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
20402172:	97ba                	add	a5,a5,a4
20402174:	439c                	lw	a5,0(a5)
20402176:	a011                	j	2040217a <__metal_driver_cpu_get+0x24>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
20402178:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:19
}
2040217a:	853e                	mv	a0,a5
2040217c:	4472                	lw	s0,28(sp)
2040217e:	6105                	addi	sp,sp,32
20402180:	8082                	ret

20402182 <__metal_myhart_id>:
__metal_myhart_id():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
20402182:	1101                	addi	sp,sp,-32
20402184:	ce22                	sw	s0,28(sp)
20402186:	1000                	addi	s0,sp,32
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
20402188:	f14027f3          	csrr	a5,mhartid
2040218c:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
20402190:	fec42783          	lw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:26
}
20402194:	853e                	mv	a0,a5
20402196:	4472                	lw	s0,28(sp)
20402198:	6105                	addi	sp,sp,32
2040219a:	8082                	ret

2040219c <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
2040219c:	1101                	addi	sp,sp,-32
2040219e:	ce22                	sw	s0,28(sp)
204021a0:	1000                	addi	s0,sp,32
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
204021a2:	47a1                	li	a5,8
204021a4:	3007a7f3          	csrrs	a5,mstatus,a5
204021a8:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:39
}
204021ac:	0001                	nop
204021ae:	4472                	lw	s0,28(sp)
204021b0:	6105                	addi	sp,sp,32
204021b2:	8082                	ret

204021b4 <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
204021b4:	1101                	addi	sp,sp,-32
204021b6:	ce22                	sw	s0,28(sp)
204021b8:	1000                	addi	s0,sp,32
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
204021ba:	47a1                	li	a5,8
204021bc:	3007b7f3          	csrrc	a5,mstatus,a5
204021c0:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:44
}
204021c4:	0001                	nop
204021c6:	4472                	lw	s0,28(sp)
204021c8:	6105                	addi	sp,sp,32
204021ca:	8082                	ret

204021cc <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
204021cc:	1101                	addi	sp,sp,-32
204021ce:	ce22                	sw	s0,28(sp)
204021d0:	1000                	addi	s0,sp,32
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
204021d2:	47a1                	li	a5,8
204021d4:	3047a7f3          	csrrs	a5,mie,a5
204021d8:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:49
}
204021dc:	0001                	nop
204021de:	4472                	lw	s0,28(sp)
204021e0:	6105                	addi	sp,sp,32
204021e2:	8082                	ret

204021e4 <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
204021e4:	1101                	addi	sp,sp,-32
204021e6:	ce22                	sw	s0,28(sp)
204021e8:	1000                	addi	s0,sp,32
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
204021ea:	47a1                	li	a5,8
204021ec:	3047b7f3          	csrrc	a5,mie,a5
204021f0:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:54
}
204021f4:	0001                	nop
204021f6:	4472                	lw	s0,28(sp)
204021f8:	6105                	addi	sp,sp,32
204021fa:	8082                	ret

204021fc <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
204021fc:	1101                	addi	sp,sp,-32
204021fe:	ce22                	sw	s0,28(sp)
20402200:	1000                	addi	s0,sp,32
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20402202:	08000793          	li	a5,128
20402206:	3047a7f3          	csrrs	a5,mie,a5
2040220a:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:59
}
2040220e:	0001                	nop
20402210:	4472                	lw	s0,28(sp)
20402212:	6105                	addi	sp,sp,32
20402214:	8082                	ret

20402216 <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
20402216:	1101                	addi	sp,sp,-32
20402218:	ce22                	sw	s0,28(sp)
2040221a:	1000                	addi	s0,sp,32
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
2040221c:	08000793          	li	a5,128
20402220:	3047b7f3          	csrrc	a5,mie,a5
20402224:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:64
}
20402228:	0001                	nop
2040222a:	4472                	lw	s0,28(sp)
2040222c:	6105                	addi	sp,sp,32
2040222e:	8082                	ret

20402230 <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
20402230:	1101                	addi	sp,sp,-32
20402232:	ce22                	sw	s0,28(sp)
20402234:	1000                	addi	s0,sp,32
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20402236:	6785                	lui	a5,0x1
20402238:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
2040223c:	3047a7f3          	csrrs	a5,mie,a5
20402240:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:69
}
20402244:	0001                	nop
20402246:	4472                	lw	s0,28(sp)
20402248:	6105                	addi	sp,sp,32
2040224a:	8082                	ret

2040224c <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
2040224c:	1101                	addi	sp,sp,-32
2040224e:	ce22                	sw	s0,28(sp)
20402250:	1000                	addi	s0,sp,32
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20402252:	6785                	lui	a5,0x1
20402254:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20402258:	3047b7f3          	csrrc	a5,mie,a5
2040225c:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:74
}
20402260:	0001                	nop
20402262:	4472                	lw	s0,28(sp)
20402264:	6105                	addi	sp,sp,32
20402266:	8082                	ret

20402268 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
20402268:	7179                	addi	sp,sp,-48
2040226a:	d622                	sw	s0,44(sp)
2040226c:	1800                	addi	s0,sp,48
2040226e:	fca42e23          	sw	a0,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
20402272:	fdc42783          	lw	a5,-36(s0)
20402276:	4705                	li	a4,1
20402278:	00f717b3          	sll	a5,a4,a5
2040227c:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
20402280:	fec42783          	lw	a5,-20(s0)
20402284:	3047a7f3          	csrrs	a5,mie,a5
20402288:	fef42423          	sw	a5,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:80
}
2040228c:	0001                	nop
2040228e:	5432                	lw	s0,44(sp)
20402290:	6145                	addi	sp,sp,48
20402292:	8082                	ret

20402294 <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
20402294:	7179                	addi	sp,sp,-48
20402296:	d622                	sw	s0,44(sp)
20402298:	1800                	addi	s0,sp,48
2040229a:	fca42e23          	sw	a0,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
2040229e:	fdc42783          	lw	a5,-36(s0)
204022a2:	4705                	li	a4,1
204022a4:	00f717b3          	sll	a5,a4,a5
204022a8:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
204022ac:	fec42783          	lw	a5,-20(s0)
204022b0:	3047b7f3          	csrrc	a5,mie,a5
204022b4:	fef42423          	sw	a5,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:86
}
204022b8:	0001                	nop
204022ba:	5432                	lw	s0,44(sp)
204022bc:	6145                	addi	sp,sp,48
204022be:	8082                	ret

204022c0 <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
204022c0:	1101                	addi	sp,sp,-32
204022c2:	ce06                	sw	ra,28(sp)
204022c4:	cc22                	sw	s0,24(sp)
204022c6:	1000                	addi	s0,sp,32
204022c8:	fea42623          	sw	a0,-20(s0)
204022cc:	feb42423          	sw	a1,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
204022d0:	06400513          	li	a0,100
204022d4:	592030ef          	jal	ra,20405866 <metal_shutdown>

204022d8 <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
204022d8:	1101                	addi	sp,sp,-32
204022da:	ce06                	sw	ra,28(sp)
204022dc:	cc22                	sw	s0,24(sp)
204022de:	1000                	addi	s0,sp,32
204022e0:	fea42623          	sw	a0,-20(s0)
204022e4:	feb42423          	sw	a1,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
204022e8:	0c800513          	li	a0,200
204022ec:	57a030ef          	jal	ra,20405866 <metal_shutdown>

204022f0 <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
204022f0:	715d                	addi	sp,sp,-80
204022f2:	c686                	sw	ra,76(sp)
204022f4:	c496                	sw	t0,72(sp)
204022f6:	c29a                	sw	t1,68(sp)
204022f8:	c09e                	sw	t2,64(sp)
204022fa:	de22                	sw	s0,60(sp)
204022fc:	dc2a                	sw	a0,56(sp)
204022fe:	da2e                	sw	a1,52(sp)
20402300:	d832                	sw	a2,48(sp)
20402302:	d636                	sw	a3,44(sp)
20402304:	d43a                	sw	a4,40(sp)
20402306:	d23e                	sw	a5,36(sp)
20402308:	d042                	sw	a6,32(sp)
2040230a:	ce46                	sw	a7,28(sp)
2040230c:	cc72                	sw	t3,24(sp)
2040230e:	ca76                	sw	t4,20(sp)
20402310:	c87a                	sw	t5,16(sp)
20402312:	c67e                	sw	t6,12(sp)
20402314:	0880                	addi	s0,sp,80
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
20402316:	12c00513          	li	a0,300
2040231a:	54c030ef          	jal	ra,20405866 <metal_shutdown>

2040231e <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
2040231e:	711d                	addi	sp,sp,-96
20402320:	ce86                	sw	ra,92(sp)
20402322:	cc96                	sw	t0,88(sp)
20402324:	ca9a                	sw	t1,84(sp)
20402326:	c89e                	sw	t2,80(sp)
20402328:	c6a2                	sw	s0,76(sp)
2040232a:	c4aa                	sw	a0,72(sp)
2040232c:	c2ae                	sw	a1,68(sp)
2040232e:	c0b2                	sw	a2,64(sp)
20402330:	de36                	sw	a3,60(sp)
20402332:	dc3a                	sw	a4,56(sp)
20402334:	da3e                	sw	a5,52(sp)
20402336:	d842                	sw	a6,48(sp)
20402338:	d646                	sw	a7,44(sp)
2040233a:	d472                	sw	t3,40(sp)
2040233c:	d276                	sw	t4,36(sp)
2040233e:	d07a                	sw	t5,32(sp)
20402340:	ce7e                	sw	t6,28(sp)
20402342:	1080                	addi	s0,sp,96
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402344:	3d3d                	jal	20402182 <__metal_myhart_id>
20402346:	872a                	mv	a4,a0
20402348:	070a                	slli	a4,a4,0x2
2040234a:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
2040234e:	97ba                	add	a5,a5,a4
20402350:	439c                	lw	a5,0(a5)
20402352:	faf42623          	sw	a5,-84(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
20402356:	fac42783          	lw	a5,-84(s0)
2040235a:	c785                	beqz	a5,20402382 <metal_software_interrupt_vector_handler+0x64>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040235c:	fac42503          	lw	a0,-84(s0)
20402360:	33f1                	jal	2040212c <__metal_driver_cpu_interrupt_controller>
20402362:	faa42423          	sw	a0,-88(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
20402366:	fa842783          	lw	a5,-88(s0)
2040236a:	0e07a783          	lw	a5,224(a5)
2040236e:	faf42223          	sw	a5,-92(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
20402372:	fa842783          	lw	a5,-88(s0)
20402376:	0d87a783          	lw	a5,216(a5)
2040237a:	fa442583          	lw	a1,-92(s0)
2040237e:	450d                	li	a0,3
20402380:	9782                	jalr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
20402382:	0001                	nop
20402384:	40f6                	lw	ra,92(sp)
20402386:	42e6                	lw	t0,88(sp)
20402388:	4356                	lw	t1,84(sp)
2040238a:	43c6                	lw	t2,80(sp)
2040238c:	4436                	lw	s0,76(sp)
2040238e:	4526                	lw	a0,72(sp)
20402390:	4596                	lw	a1,68(sp)
20402392:	4606                	lw	a2,64(sp)
20402394:	56f2                	lw	a3,60(sp)
20402396:	5762                	lw	a4,56(sp)
20402398:	57d2                	lw	a5,52(sp)
2040239a:	5842                	lw	a6,48(sp)
2040239c:	58b2                	lw	a7,44(sp)
2040239e:	5e22                	lw	t3,40(sp)
204023a0:	5e92                	lw	t4,36(sp)
204023a2:	5f02                	lw	t5,32(sp)
204023a4:	4ff2                	lw	t6,28(sp)
204023a6:	6125                	addi	sp,sp,96
204023a8:	30200073          	mret

204023ac <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
204023ac:	7179                	addi	sp,sp,-48
204023ae:	d606                	sw	ra,44(sp)
204023b0:	d422                	sw	s0,40(sp)
204023b2:	1800                	addi	s0,sp,48
204023b4:	fca42e23          	sw	a0,-36(s0)
204023b8:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204023bc:	33d9                	jal	20402182 <__metal_myhart_id>
204023be:	872a                	mv	a4,a0
204023c0:	070a                	slli	a4,a4,0x2
204023c2:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
204023c6:	97ba                	add	a5,a5,a4
204023c8:	439c                	lw	a5,0(a5)
204023ca:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
204023ce:	342027f3          	csrr	a5,mcause
204023d2:	fef42423          	sw	a5,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
204023d6:	fec42783          	lw	a5,-20(s0)
204023da:	c795                	beqz	a5,20402406 <__metal_default_sw_handler+0x5a>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204023dc:	fec42503          	lw	a0,-20(s0)
204023e0:	33b1                	jal	2040212c <__metal_driver_cpu_interrupt_controller>
204023e2:	fea42223          	sw	a0,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
204023e6:	fe842783          	lw	a5,-24(s0)
204023ea:	3ff7f793          	andi	a5,a5,1023
204023ee:	fe442703          	lw	a4,-28(s0)
204023f2:	0e078793          	addi	a5,a5,224
204023f6:	078a                	slli	a5,a5,0x2
204023f8:	97ba                	add	a5,a5,a4
204023fa:	479c                	lw	a5,8(a5)
204023fc:	fdc42583          	lw	a1,-36(s0)
20402400:	fec42503          	lw	a0,-20(s0)
20402404:	9782                	jalr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
20402406:	0001                	nop
20402408:	50b2                	lw	ra,44(sp)
2040240a:	5422                	lw	s0,40(sp)
2040240c:	6145                	addi	sp,sp,48
2040240e:	8082                	ret

20402410 <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
20402410:	711d                	addi	sp,sp,-96
20402412:	ce86                	sw	ra,92(sp)
20402414:	cc96                	sw	t0,88(sp)
20402416:	ca9a                	sw	t1,84(sp)
20402418:	c89e                	sw	t2,80(sp)
2040241a:	c6a2                	sw	s0,76(sp)
2040241c:	c4aa                	sw	a0,72(sp)
2040241e:	c2ae                	sw	a1,68(sp)
20402420:	c0b2                	sw	a2,64(sp)
20402422:	de36                	sw	a3,60(sp)
20402424:	dc3a                	sw	a4,56(sp)
20402426:	da3e                	sw	a5,52(sp)
20402428:	d842                	sw	a6,48(sp)
2040242a:	d646                	sw	a7,44(sp)
2040242c:	d472                	sw	t3,40(sp)
2040242e:	d276                	sw	t4,36(sp)
20402430:	d07a                	sw	t5,32(sp)
20402432:	ce7e                	sw	t6,28(sp)
20402434:	1080                	addi	s0,sp,96
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402436:	33b1                	jal	20402182 <__metal_myhart_id>
20402438:	872a                	mv	a4,a0
2040243a:	070a                	slli	a4,a4,0x2
2040243c:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
20402440:	97ba                	add	a5,a5,a4
20402442:	439c                	lw	a5,0(a5)
20402444:	faf42623          	sw	a5,-84(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
20402448:	fac42783          	lw	a5,-84(s0)
2040244c:	c785                	beqz	a5,20402474 <metal_timer_interrupt_vector_handler+0x64>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040244e:	fac42503          	lw	a0,-84(s0)
20402452:	39e9                	jal	2040212c <__metal_driver_cpu_interrupt_controller>
20402454:	faa42423          	sw	a0,-88(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
20402458:	fa842783          	lw	a5,-88(s0)
2040245c:	1407a783          	lw	a5,320(a5)
20402460:	faf42223          	sw	a5,-92(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
20402464:	fa842783          	lw	a5,-88(s0)
20402468:	1387a783          	lw	a5,312(a5)
2040246c:	fa442583          	lw	a1,-92(s0)
20402470:	451d                	li	a0,7
20402472:	9782                	jalr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
20402474:	0001                	nop
20402476:	40f6                	lw	ra,92(sp)
20402478:	42e6                	lw	t0,88(sp)
2040247a:	4356                	lw	t1,84(sp)
2040247c:	43c6                	lw	t2,80(sp)
2040247e:	4436                	lw	s0,76(sp)
20402480:	4526                	lw	a0,72(sp)
20402482:	4596                	lw	a1,68(sp)
20402484:	4606                	lw	a2,64(sp)
20402486:	56f2                	lw	a3,60(sp)
20402488:	5762                	lw	a4,56(sp)
2040248a:	57d2                	lw	a5,52(sp)
2040248c:	5842                	lw	a6,48(sp)
2040248e:	58b2                	lw	a7,44(sp)
20402490:	5e22                	lw	t3,40(sp)
20402492:	5e92                	lw	t4,36(sp)
20402494:	5f02                	lw	t5,32(sp)
20402496:	4ff2                	lw	t6,28(sp)
20402498:	6125                	addi	sp,sp,96
2040249a:	30200073          	mret

2040249e <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
2040249e:	7179                	addi	sp,sp,-48
204024a0:	d606                	sw	ra,44(sp)
204024a2:	d422                	sw	s0,40(sp)
204024a4:	1800                	addi	s0,sp,48
204024a6:	fca42e23          	sw	a0,-36(s0)
204024aa:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
204024ae:	39d1                	jal	20402182 <__metal_myhart_id>
204024b0:	87aa                	mv	a5,a0
204024b2:	853e                	mv	a0,a5
204024b4:	314d                	jal	20402156 <__metal_driver_cpu_get>
204024b6:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
204024ba:	fec42503          	lw	a0,-20(s0)
204024be:	1aa010ef          	jal	ra,20403668 <__metal_driver_cpu_mtime_get>
204024c2:	fea42023          	sw	a0,-32(s0)
204024c6:	feb42223          	sw	a1,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
204024ca:	fe042783          	lw	a5,-32(s0)
204024ce:	fe442803          	lw	a6,-28(s0)
204024d2:	45a9                	li	a1,10
204024d4:	4601                	li	a2,0
204024d6:	00b786b3          	add	a3,a5,a1
204024da:	8536                	mv	a0,a3
204024dc:	00f53533          	sltu	a0,a0,a5
204024e0:	00c80733          	add	a4,a6,a2
204024e4:	00e507b3          	add	a5,a0,a4
204024e8:	873e                	mv	a4,a5
204024ea:	87b6                	mv	a5,a3
204024ec:	883a                	mv	a6,a4
204024ee:	85be                	mv	a1,a5
204024f0:	8642                	mv	a2,a6
204024f2:	fec42503          	lw	a0,-20(s0)
204024f6:	1d8010ef          	jal	ra,204036ce <__metal_driver_cpu_mtimecmp_set>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:148
}
204024fa:	0001                	nop
204024fc:	50b2                	lw	ra,44(sp)
204024fe:	5422                	lw	s0,40(sp)
20402500:	6145                	addi	sp,sp,48
20402502:	8082                	ret
	...

20402580 <__metal_exception_handler>:
__metal_exception_handler():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20402580:	7119                	addi	sp,sp,-128
20402582:	de86                	sw	ra,124(sp)
20402584:	dc96                	sw	t0,120(sp)
20402586:	da9a                	sw	t1,116(sp)
20402588:	d89e                	sw	t2,112(sp)
2040258a:	d6a2                	sw	s0,108(sp)
2040258c:	d4aa                	sw	a0,104(sp)
2040258e:	d2ae                	sw	a1,100(sp)
20402590:	d0b2                	sw	a2,96(sp)
20402592:	ceb6                	sw	a3,92(sp)
20402594:	ccba                	sw	a4,88(sp)
20402596:	cabe                	sw	a5,84(sp)
20402598:	c8c2                	sw	a6,80(sp)
2040259a:	c6c6                	sw	a7,76(sp)
2040259c:	c4f2                	sw	t3,72(sp)
2040259e:	c2f6                	sw	t4,68(sp)
204025a0:	c0fa                	sw	t5,64(sp)
204025a2:	de7e                	sw	t6,60(sp)
204025a4:	0100                	addi	s0,sp,128
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204025a6:	3ef1                	jal	20402182 <__metal_myhart_id>
204025a8:	872a                	mv	a4,a0
204025aa:	070a                	slli	a4,a4,0x2
204025ac:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
204025b0:	97ba                	add	a5,a5,a4
204025b2:	439c                	lw	a5,0(a5)
204025b4:	faf42623          	sw	a5,-84(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
204025b8:	342027f3          	csrr	a5,mcause
204025bc:	faf42423          	sw	a5,-88(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
204025c0:	341027f3          	csrr	a5,mepc
204025c4:	faf42223          	sw	a5,-92(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
204025c8:	343027f3          	csrr	a5,mtval
204025cc:	faf42023          	sw	a5,-96(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
204025d0:	305027f3          	csrr	a5,mtvec
204025d4:	f8f42e23          	sw	a5,-100(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
204025d8:	fac42783          	lw	a5,-84(s0)
204025dc:	c7e1                	beqz	a5,204026a4 <__metal_exception_handler+0x124>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204025de:	fac42503          	lw	a0,-84(s0)
204025e2:	36a9                	jal	2040212c <__metal_driver_cpu_interrupt_controller>
204025e4:	f8a42c23          	sw	a0,-104(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
204025e8:	fa842783          	lw	a5,-88(s0)
204025ec:	3ff7f793          	andi	a5,a5,1023
204025f0:	f8f42a23          	sw	a5,-108(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
204025f4:	fa842783          	lw	a5,-88(s0)
204025f8:	0807d863          	bgez	a5,20402688 <__metal_exception_handler+0x108>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
204025fc:	f9442703          	lw	a4,-108(s0)
20402600:	47ad                	li	a5,11
20402602:	00e7d763          	bge	a5,a4,20402610 <__metal_exception_handler+0x90>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
20402606:	f9c42783          	lw	a5,-100(s0)
2040260a:	03f7f793          	andi	a5,a5,63
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
2040260e:	ef9d                	bnez	a5,2040264c <__metal_exception_handler+0xcc>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
20402610:	f9842683          	lw	a3,-104(s0)
20402614:	f9442703          	lw	a4,-108(s0)
20402618:	87ba                	mv	a5,a4
2040261a:	0786                	slli	a5,a5,0x1
2040261c:	97ba                	add	a5,a5,a4
2040261e:	078e                	slli	a5,a5,0x3
20402620:	97b6                	add	a5,a5,a3
20402622:	0987a783          	lw	a5,152(a5)
20402626:	f8f42623          	sw	a5,-116(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
2040262a:	f9842683          	lw	a3,-104(s0)
2040262e:	f9442703          	lw	a4,-108(s0)
20402632:	87ba                	mv	a5,a4
20402634:	0786                	slli	a5,a5,0x1
20402636:	97ba                	add	a5,a5,a4
20402638:	078e                	slli	a5,a5,0x3
2040263a:	97b6                	add	a5,a5,a3
2040263c:	0907a783          	lw	a5,144(a5)
20402640:	f8c42583          	lw	a1,-116(s0)
20402644:	f9442503          	lw	a0,-108(s0)
20402648:	9782                	jalr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
2040264a:	a8a9                	j	204026a4 <__metal_exception_handler+0x124>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
2040264c:	f9c42783          	lw	a5,-100(s0)
20402650:	03f7f713          	andi	a4,a5,63
20402654:	4789                	li	a5,2
20402656:	04f71763          	bne	a4,a5,204026a4 <__metal_exception_handler+0x124>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
2040265a:	307027f3          	csrr	a5,mtvt
2040265e:	f8f42823          	sw	a5,-112(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20402662:	f9842783          	lw	a5,-104(s0)
20402666:	0dc7a783          	lw	a5,220(a5)
2040266a:	f8f42623          	sw	a5,-116(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
2040266e:	f9042783          	lw	a5,-112(s0)
20402672:	439c                	lw	a5,0(a5)
20402674:	f8f42423          	sw	a5,-120(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
20402678:	f8842783          	lw	a5,-120(s0)
2040267c:	f8c42583          	lw	a1,-116(s0)
20402680:	f9442503          	lw	a0,-108(s0)
20402684:	9782                	jalr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
20402686:	a839                	j	204026a4 <__metal_exception_handler+0x124>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
20402688:	f9842703          	lw	a4,-104(s0)
2040268c:	f9442783          	lw	a5,-108(s0)
20402690:	0e078793          	addi	a5,a5,224
20402694:	078a                	slli	a5,a5,0x2
20402696:	97ba                	add	a5,a5,a4
20402698:	479c                	lw	a5,8(a5)
2040269a:	f9442583          	lw	a1,-108(s0)
2040269e:	fac42503          	lw	a0,-84(s0)
204026a2:	9782                	jalr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
204026a4:	50f6                	lw	ra,124(sp)
204026a6:	52e6                	lw	t0,120(sp)
204026a8:	5356                	lw	t1,116(sp)
204026aa:	53c6                	lw	t2,112(sp)
204026ac:	5436                	lw	s0,108(sp)
204026ae:	5526                	lw	a0,104(sp)
204026b0:	5596                	lw	a1,100(sp)
204026b2:	5606                	lw	a2,96(sp)
204026b4:	46f6                	lw	a3,92(sp)
204026b6:	4766                	lw	a4,88(sp)
204026b8:	47d6                	lw	a5,84(sp)
204026ba:	4846                	lw	a6,80(sp)
204026bc:	48b6                	lw	a7,76(sp)
204026be:	4e26                	lw	t3,72(sp)
204026c0:	4e96                	lw	t4,68(sp)
204026c2:	4f06                	lw	t5,64(sp)
204026c4:	5ff2                	lw	t6,60(sp)
204026c6:	6109                	addi	sp,sp,128
204026c8:	30200073          	mret
	...

204026f2 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
204026f2:	711d                	addi	sp,sp,-96
204026f4:	ce86                	sw	ra,92(sp)
204026f6:	cc96                	sw	t0,88(sp)
204026f8:	ca9a                	sw	t1,84(sp)
204026fa:	c89e                	sw	t2,80(sp)
204026fc:	c6a2                	sw	s0,76(sp)
204026fe:	c4aa                	sw	a0,72(sp)
20402700:	c2ae                	sw	a1,68(sp)
20402702:	c0b2                	sw	a2,64(sp)
20402704:	de36                	sw	a3,60(sp)
20402706:	dc3a                	sw	a4,56(sp)
20402708:	da3e                	sw	a5,52(sp)
2040270a:	d842                	sw	a6,48(sp)
2040270c:	d646                	sw	a7,44(sp)
2040270e:	d472                	sw	t3,40(sp)
20402710:	d276                	sw	t4,36(sp)
20402712:	d07a                	sw	t5,32(sp)
20402714:	ce7e                	sw	t6,28(sp)
20402716:	1080                	addi	s0,sp,96
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402718:	a6bff0ef          	jal	ra,20402182 <__metal_myhart_id>
2040271c:	872a                	mv	a4,a0
2040271e:	070a                	slli	a4,a4,0x2
20402720:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
20402724:	97ba                	add	a5,a5,a4
20402726:	439c                	lw	a5,0(a5)
20402728:	faf42623          	sw	a5,-84(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
2040272c:	fac42783          	lw	a5,-84(s0)
20402730:	c78d                	beqz	a5,2040275a <metal_lc0_interrupt_vector_handler+0x68>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402732:	fac42503          	lw	a0,-84(s0)
20402736:	9f7ff0ef          	jal	ra,2040212c <__metal_driver_cpu_interrupt_controller>
2040273a:	faa42423          	sw	a0,-88(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
2040273e:	fa842783          	lw	a5,-88(s0)
20402742:	2187a783          	lw	a5,536(a5)
20402746:	faf42223          	sw	a5,-92(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
2040274a:	fa842783          	lw	a5,-88(s0)
2040274e:	2107a783          	lw	a5,528(a5)
20402752:	fa442583          	lw	a1,-92(s0)
20402756:	4541                	li	a0,16
20402758:	9782                	jalr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
2040275a:	0001                	nop
2040275c:	40f6                	lw	ra,92(sp)
2040275e:	42e6                	lw	t0,88(sp)
20402760:	4356                	lw	t1,84(sp)
20402762:	43c6                	lw	t2,80(sp)
20402764:	4436                	lw	s0,76(sp)
20402766:	4526                	lw	a0,72(sp)
20402768:	4596                	lw	a1,68(sp)
2040276a:	4606                	lw	a2,64(sp)
2040276c:	56f2                	lw	a3,60(sp)
2040276e:	5762                	lw	a4,56(sp)
20402770:	57d2                	lw	a5,52(sp)
20402772:	5842                	lw	a6,48(sp)
20402774:	58b2                	lw	a7,44(sp)
20402776:	5e22                	lw	t3,40(sp)
20402778:	5e92                	lw	t4,36(sp)
2040277a:	5f02                	lw	t5,32(sp)
2040277c:	4ff2                	lw	t6,28(sp)
2040277e:	6125                	addi	sp,sp,96
20402780:	30200073          	mret

20402784 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
20402784:	711d                	addi	sp,sp,-96
20402786:	ce86                	sw	ra,92(sp)
20402788:	cc96                	sw	t0,88(sp)
2040278a:	ca9a                	sw	t1,84(sp)
2040278c:	c89e                	sw	t2,80(sp)
2040278e:	c6a2                	sw	s0,76(sp)
20402790:	c4aa                	sw	a0,72(sp)
20402792:	c2ae                	sw	a1,68(sp)
20402794:	c0b2                	sw	a2,64(sp)
20402796:	de36                	sw	a3,60(sp)
20402798:	dc3a                	sw	a4,56(sp)
2040279a:	da3e                	sw	a5,52(sp)
2040279c:	d842                	sw	a6,48(sp)
2040279e:	d646                	sw	a7,44(sp)
204027a0:	d472                	sw	t3,40(sp)
204027a2:	d276                	sw	t4,36(sp)
204027a4:	d07a                	sw	t5,32(sp)
204027a6:	ce7e                	sw	t6,28(sp)
204027a8:	1080                	addi	s0,sp,96
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204027aa:	9d9ff0ef          	jal	ra,20402182 <__metal_myhart_id>
204027ae:	872a                	mv	a4,a0
204027b0:	070a                	slli	a4,a4,0x2
204027b2:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
204027b6:	97ba                	add	a5,a5,a4
204027b8:	439c                	lw	a5,0(a5)
204027ba:	faf42623          	sw	a5,-84(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
204027be:	fac42783          	lw	a5,-84(s0)
204027c2:	c78d                	beqz	a5,204027ec <metal_lc1_interrupt_vector_handler+0x68>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204027c4:	fac42503          	lw	a0,-84(s0)
204027c8:	965ff0ef          	jal	ra,2040212c <__metal_driver_cpu_interrupt_controller>
204027cc:	faa42423          	sw	a0,-88(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
204027d0:	fa842783          	lw	a5,-88(s0)
204027d4:	2307a783          	lw	a5,560(a5)
204027d8:	faf42223          	sw	a5,-92(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
204027dc:	fa842783          	lw	a5,-88(s0)
204027e0:	2287a783          	lw	a5,552(a5)
204027e4:	fa442583          	lw	a1,-92(s0)
204027e8:	4545                	li	a0,17
204027ea:	9782                	jalr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
204027ec:	0001                	nop
204027ee:	40f6                	lw	ra,92(sp)
204027f0:	42e6                	lw	t0,88(sp)
204027f2:	4356                	lw	t1,84(sp)
204027f4:	43c6                	lw	t2,80(sp)
204027f6:	4436                	lw	s0,76(sp)
204027f8:	4526                	lw	a0,72(sp)
204027fa:	4596                	lw	a1,68(sp)
204027fc:	4606                	lw	a2,64(sp)
204027fe:	56f2                	lw	a3,60(sp)
20402800:	5762                	lw	a4,56(sp)
20402802:	57d2                	lw	a5,52(sp)
20402804:	5842                	lw	a6,48(sp)
20402806:	58b2                	lw	a7,44(sp)
20402808:	5e22                	lw	t3,40(sp)
2040280a:	5e92                	lw	t4,36(sp)
2040280c:	5f02                	lw	t5,32(sp)
2040280e:	4ff2                	lw	t6,28(sp)
20402810:	6125                	addi	sp,sp,96
20402812:	30200073          	mret

20402816 <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
20402816:	711d                	addi	sp,sp,-96
20402818:	ce86                	sw	ra,92(sp)
2040281a:	cc96                	sw	t0,88(sp)
2040281c:	ca9a                	sw	t1,84(sp)
2040281e:	c89e                	sw	t2,80(sp)
20402820:	c6a2                	sw	s0,76(sp)
20402822:	c4aa                	sw	a0,72(sp)
20402824:	c2ae                	sw	a1,68(sp)
20402826:	c0b2                	sw	a2,64(sp)
20402828:	de36                	sw	a3,60(sp)
2040282a:	dc3a                	sw	a4,56(sp)
2040282c:	da3e                	sw	a5,52(sp)
2040282e:	d842                	sw	a6,48(sp)
20402830:	d646                	sw	a7,44(sp)
20402832:	d472                	sw	t3,40(sp)
20402834:	d276                	sw	t4,36(sp)
20402836:	d07a                	sw	t5,32(sp)
20402838:	ce7e                	sw	t6,28(sp)
2040283a:	1080                	addi	s0,sp,96
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040283c:	947ff0ef          	jal	ra,20402182 <__metal_myhart_id>
20402840:	872a                	mv	a4,a0
20402842:	070a                	slli	a4,a4,0x2
20402844:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
20402848:	97ba                	add	a5,a5,a4
2040284a:	439c                	lw	a5,0(a5)
2040284c:	faf42623          	sw	a5,-84(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
20402850:	fac42783          	lw	a5,-84(s0)
20402854:	c78d                	beqz	a5,2040287e <metal_lc2_interrupt_vector_handler+0x68>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402856:	fac42503          	lw	a0,-84(s0)
2040285a:	8d3ff0ef          	jal	ra,2040212c <__metal_driver_cpu_interrupt_controller>
2040285e:	faa42423          	sw	a0,-88(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
20402862:	fa842783          	lw	a5,-88(s0)
20402866:	2487a783          	lw	a5,584(a5)
2040286a:	faf42223          	sw	a5,-92(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
2040286e:	fa842783          	lw	a5,-88(s0)
20402872:	2407a783          	lw	a5,576(a5)
20402876:	fa442583          	lw	a1,-92(s0)
2040287a:	4549                	li	a0,18
2040287c:	9782                	jalr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
2040287e:	0001                	nop
20402880:	40f6                	lw	ra,92(sp)
20402882:	42e6                	lw	t0,88(sp)
20402884:	4356                	lw	t1,84(sp)
20402886:	43c6                	lw	t2,80(sp)
20402888:	4436                	lw	s0,76(sp)
2040288a:	4526                	lw	a0,72(sp)
2040288c:	4596                	lw	a1,68(sp)
2040288e:	4606                	lw	a2,64(sp)
20402890:	56f2                	lw	a3,60(sp)
20402892:	5762                	lw	a4,56(sp)
20402894:	57d2                	lw	a5,52(sp)
20402896:	5842                	lw	a6,48(sp)
20402898:	58b2                	lw	a7,44(sp)
2040289a:	5e22                	lw	t3,40(sp)
2040289c:	5e92                	lw	t4,36(sp)
2040289e:	5f02                	lw	t5,32(sp)
204028a0:	4ff2                	lw	t6,28(sp)
204028a2:	6125                	addi	sp,sp,96
204028a4:	30200073          	mret

204028a8 <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
204028a8:	711d                	addi	sp,sp,-96
204028aa:	ce86                	sw	ra,92(sp)
204028ac:	cc96                	sw	t0,88(sp)
204028ae:	ca9a                	sw	t1,84(sp)
204028b0:	c89e                	sw	t2,80(sp)
204028b2:	c6a2                	sw	s0,76(sp)
204028b4:	c4aa                	sw	a0,72(sp)
204028b6:	c2ae                	sw	a1,68(sp)
204028b8:	c0b2                	sw	a2,64(sp)
204028ba:	de36                	sw	a3,60(sp)
204028bc:	dc3a                	sw	a4,56(sp)
204028be:	da3e                	sw	a5,52(sp)
204028c0:	d842                	sw	a6,48(sp)
204028c2:	d646                	sw	a7,44(sp)
204028c4:	d472                	sw	t3,40(sp)
204028c6:	d276                	sw	t4,36(sp)
204028c8:	d07a                	sw	t5,32(sp)
204028ca:	ce7e                	sw	t6,28(sp)
204028cc:	1080                	addi	s0,sp,96
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204028ce:	8b5ff0ef          	jal	ra,20402182 <__metal_myhart_id>
204028d2:	872a                	mv	a4,a0
204028d4:	070a                	slli	a4,a4,0x2
204028d6:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
204028da:	97ba                	add	a5,a5,a4
204028dc:	439c                	lw	a5,0(a5)
204028de:	faf42623          	sw	a5,-84(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
204028e2:	fac42783          	lw	a5,-84(s0)
204028e6:	c78d                	beqz	a5,20402910 <metal_lc3_interrupt_vector_handler+0x68>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204028e8:	fac42503          	lw	a0,-84(s0)
204028ec:	841ff0ef          	jal	ra,2040212c <__metal_driver_cpu_interrupt_controller>
204028f0:	faa42423          	sw	a0,-88(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
204028f4:	fa842783          	lw	a5,-88(s0)
204028f8:	2607a783          	lw	a5,608(a5)
204028fc:	faf42223          	sw	a5,-92(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
20402900:	fa842783          	lw	a5,-88(s0)
20402904:	2587a783          	lw	a5,600(a5)
20402908:	fa442583          	lw	a1,-92(s0)
2040290c:	454d                	li	a0,19
2040290e:	9782                	jalr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
20402910:	0001                	nop
20402912:	40f6                	lw	ra,92(sp)
20402914:	42e6                	lw	t0,88(sp)
20402916:	4356                	lw	t1,84(sp)
20402918:	43c6                	lw	t2,80(sp)
2040291a:	4436                	lw	s0,76(sp)
2040291c:	4526                	lw	a0,72(sp)
2040291e:	4596                	lw	a1,68(sp)
20402920:	4606                	lw	a2,64(sp)
20402922:	56f2                	lw	a3,60(sp)
20402924:	5762                	lw	a4,56(sp)
20402926:	57d2                	lw	a5,52(sp)
20402928:	5842                	lw	a6,48(sp)
2040292a:	58b2                	lw	a7,44(sp)
2040292c:	5e22                	lw	t3,40(sp)
2040292e:	5e92                	lw	t4,36(sp)
20402930:	5f02                	lw	t5,32(sp)
20402932:	4ff2                	lw	t6,28(sp)
20402934:	6125                	addi	sp,sp,96
20402936:	30200073          	mret

2040293a <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
2040293a:	711d                	addi	sp,sp,-96
2040293c:	ce86                	sw	ra,92(sp)
2040293e:	cc96                	sw	t0,88(sp)
20402940:	ca9a                	sw	t1,84(sp)
20402942:	c89e                	sw	t2,80(sp)
20402944:	c6a2                	sw	s0,76(sp)
20402946:	c4aa                	sw	a0,72(sp)
20402948:	c2ae                	sw	a1,68(sp)
2040294a:	c0b2                	sw	a2,64(sp)
2040294c:	de36                	sw	a3,60(sp)
2040294e:	dc3a                	sw	a4,56(sp)
20402950:	da3e                	sw	a5,52(sp)
20402952:	d842                	sw	a6,48(sp)
20402954:	d646                	sw	a7,44(sp)
20402956:	d472                	sw	t3,40(sp)
20402958:	d276                	sw	t4,36(sp)
2040295a:	d07a                	sw	t5,32(sp)
2040295c:	ce7e                	sw	t6,28(sp)
2040295e:	1080                	addi	s0,sp,96
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402960:	823ff0ef          	jal	ra,20402182 <__metal_myhart_id>
20402964:	872a                	mv	a4,a0
20402966:	070a                	slli	a4,a4,0x2
20402968:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
2040296c:	97ba                	add	a5,a5,a4
2040296e:	439c                	lw	a5,0(a5)
20402970:	faf42623          	sw	a5,-84(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
20402974:	fac42783          	lw	a5,-84(s0)
20402978:	c78d                	beqz	a5,204029a2 <metal_lc4_interrupt_vector_handler+0x68>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040297a:	fac42503          	lw	a0,-84(s0)
2040297e:	faeff0ef          	jal	ra,2040212c <__metal_driver_cpu_interrupt_controller>
20402982:	faa42423          	sw	a0,-88(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
20402986:	fa842783          	lw	a5,-88(s0)
2040298a:	2787a783          	lw	a5,632(a5)
2040298e:	faf42223          	sw	a5,-92(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
20402992:	fa842783          	lw	a5,-88(s0)
20402996:	2707a783          	lw	a5,624(a5)
2040299a:	fa442583          	lw	a1,-92(s0)
2040299e:	4551                	li	a0,20
204029a0:	9782                	jalr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
204029a2:	0001                	nop
204029a4:	40f6                	lw	ra,92(sp)
204029a6:	42e6                	lw	t0,88(sp)
204029a8:	4356                	lw	t1,84(sp)
204029aa:	43c6                	lw	t2,80(sp)
204029ac:	4436                	lw	s0,76(sp)
204029ae:	4526                	lw	a0,72(sp)
204029b0:	4596                	lw	a1,68(sp)
204029b2:	4606                	lw	a2,64(sp)
204029b4:	56f2                	lw	a3,60(sp)
204029b6:	5762                	lw	a4,56(sp)
204029b8:	57d2                	lw	a5,52(sp)
204029ba:	5842                	lw	a6,48(sp)
204029bc:	58b2                	lw	a7,44(sp)
204029be:	5e22                	lw	t3,40(sp)
204029c0:	5e92                	lw	t4,36(sp)
204029c2:	5f02                	lw	t5,32(sp)
204029c4:	4ff2                	lw	t6,28(sp)
204029c6:	6125                	addi	sp,sp,96
204029c8:	30200073          	mret

204029cc <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
204029cc:	711d                	addi	sp,sp,-96
204029ce:	ce86                	sw	ra,92(sp)
204029d0:	cc96                	sw	t0,88(sp)
204029d2:	ca9a                	sw	t1,84(sp)
204029d4:	c89e                	sw	t2,80(sp)
204029d6:	c6a2                	sw	s0,76(sp)
204029d8:	c4aa                	sw	a0,72(sp)
204029da:	c2ae                	sw	a1,68(sp)
204029dc:	c0b2                	sw	a2,64(sp)
204029de:	de36                	sw	a3,60(sp)
204029e0:	dc3a                	sw	a4,56(sp)
204029e2:	da3e                	sw	a5,52(sp)
204029e4:	d842                	sw	a6,48(sp)
204029e6:	d646                	sw	a7,44(sp)
204029e8:	d472                	sw	t3,40(sp)
204029ea:	d276                	sw	t4,36(sp)
204029ec:	d07a                	sw	t5,32(sp)
204029ee:	ce7e                	sw	t6,28(sp)
204029f0:	1080                	addi	s0,sp,96
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204029f2:	f90ff0ef          	jal	ra,20402182 <__metal_myhart_id>
204029f6:	872a                	mv	a4,a0
204029f8:	070a                	slli	a4,a4,0x2
204029fa:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
204029fe:	97ba                	add	a5,a5,a4
20402a00:	439c                	lw	a5,0(a5)
20402a02:	faf42623          	sw	a5,-84(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
20402a06:	fac42783          	lw	a5,-84(s0)
20402a0a:	c78d                	beqz	a5,20402a34 <metal_lc5_interrupt_vector_handler+0x68>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402a0c:	fac42503          	lw	a0,-84(s0)
20402a10:	f1cff0ef          	jal	ra,2040212c <__metal_driver_cpu_interrupt_controller>
20402a14:	faa42423          	sw	a0,-88(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
20402a18:	fa842783          	lw	a5,-88(s0)
20402a1c:	2907a783          	lw	a5,656(a5)
20402a20:	faf42223          	sw	a5,-92(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
20402a24:	fa842783          	lw	a5,-88(s0)
20402a28:	2887a783          	lw	a5,648(a5)
20402a2c:	fa442583          	lw	a1,-92(s0)
20402a30:	4555                	li	a0,21
20402a32:	9782                	jalr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
20402a34:	0001                	nop
20402a36:	40f6                	lw	ra,92(sp)
20402a38:	42e6                	lw	t0,88(sp)
20402a3a:	4356                	lw	t1,84(sp)
20402a3c:	43c6                	lw	t2,80(sp)
20402a3e:	4436                	lw	s0,76(sp)
20402a40:	4526                	lw	a0,72(sp)
20402a42:	4596                	lw	a1,68(sp)
20402a44:	4606                	lw	a2,64(sp)
20402a46:	56f2                	lw	a3,60(sp)
20402a48:	5762                	lw	a4,56(sp)
20402a4a:	57d2                	lw	a5,52(sp)
20402a4c:	5842                	lw	a6,48(sp)
20402a4e:	58b2                	lw	a7,44(sp)
20402a50:	5e22                	lw	t3,40(sp)
20402a52:	5e92                	lw	t4,36(sp)
20402a54:	5f02                	lw	t5,32(sp)
20402a56:	4ff2                	lw	t6,28(sp)
20402a58:	6125                	addi	sp,sp,96
20402a5a:	30200073          	mret

20402a5e <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
20402a5e:	711d                	addi	sp,sp,-96
20402a60:	ce86                	sw	ra,92(sp)
20402a62:	cc96                	sw	t0,88(sp)
20402a64:	ca9a                	sw	t1,84(sp)
20402a66:	c89e                	sw	t2,80(sp)
20402a68:	c6a2                	sw	s0,76(sp)
20402a6a:	c4aa                	sw	a0,72(sp)
20402a6c:	c2ae                	sw	a1,68(sp)
20402a6e:	c0b2                	sw	a2,64(sp)
20402a70:	de36                	sw	a3,60(sp)
20402a72:	dc3a                	sw	a4,56(sp)
20402a74:	da3e                	sw	a5,52(sp)
20402a76:	d842                	sw	a6,48(sp)
20402a78:	d646                	sw	a7,44(sp)
20402a7a:	d472                	sw	t3,40(sp)
20402a7c:	d276                	sw	t4,36(sp)
20402a7e:	d07a                	sw	t5,32(sp)
20402a80:	ce7e                	sw	t6,28(sp)
20402a82:	1080                	addi	s0,sp,96
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402a84:	efeff0ef          	jal	ra,20402182 <__metal_myhart_id>
20402a88:	872a                	mv	a4,a0
20402a8a:	070a                	slli	a4,a4,0x2
20402a8c:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
20402a90:	97ba                	add	a5,a5,a4
20402a92:	439c                	lw	a5,0(a5)
20402a94:	faf42623          	sw	a5,-84(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
20402a98:	fac42783          	lw	a5,-84(s0)
20402a9c:	c78d                	beqz	a5,20402ac6 <metal_lc6_interrupt_vector_handler+0x68>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402a9e:	fac42503          	lw	a0,-84(s0)
20402aa2:	e8aff0ef          	jal	ra,2040212c <__metal_driver_cpu_interrupt_controller>
20402aa6:	faa42423          	sw	a0,-88(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
20402aaa:	fa842783          	lw	a5,-88(s0)
20402aae:	2a87a783          	lw	a5,680(a5)
20402ab2:	faf42223          	sw	a5,-92(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
20402ab6:	fa842783          	lw	a5,-88(s0)
20402aba:	2a07a783          	lw	a5,672(a5)
20402abe:	fa442583          	lw	a1,-92(s0)
20402ac2:	4559                	li	a0,22
20402ac4:	9782                	jalr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
20402ac6:	0001                	nop
20402ac8:	40f6                	lw	ra,92(sp)
20402aca:	42e6                	lw	t0,88(sp)
20402acc:	4356                	lw	t1,84(sp)
20402ace:	43c6                	lw	t2,80(sp)
20402ad0:	4436                	lw	s0,76(sp)
20402ad2:	4526                	lw	a0,72(sp)
20402ad4:	4596                	lw	a1,68(sp)
20402ad6:	4606                	lw	a2,64(sp)
20402ad8:	56f2                	lw	a3,60(sp)
20402ada:	5762                	lw	a4,56(sp)
20402adc:	57d2                	lw	a5,52(sp)
20402ade:	5842                	lw	a6,48(sp)
20402ae0:	58b2                	lw	a7,44(sp)
20402ae2:	5e22                	lw	t3,40(sp)
20402ae4:	5e92                	lw	t4,36(sp)
20402ae6:	5f02                	lw	t5,32(sp)
20402ae8:	4ff2                	lw	t6,28(sp)
20402aea:	6125                	addi	sp,sp,96
20402aec:	30200073          	mret

20402af0 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
20402af0:	711d                	addi	sp,sp,-96
20402af2:	ce86                	sw	ra,92(sp)
20402af4:	cc96                	sw	t0,88(sp)
20402af6:	ca9a                	sw	t1,84(sp)
20402af8:	c89e                	sw	t2,80(sp)
20402afa:	c6a2                	sw	s0,76(sp)
20402afc:	c4aa                	sw	a0,72(sp)
20402afe:	c2ae                	sw	a1,68(sp)
20402b00:	c0b2                	sw	a2,64(sp)
20402b02:	de36                	sw	a3,60(sp)
20402b04:	dc3a                	sw	a4,56(sp)
20402b06:	da3e                	sw	a5,52(sp)
20402b08:	d842                	sw	a6,48(sp)
20402b0a:	d646                	sw	a7,44(sp)
20402b0c:	d472                	sw	t3,40(sp)
20402b0e:	d276                	sw	t4,36(sp)
20402b10:	d07a                	sw	t5,32(sp)
20402b12:	ce7e                	sw	t6,28(sp)
20402b14:	1080                	addi	s0,sp,96
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402b16:	e6cff0ef          	jal	ra,20402182 <__metal_myhart_id>
20402b1a:	872a                	mv	a4,a0
20402b1c:	070a                	slli	a4,a4,0x2
20402b1e:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
20402b22:	97ba                	add	a5,a5,a4
20402b24:	439c                	lw	a5,0(a5)
20402b26:	faf42623          	sw	a5,-84(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
20402b2a:	fac42783          	lw	a5,-84(s0)
20402b2e:	c78d                	beqz	a5,20402b58 <metal_lc7_interrupt_vector_handler+0x68>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402b30:	fac42503          	lw	a0,-84(s0)
20402b34:	df8ff0ef          	jal	ra,2040212c <__metal_driver_cpu_interrupt_controller>
20402b38:	faa42423          	sw	a0,-88(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
20402b3c:	fa842783          	lw	a5,-88(s0)
20402b40:	2c07a783          	lw	a5,704(a5)
20402b44:	faf42223          	sw	a5,-92(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
20402b48:	fa842783          	lw	a5,-88(s0)
20402b4c:	2b87a783          	lw	a5,696(a5)
20402b50:	fa442583          	lw	a1,-92(s0)
20402b54:	455d                	li	a0,23
20402b56:	9782                	jalr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
20402b58:	0001                	nop
20402b5a:	40f6                	lw	ra,92(sp)
20402b5c:	42e6                	lw	t0,88(sp)
20402b5e:	4356                	lw	t1,84(sp)
20402b60:	43c6                	lw	t2,80(sp)
20402b62:	4436                	lw	s0,76(sp)
20402b64:	4526                	lw	a0,72(sp)
20402b66:	4596                	lw	a1,68(sp)
20402b68:	4606                	lw	a2,64(sp)
20402b6a:	56f2                	lw	a3,60(sp)
20402b6c:	5762                	lw	a4,56(sp)
20402b6e:	57d2                	lw	a5,52(sp)
20402b70:	5842                	lw	a6,48(sp)
20402b72:	58b2                	lw	a7,44(sp)
20402b74:	5e22                	lw	t3,40(sp)
20402b76:	5e92                	lw	t4,36(sp)
20402b78:	5f02                	lw	t5,32(sp)
20402b7a:	4ff2                	lw	t6,28(sp)
20402b7c:	6125                	addi	sp,sp,96
20402b7e:	30200073          	mret

20402b82 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
20402b82:	711d                	addi	sp,sp,-96
20402b84:	ce86                	sw	ra,92(sp)
20402b86:	cc96                	sw	t0,88(sp)
20402b88:	ca9a                	sw	t1,84(sp)
20402b8a:	c89e                	sw	t2,80(sp)
20402b8c:	c6a2                	sw	s0,76(sp)
20402b8e:	c4aa                	sw	a0,72(sp)
20402b90:	c2ae                	sw	a1,68(sp)
20402b92:	c0b2                	sw	a2,64(sp)
20402b94:	de36                	sw	a3,60(sp)
20402b96:	dc3a                	sw	a4,56(sp)
20402b98:	da3e                	sw	a5,52(sp)
20402b9a:	d842                	sw	a6,48(sp)
20402b9c:	d646                	sw	a7,44(sp)
20402b9e:	d472                	sw	t3,40(sp)
20402ba0:	d276                	sw	t4,36(sp)
20402ba2:	d07a                	sw	t5,32(sp)
20402ba4:	ce7e                	sw	t6,28(sp)
20402ba6:	1080                	addi	s0,sp,96
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402ba8:	ddaff0ef          	jal	ra,20402182 <__metal_myhart_id>
20402bac:	872a                	mv	a4,a0
20402bae:	070a                	slli	a4,a4,0x2
20402bb0:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
20402bb4:	97ba                	add	a5,a5,a4
20402bb6:	439c                	lw	a5,0(a5)
20402bb8:	faf42623          	sw	a5,-84(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
20402bbc:	fac42783          	lw	a5,-84(s0)
20402bc0:	c78d                	beqz	a5,20402bea <metal_lc8_interrupt_vector_handler+0x68>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402bc2:	fac42503          	lw	a0,-84(s0)
20402bc6:	d66ff0ef          	jal	ra,2040212c <__metal_driver_cpu_interrupt_controller>
20402bca:	faa42423          	sw	a0,-88(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
20402bce:	fa842783          	lw	a5,-88(s0)
20402bd2:	2d87a783          	lw	a5,728(a5)
20402bd6:	faf42223          	sw	a5,-92(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
20402bda:	fa842783          	lw	a5,-88(s0)
20402bde:	2d07a783          	lw	a5,720(a5)
20402be2:	fa442583          	lw	a1,-92(s0)
20402be6:	4561                	li	a0,24
20402be8:	9782                	jalr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
20402bea:	0001                	nop
20402bec:	40f6                	lw	ra,92(sp)
20402bee:	42e6                	lw	t0,88(sp)
20402bf0:	4356                	lw	t1,84(sp)
20402bf2:	43c6                	lw	t2,80(sp)
20402bf4:	4436                	lw	s0,76(sp)
20402bf6:	4526                	lw	a0,72(sp)
20402bf8:	4596                	lw	a1,68(sp)
20402bfa:	4606                	lw	a2,64(sp)
20402bfc:	56f2                	lw	a3,60(sp)
20402bfe:	5762                	lw	a4,56(sp)
20402c00:	57d2                	lw	a5,52(sp)
20402c02:	5842                	lw	a6,48(sp)
20402c04:	58b2                	lw	a7,44(sp)
20402c06:	5e22                	lw	t3,40(sp)
20402c08:	5e92                	lw	t4,36(sp)
20402c0a:	5f02                	lw	t5,32(sp)
20402c0c:	4ff2                	lw	t6,28(sp)
20402c0e:	6125                	addi	sp,sp,96
20402c10:	30200073          	mret

20402c14 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
20402c14:	711d                	addi	sp,sp,-96
20402c16:	ce86                	sw	ra,92(sp)
20402c18:	cc96                	sw	t0,88(sp)
20402c1a:	ca9a                	sw	t1,84(sp)
20402c1c:	c89e                	sw	t2,80(sp)
20402c1e:	c6a2                	sw	s0,76(sp)
20402c20:	c4aa                	sw	a0,72(sp)
20402c22:	c2ae                	sw	a1,68(sp)
20402c24:	c0b2                	sw	a2,64(sp)
20402c26:	de36                	sw	a3,60(sp)
20402c28:	dc3a                	sw	a4,56(sp)
20402c2a:	da3e                	sw	a5,52(sp)
20402c2c:	d842                	sw	a6,48(sp)
20402c2e:	d646                	sw	a7,44(sp)
20402c30:	d472                	sw	t3,40(sp)
20402c32:	d276                	sw	t4,36(sp)
20402c34:	d07a                	sw	t5,32(sp)
20402c36:	ce7e                	sw	t6,28(sp)
20402c38:	1080                	addi	s0,sp,96
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402c3a:	d48ff0ef          	jal	ra,20402182 <__metal_myhart_id>
20402c3e:	872a                	mv	a4,a0
20402c40:	070a                	slli	a4,a4,0x2
20402c42:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
20402c46:	97ba                	add	a5,a5,a4
20402c48:	439c                	lw	a5,0(a5)
20402c4a:	faf42623          	sw	a5,-84(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
20402c4e:	fac42783          	lw	a5,-84(s0)
20402c52:	c78d                	beqz	a5,20402c7c <metal_lc9_interrupt_vector_handler+0x68>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402c54:	fac42503          	lw	a0,-84(s0)
20402c58:	cd4ff0ef          	jal	ra,2040212c <__metal_driver_cpu_interrupt_controller>
20402c5c:	faa42423          	sw	a0,-88(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
20402c60:	fa842783          	lw	a5,-88(s0)
20402c64:	2f07a783          	lw	a5,752(a5)
20402c68:	faf42223          	sw	a5,-92(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
20402c6c:	fa842783          	lw	a5,-88(s0)
20402c70:	2e87a783          	lw	a5,744(a5)
20402c74:	fa442583          	lw	a1,-92(s0)
20402c78:	4565                	li	a0,25
20402c7a:	9782                	jalr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
20402c7c:	0001                	nop
20402c7e:	40f6                	lw	ra,92(sp)
20402c80:	42e6                	lw	t0,88(sp)
20402c82:	4356                	lw	t1,84(sp)
20402c84:	43c6                	lw	t2,80(sp)
20402c86:	4436                	lw	s0,76(sp)
20402c88:	4526                	lw	a0,72(sp)
20402c8a:	4596                	lw	a1,68(sp)
20402c8c:	4606                	lw	a2,64(sp)
20402c8e:	56f2                	lw	a3,60(sp)
20402c90:	5762                	lw	a4,56(sp)
20402c92:	57d2                	lw	a5,52(sp)
20402c94:	5842                	lw	a6,48(sp)
20402c96:	58b2                	lw	a7,44(sp)
20402c98:	5e22                	lw	t3,40(sp)
20402c9a:	5e92                	lw	t4,36(sp)
20402c9c:	5f02                	lw	t5,32(sp)
20402c9e:	4ff2                	lw	t6,28(sp)
20402ca0:	6125                	addi	sp,sp,96
20402ca2:	30200073          	mret

20402ca6 <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
20402ca6:	711d                	addi	sp,sp,-96
20402ca8:	ce86                	sw	ra,92(sp)
20402caa:	cc96                	sw	t0,88(sp)
20402cac:	ca9a                	sw	t1,84(sp)
20402cae:	c89e                	sw	t2,80(sp)
20402cb0:	c6a2                	sw	s0,76(sp)
20402cb2:	c4aa                	sw	a0,72(sp)
20402cb4:	c2ae                	sw	a1,68(sp)
20402cb6:	c0b2                	sw	a2,64(sp)
20402cb8:	de36                	sw	a3,60(sp)
20402cba:	dc3a                	sw	a4,56(sp)
20402cbc:	da3e                	sw	a5,52(sp)
20402cbe:	d842                	sw	a6,48(sp)
20402cc0:	d646                	sw	a7,44(sp)
20402cc2:	d472                	sw	t3,40(sp)
20402cc4:	d276                	sw	t4,36(sp)
20402cc6:	d07a                	sw	t5,32(sp)
20402cc8:	ce7e                	sw	t6,28(sp)
20402cca:	1080                	addi	s0,sp,96
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402ccc:	cb6ff0ef          	jal	ra,20402182 <__metal_myhart_id>
20402cd0:	872a                	mv	a4,a0
20402cd2:	070a                	slli	a4,a4,0x2
20402cd4:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
20402cd8:	97ba                	add	a5,a5,a4
20402cda:	439c                	lw	a5,0(a5)
20402cdc:	faf42623          	sw	a5,-84(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
20402ce0:	fac42783          	lw	a5,-84(s0)
20402ce4:	c78d                	beqz	a5,20402d0e <metal_lc10_interrupt_vector_handler+0x68>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402ce6:	fac42503          	lw	a0,-84(s0)
20402cea:	c42ff0ef          	jal	ra,2040212c <__metal_driver_cpu_interrupt_controller>
20402cee:	faa42423          	sw	a0,-88(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
20402cf2:	fa842783          	lw	a5,-88(s0)
20402cf6:	3087a783          	lw	a5,776(a5)
20402cfa:	faf42223          	sw	a5,-92(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
20402cfe:	fa842783          	lw	a5,-88(s0)
20402d02:	3007a783          	lw	a5,768(a5)
20402d06:	fa442583          	lw	a1,-92(s0)
20402d0a:	4569                	li	a0,26
20402d0c:	9782                	jalr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
20402d0e:	0001                	nop
20402d10:	40f6                	lw	ra,92(sp)
20402d12:	42e6                	lw	t0,88(sp)
20402d14:	4356                	lw	t1,84(sp)
20402d16:	43c6                	lw	t2,80(sp)
20402d18:	4436                	lw	s0,76(sp)
20402d1a:	4526                	lw	a0,72(sp)
20402d1c:	4596                	lw	a1,68(sp)
20402d1e:	4606                	lw	a2,64(sp)
20402d20:	56f2                	lw	a3,60(sp)
20402d22:	5762                	lw	a4,56(sp)
20402d24:	57d2                	lw	a5,52(sp)
20402d26:	5842                	lw	a6,48(sp)
20402d28:	58b2                	lw	a7,44(sp)
20402d2a:	5e22                	lw	t3,40(sp)
20402d2c:	5e92                	lw	t4,36(sp)
20402d2e:	5f02                	lw	t5,32(sp)
20402d30:	4ff2                	lw	t6,28(sp)
20402d32:	6125                	addi	sp,sp,96
20402d34:	30200073          	mret

20402d38 <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
20402d38:	711d                	addi	sp,sp,-96
20402d3a:	ce86                	sw	ra,92(sp)
20402d3c:	cc96                	sw	t0,88(sp)
20402d3e:	ca9a                	sw	t1,84(sp)
20402d40:	c89e                	sw	t2,80(sp)
20402d42:	c6a2                	sw	s0,76(sp)
20402d44:	c4aa                	sw	a0,72(sp)
20402d46:	c2ae                	sw	a1,68(sp)
20402d48:	c0b2                	sw	a2,64(sp)
20402d4a:	de36                	sw	a3,60(sp)
20402d4c:	dc3a                	sw	a4,56(sp)
20402d4e:	da3e                	sw	a5,52(sp)
20402d50:	d842                	sw	a6,48(sp)
20402d52:	d646                	sw	a7,44(sp)
20402d54:	d472                	sw	t3,40(sp)
20402d56:	d276                	sw	t4,36(sp)
20402d58:	d07a                	sw	t5,32(sp)
20402d5a:	ce7e                	sw	t6,28(sp)
20402d5c:	1080                	addi	s0,sp,96
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402d5e:	c24ff0ef          	jal	ra,20402182 <__metal_myhart_id>
20402d62:	872a                	mv	a4,a0
20402d64:	070a                	slli	a4,a4,0x2
20402d66:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
20402d6a:	97ba                	add	a5,a5,a4
20402d6c:	439c                	lw	a5,0(a5)
20402d6e:	faf42623          	sw	a5,-84(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
20402d72:	fac42783          	lw	a5,-84(s0)
20402d76:	c78d                	beqz	a5,20402da0 <metal_lc11_interrupt_vector_handler+0x68>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402d78:	fac42503          	lw	a0,-84(s0)
20402d7c:	bb0ff0ef          	jal	ra,2040212c <__metal_driver_cpu_interrupt_controller>
20402d80:	faa42423          	sw	a0,-88(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
20402d84:	fa842783          	lw	a5,-88(s0)
20402d88:	3207a783          	lw	a5,800(a5)
20402d8c:	faf42223          	sw	a5,-92(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
20402d90:	fa842783          	lw	a5,-88(s0)
20402d94:	3187a783          	lw	a5,792(a5)
20402d98:	fa442583          	lw	a1,-92(s0)
20402d9c:	456d                	li	a0,27
20402d9e:	9782                	jalr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
20402da0:	0001                	nop
20402da2:	40f6                	lw	ra,92(sp)
20402da4:	42e6                	lw	t0,88(sp)
20402da6:	4356                	lw	t1,84(sp)
20402da8:	43c6                	lw	t2,80(sp)
20402daa:	4436                	lw	s0,76(sp)
20402dac:	4526                	lw	a0,72(sp)
20402dae:	4596                	lw	a1,68(sp)
20402db0:	4606                	lw	a2,64(sp)
20402db2:	56f2                	lw	a3,60(sp)
20402db4:	5762                	lw	a4,56(sp)
20402db6:	57d2                	lw	a5,52(sp)
20402db8:	5842                	lw	a6,48(sp)
20402dba:	58b2                	lw	a7,44(sp)
20402dbc:	5e22                	lw	t3,40(sp)
20402dbe:	5e92                	lw	t4,36(sp)
20402dc0:	5f02                	lw	t5,32(sp)
20402dc2:	4ff2                	lw	t6,28(sp)
20402dc4:	6125                	addi	sp,sp,96
20402dc6:	30200073          	mret

20402dca <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
20402dca:	711d                	addi	sp,sp,-96
20402dcc:	ce86                	sw	ra,92(sp)
20402dce:	cc96                	sw	t0,88(sp)
20402dd0:	ca9a                	sw	t1,84(sp)
20402dd2:	c89e                	sw	t2,80(sp)
20402dd4:	c6a2                	sw	s0,76(sp)
20402dd6:	c4aa                	sw	a0,72(sp)
20402dd8:	c2ae                	sw	a1,68(sp)
20402dda:	c0b2                	sw	a2,64(sp)
20402ddc:	de36                	sw	a3,60(sp)
20402dde:	dc3a                	sw	a4,56(sp)
20402de0:	da3e                	sw	a5,52(sp)
20402de2:	d842                	sw	a6,48(sp)
20402de4:	d646                	sw	a7,44(sp)
20402de6:	d472                	sw	t3,40(sp)
20402de8:	d276                	sw	t4,36(sp)
20402dea:	d07a                	sw	t5,32(sp)
20402dec:	ce7e                	sw	t6,28(sp)
20402dee:	1080                	addi	s0,sp,96
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402df0:	b92ff0ef          	jal	ra,20402182 <__metal_myhart_id>
20402df4:	872a                	mv	a4,a0
20402df6:	070a                	slli	a4,a4,0x2
20402df8:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
20402dfc:	97ba                	add	a5,a5,a4
20402dfe:	439c                	lw	a5,0(a5)
20402e00:	faf42623          	sw	a5,-84(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
20402e04:	fac42783          	lw	a5,-84(s0)
20402e08:	c78d                	beqz	a5,20402e32 <metal_lc12_interrupt_vector_handler+0x68>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402e0a:	fac42503          	lw	a0,-84(s0)
20402e0e:	b1eff0ef          	jal	ra,2040212c <__metal_driver_cpu_interrupt_controller>
20402e12:	faa42423          	sw	a0,-88(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
20402e16:	fa842783          	lw	a5,-88(s0)
20402e1a:	3387a783          	lw	a5,824(a5)
20402e1e:	faf42223          	sw	a5,-92(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
20402e22:	fa842783          	lw	a5,-88(s0)
20402e26:	3307a783          	lw	a5,816(a5)
20402e2a:	fa442583          	lw	a1,-92(s0)
20402e2e:	4571                	li	a0,28
20402e30:	9782                	jalr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
20402e32:	0001                	nop
20402e34:	40f6                	lw	ra,92(sp)
20402e36:	42e6                	lw	t0,88(sp)
20402e38:	4356                	lw	t1,84(sp)
20402e3a:	43c6                	lw	t2,80(sp)
20402e3c:	4436                	lw	s0,76(sp)
20402e3e:	4526                	lw	a0,72(sp)
20402e40:	4596                	lw	a1,68(sp)
20402e42:	4606                	lw	a2,64(sp)
20402e44:	56f2                	lw	a3,60(sp)
20402e46:	5762                	lw	a4,56(sp)
20402e48:	57d2                	lw	a5,52(sp)
20402e4a:	5842                	lw	a6,48(sp)
20402e4c:	58b2                	lw	a7,44(sp)
20402e4e:	5e22                	lw	t3,40(sp)
20402e50:	5e92                	lw	t4,36(sp)
20402e52:	5f02                	lw	t5,32(sp)
20402e54:	4ff2                	lw	t6,28(sp)
20402e56:	6125                	addi	sp,sp,96
20402e58:	30200073          	mret

20402e5c <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
20402e5c:	711d                	addi	sp,sp,-96
20402e5e:	ce86                	sw	ra,92(sp)
20402e60:	cc96                	sw	t0,88(sp)
20402e62:	ca9a                	sw	t1,84(sp)
20402e64:	c89e                	sw	t2,80(sp)
20402e66:	c6a2                	sw	s0,76(sp)
20402e68:	c4aa                	sw	a0,72(sp)
20402e6a:	c2ae                	sw	a1,68(sp)
20402e6c:	c0b2                	sw	a2,64(sp)
20402e6e:	de36                	sw	a3,60(sp)
20402e70:	dc3a                	sw	a4,56(sp)
20402e72:	da3e                	sw	a5,52(sp)
20402e74:	d842                	sw	a6,48(sp)
20402e76:	d646                	sw	a7,44(sp)
20402e78:	d472                	sw	t3,40(sp)
20402e7a:	d276                	sw	t4,36(sp)
20402e7c:	d07a                	sw	t5,32(sp)
20402e7e:	ce7e                	sw	t6,28(sp)
20402e80:	1080                	addi	s0,sp,96
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402e82:	b00ff0ef          	jal	ra,20402182 <__metal_myhart_id>
20402e86:	872a                	mv	a4,a0
20402e88:	070a                	slli	a4,a4,0x2
20402e8a:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
20402e8e:	97ba                	add	a5,a5,a4
20402e90:	439c                	lw	a5,0(a5)
20402e92:	faf42623          	sw	a5,-84(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
20402e96:	fac42783          	lw	a5,-84(s0)
20402e9a:	c78d                	beqz	a5,20402ec4 <metal_lc13_interrupt_vector_handler+0x68>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402e9c:	fac42503          	lw	a0,-84(s0)
20402ea0:	a8cff0ef          	jal	ra,2040212c <__metal_driver_cpu_interrupt_controller>
20402ea4:	faa42423          	sw	a0,-88(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
20402ea8:	fa842783          	lw	a5,-88(s0)
20402eac:	3507a783          	lw	a5,848(a5)
20402eb0:	faf42223          	sw	a5,-92(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
20402eb4:	fa842783          	lw	a5,-88(s0)
20402eb8:	3487a783          	lw	a5,840(a5)
20402ebc:	fa442583          	lw	a1,-92(s0)
20402ec0:	4575                	li	a0,29
20402ec2:	9782                	jalr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
20402ec4:	0001                	nop
20402ec6:	40f6                	lw	ra,92(sp)
20402ec8:	42e6                	lw	t0,88(sp)
20402eca:	4356                	lw	t1,84(sp)
20402ecc:	43c6                	lw	t2,80(sp)
20402ece:	4436                	lw	s0,76(sp)
20402ed0:	4526                	lw	a0,72(sp)
20402ed2:	4596                	lw	a1,68(sp)
20402ed4:	4606                	lw	a2,64(sp)
20402ed6:	56f2                	lw	a3,60(sp)
20402ed8:	5762                	lw	a4,56(sp)
20402eda:	57d2                	lw	a5,52(sp)
20402edc:	5842                	lw	a6,48(sp)
20402ede:	58b2                	lw	a7,44(sp)
20402ee0:	5e22                	lw	t3,40(sp)
20402ee2:	5e92                	lw	t4,36(sp)
20402ee4:	5f02                	lw	t5,32(sp)
20402ee6:	4ff2                	lw	t6,28(sp)
20402ee8:	6125                	addi	sp,sp,96
20402eea:	30200073          	mret

20402eee <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
20402eee:	711d                	addi	sp,sp,-96
20402ef0:	ce86                	sw	ra,92(sp)
20402ef2:	cc96                	sw	t0,88(sp)
20402ef4:	ca9a                	sw	t1,84(sp)
20402ef6:	c89e                	sw	t2,80(sp)
20402ef8:	c6a2                	sw	s0,76(sp)
20402efa:	c4aa                	sw	a0,72(sp)
20402efc:	c2ae                	sw	a1,68(sp)
20402efe:	c0b2                	sw	a2,64(sp)
20402f00:	de36                	sw	a3,60(sp)
20402f02:	dc3a                	sw	a4,56(sp)
20402f04:	da3e                	sw	a5,52(sp)
20402f06:	d842                	sw	a6,48(sp)
20402f08:	d646                	sw	a7,44(sp)
20402f0a:	d472                	sw	t3,40(sp)
20402f0c:	d276                	sw	t4,36(sp)
20402f0e:	d07a                	sw	t5,32(sp)
20402f10:	ce7e                	sw	t6,28(sp)
20402f12:	1080                	addi	s0,sp,96
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402f14:	a6eff0ef          	jal	ra,20402182 <__metal_myhart_id>
20402f18:	872a                	mv	a4,a0
20402f1a:	070a                	slli	a4,a4,0x2
20402f1c:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
20402f20:	97ba                	add	a5,a5,a4
20402f22:	439c                	lw	a5,0(a5)
20402f24:	faf42623          	sw	a5,-84(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
20402f28:	fac42783          	lw	a5,-84(s0)
20402f2c:	c78d                	beqz	a5,20402f56 <metal_lc14_interrupt_vector_handler+0x68>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402f2e:	fac42503          	lw	a0,-84(s0)
20402f32:	9faff0ef          	jal	ra,2040212c <__metal_driver_cpu_interrupt_controller>
20402f36:	faa42423          	sw	a0,-88(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
20402f3a:	fa842783          	lw	a5,-88(s0)
20402f3e:	3687a783          	lw	a5,872(a5)
20402f42:	faf42223          	sw	a5,-92(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
20402f46:	fa842783          	lw	a5,-88(s0)
20402f4a:	3607a783          	lw	a5,864(a5)
20402f4e:	fa442583          	lw	a1,-92(s0)
20402f52:	4579                	li	a0,30
20402f54:	9782                	jalr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
20402f56:	0001                	nop
20402f58:	40f6                	lw	ra,92(sp)
20402f5a:	42e6                	lw	t0,88(sp)
20402f5c:	4356                	lw	t1,84(sp)
20402f5e:	43c6                	lw	t2,80(sp)
20402f60:	4436                	lw	s0,76(sp)
20402f62:	4526                	lw	a0,72(sp)
20402f64:	4596                	lw	a1,68(sp)
20402f66:	4606                	lw	a2,64(sp)
20402f68:	56f2                	lw	a3,60(sp)
20402f6a:	5762                	lw	a4,56(sp)
20402f6c:	57d2                	lw	a5,52(sp)
20402f6e:	5842                	lw	a6,48(sp)
20402f70:	58b2                	lw	a7,44(sp)
20402f72:	5e22                	lw	t3,40(sp)
20402f74:	5e92                	lw	t4,36(sp)
20402f76:	5f02                	lw	t5,32(sp)
20402f78:	4ff2                	lw	t6,28(sp)
20402f7a:	6125                	addi	sp,sp,96
20402f7c:	30200073          	mret

20402f80 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
20402f80:	711d                	addi	sp,sp,-96
20402f82:	ce86                	sw	ra,92(sp)
20402f84:	cc96                	sw	t0,88(sp)
20402f86:	ca9a                	sw	t1,84(sp)
20402f88:	c89e                	sw	t2,80(sp)
20402f8a:	c6a2                	sw	s0,76(sp)
20402f8c:	c4aa                	sw	a0,72(sp)
20402f8e:	c2ae                	sw	a1,68(sp)
20402f90:	c0b2                	sw	a2,64(sp)
20402f92:	de36                	sw	a3,60(sp)
20402f94:	dc3a                	sw	a4,56(sp)
20402f96:	da3e                	sw	a5,52(sp)
20402f98:	d842                	sw	a6,48(sp)
20402f9a:	d646                	sw	a7,44(sp)
20402f9c:	d472                	sw	t3,40(sp)
20402f9e:	d276                	sw	t4,36(sp)
20402fa0:	d07a                	sw	t5,32(sp)
20402fa2:	ce7e                	sw	t6,28(sp)
20402fa4:	1080                	addi	s0,sp,96
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402fa6:	9dcff0ef          	jal	ra,20402182 <__metal_myhart_id>
20402faa:	872a                	mv	a4,a0
20402fac:	070a                	slli	a4,a4,0x2
20402fae:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
20402fb2:	97ba                	add	a5,a5,a4
20402fb4:	439c                	lw	a5,0(a5)
20402fb6:	faf42623          	sw	a5,-84(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
20402fba:	fac42783          	lw	a5,-84(s0)
20402fbe:	c78d                	beqz	a5,20402fe8 <metal_lc15_interrupt_vector_handler+0x68>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402fc0:	fac42503          	lw	a0,-84(s0)
20402fc4:	968ff0ef          	jal	ra,2040212c <__metal_driver_cpu_interrupt_controller>
20402fc8:	faa42423          	sw	a0,-88(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
20402fcc:	fa842783          	lw	a5,-88(s0)
20402fd0:	3807a783          	lw	a5,896(a5)
20402fd4:	faf42223          	sw	a5,-92(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
20402fd8:	fa842783          	lw	a5,-88(s0)
20402fdc:	3787a783          	lw	a5,888(a5)
20402fe0:	fa442583          	lw	a1,-92(s0)
20402fe4:	457d                	li	a0,31
20402fe6:	9782                	jalr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
20402fe8:	0001                	nop
20402fea:	40f6                	lw	ra,92(sp)
20402fec:	42e6                	lw	t0,88(sp)
20402fee:	4356                	lw	t1,84(sp)
20402ff0:	43c6                	lw	t2,80(sp)
20402ff2:	4436                	lw	s0,76(sp)
20402ff4:	4526                	lw	a0,72(sp)
20402ff6:	4596                	lw	a1,68(sp)
20402ff8:	4606                	lw	a2,64(sp)
20402ffa:	56f2                	lw	a3,60(sp)
20402ffc:	5762                	lw	a4,56(sp)
20402ffe:	57d2                	lw	a5,52(sp)
20403000:	5842                	lw	a6,48(sp)
20403002:	58b2                	lw	a7,44(sp)
20403004:	5e22                	lw	t3,40(sp)
20403006:	5e92                	lw	t4,36(sp)
20403008:	5f02                	lw	t5,32(sp)
2040300a:	4ff2                	lw	t6,28(sp)
2040300c:	6125                	addi	sp,sp,96
2040300e:	30200073          	mret

20403012 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
20403012:	1101                	addi	sp,sp,-32
20403014:	ce22                	sw	s0,28(sp)
20403016:	1000                	addi	s0,sp,32
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
20403018:	305027f3          	csrr	a5,mtvec
2040301c:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
20403020:	fec42783          	lw	a5,-20(s0)
20403024:	03f7f793          	andi	a5,a5,63
20403028:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
2040302c:	fec42703          	lw	a4,-20(s0)
20403030:	4789                	li	a5,2
20403032:	00f70d63          	beq	a4,a5,2040304c <__metal_controller_interrupt_vector_mode+0x3a>
20403036:	fec42703          	lw	a4,-20(s0)
2040303a:	478d                	li	a5,3
2040303c:	00f70a63          	beq	a4,a5,20403050 <__metal_controller_interrupt_vector_mode+0x3e>
20403040:	fec42703          	lw	a4,-20(s0)
20403044:	4785                	li	a5,1
20403046:	00f70763          	beq	a4,a5,20403054 <__metal_controller_interrupt_vector_mode+0x42>
2040304a:	a039                	j	20403058 <__metal_controller_interrupt_vector_mode+0x46>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
2040304c:	478d                	li	a5,3
2040304e:	a031                	j	2040305a <__metal_controller_interrupt_vector_mode+0x48>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
20403050:	4791                	li	a5,4
20403052:	a021                	j	2040305a <__metal_controller_interrupt_vector_mode+0x48>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
20403054:	4785                	li	a5,1
20403056:	a011                	j	2040305a <__metal_controller_interrupt_vector_mode+0x48>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
20403058:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:444
}
2040305a:	853e                	mv	a0,a5
2040305c:	4472                	lw	s0,28(sp)
2040305e:	6105                	addi	sp,sp,32
20403060:	8082                	ret

20403062 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
20403062:	7179                	addi	sp,sp,-48
20403064:	d622                	sw	s0,44(sp)
20403066:	1800                	addi	s0,sp,48
20403068:	fca42e23          	sw	a0,-36(s0)
2040306c:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
20403070:	305027f3          	csrr	a5,mtvec
20403074:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
20403078:	fec42783          	lw	a5,-20(s0)
2040307c:	fc07f793          	andi	a5,a5,-64
20403080:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
20403084:	fd842783          	lw	a5,-40(s0)
20403088:	fef42423          	sw	a5,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
2040308c:	fdc42703          	lw	a4,-36(s0)
20403090:	4791                	li	a5,4
20403092:	06e7e063          	bltu	a5,a4,204030f2 <__metal_controller_interrupt_vector+0x90>
20403096:	fdc42783          	lw	a5,-36(s0)
2040309a:	00279713          	slli	a4,a5,0x2
2040309e:	204067b7          	lui	a5,0x20406
204030a2:	ad878793          	addi	a5,a5,-1320 # 20405ad8 <__metal_driver_vtable_riscv_clint0+0x4c>
204030a6:	97ba                	add	a5,a5,a4
204030a8:	439c                	lw	a5,0(a5)
204030aa:	8782                	jr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
204030ac:	fe842783          	lw	a5,-24(s0)
204030b0:	30779073          	csrw	mtvt,a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
204030b4:	fec42783          	lw	a5,-20(s0)
204030b8:	0027e793          	ori	a5,a5,2
204030bc:	30579073          	csrw	mtvec,a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
204030c0:	a80d                	j	204030f2 <__metal_controller_interrupt_vector+0x90>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
204030c2:	fe842783          	lw	a5,-24(s0)
204030c6:	30779073          	csrw	mtvt,a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
204030ca:	fec42783          	lw	a5,-20(s0)
204030ce:	0037e793          	ori	a5,a5,3
204030d2:	30579073          	csrw	mtvec,a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
204030d6:	a831                	j	204030f2 <__metal_controller_interrupt_vector+0x90>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
204030d8:	fe842783          	lw	a5,-24(s0)
204030dc:	0017e793          	ori	a5,a5,1
204030e0:	30579073          	csrw	mtvec,a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
204030e4:	a039                	j	204030f2 <__metal_controller_interrupt_vector+0x90>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
204030e6:	fe842783          	lw	a5,-24(s0)
204030ea:	9bf1                	andi	a5,a5,-4
204030ec:	30579073          	csrw	mtvec,a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
204030f0:	0001                	nop
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
204030f2:	0001                	nop
204030f4:	5432                	lw	s0,44(sp)
204030f6:	6145                	addi	sp,sp,48
204030f8:	8082                	ret

204030fa <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
204030fa:	1101                	addi	sp,sp,-32
204030fc:	ce22                	sw	s0,28(sp)
204030fe:	1000                	addi	s0,sp,32
20403100:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
20403104:	fec42783          	lw	a5,-20(s0)
20403108:	17f5                	addi	a5,a5,-3
2040310a:	4771                	li	a4,28
2040310c:	00f76d63          	bltu	a4,a5,20403126 <__metal_valid_interrupt_id+0x2c>
20403110:	00279713          	slli	a4,a5,0x2
20403114:	204067b7          	lui	a5,0x20406
20403118:	aec78793          	addi	a5,a5,-1300 # 20405aec <__metal_driver_vtable_riscv_clint0+0x60>
2040311c:	97ba                	add	a5,a5,a4
2040311e:	439c                	lw	a5,0(a5)
20403120:	8782                	jr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
20403122:	4785                	li	a5,1
20403124:	a019                	j	2040312a <__metal_valid_interrupt_id+0x30>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
20403126:	0001                	nop
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
20403128:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:501
}
2040312a:	853e                	mv	a0,a5
2040312c:	4472                	lw	s0,28(sp)
2040312e:	6105                	addi	sp,sp,32
20403130:	8082                	ret

20403132 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
20403132:	7179                	addi	sp,sp,-48
20403134:	d606                	sw	ra,44(sp)
20403136:	d422                	sw	s0,40(sp)
20403138:	1800                	addi	s0,sp,48
2040313a:	fca42e23          	sw	a0,-36(s0)
2040313e:	fcb42c23          	sw	a1,-40(s0)
20403142:	fcc42a23          	sw	a2,-44(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
20403146:	fe042623          	sw	zero,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
2040314a:	fdc42783          	lw	a5,-36(s0)
2040314e:	e399                	bnez	a5,20403154 <__metal_local_interrupt_enable+0x22>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
20403150:	57fd                	li	a5,-1
20403152:	a849                	j	204031e4 <__metal_local_interrupt_enable+0xb2>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
20403154:	fd842703          	lw	a4,-40(s0)
20403158:	47fd                	li	a5,31
2040315a:	08e7e063          	bltu	a5,a4,204031da <__metal_local_interrupt_enable+0xa8>
2040315e:	fd842783          	lw	a5,-40(s0)
20403162:	00279713          	slli	a4,a5,0x2
20403166:	204067b7          	lui	a5,0x20406
2040316a:	b6078793          	addi	a5,a5,-1184 # 20405b60 <__metal_driver_vtable_riscv_clint0+0xd4>
2040316e:	97ba                	add	a5,a5,a4
20403170:	439c                	lw	a5,0(a5)
20403172:	8782                	jr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
20403174:	fd442783          	lw	a5,-44(s0)
20403178:	c781                	beqz	a5,20403180 <__metal_local_interrupt_enable+0x4e>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
2040317a:	822ff0ef          	jal	ra,2040219c <__metal_interrupt_global_enable>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
2040317e:	a08d                	j	204031e0 <__metal_local_interrupt_enable+0xae>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
20403180:	834ff0ef          	jal	ra,204021b4 <__metal_interrupt_global_disable>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
20403184:	a8b1                	j	204031e0 <__metal_local_interrupt_enable+0xae>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
20403186:	fd442783          	lw	a5,-44(s0)
2040318a:	c781                	beqz	a5,20403192 <__metal_local_interrupt_enable+0x60>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
2040318c:	840ff0ef          	jal	ra,204021cc <__metal_interrupt_software_enable>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20403190:	a881                	j	204031e0 <__metal_local_interrupt_enable+0xae>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
20403192:	852ff0ef          	jal	ra,204021e4 <__metal_interrupt_software_disable>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
20403196:	a0a9                	j	204031e0 <__metal_local_interrupt_enable+0xae>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
20403198:	fd442783          	lw	a5,-44(s0)
2040319c:	c781                	beqz	a5,204031a4 <__metal_local_interrupt_enable+0x72>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
2040319e:	85eff0ef          	jal	ra,204021fc <__metal_interrupt_timer_enable>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
204031a2:	a83d                	j	204031e0 <__metal_local_interrupt_enable+0xae>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
204031a4:	872ff0ef          	jal	ra,20402216 <__metal_interrupt_timer_disable>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
204031a8:	a825                	j	204031e0 <__metal_local_interrupt_enable+0xae>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
204031aa:	fd442783          	lw	a5,-44(s0)
204031ae:	c781                	beqz	a5,204031b6 <__metal_local_interrupt_enable+0x84>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
204031b0:	880ff0ef          	jal	ra,20402230 <__metal_interrupt_external_enable>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
204031b4:	a035                	j	204031e0 <__metal_local_interrupt_enable+0xae>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
204031b6:	896ff0ef          	jal	ra,2040224c <__metal_interrupt_external_disable>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
204031ba:	a01d                	j	204031e0 <__metal_local_interrupt_enable+0xae>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
204031bc:	fd442783          	lw	a5,-44(s0)
204031c0:	c799                	beqz	a5,204031ce <__metal_local_interrupt_enable+0x9c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
204031c2:	fd842783          	lw	a5,-40(s0)
204031c6:	853e                	mv	a0,a5
204031c8:	8a0ff0ef          	jal	ra,20402268 <__metal_interrupt_local_enable>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
204031cc:	a811                	j	204031e0 <__metal_local_interrupt_enable+0xae>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
204031ce:	fd842783          	lw	a5,-40(s0)
204031d2:	853e                	mv	a0,a5
204031d4:	8c0ff0ef          	jal	ra,20402294 <__metal_interrupt_local_disable>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
204031d8:	a021                	j	204031e0 <__metal_local_interrupt_enable+0xae>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
204031da:	57fd                	li	a5,-1
204031dc:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
204031e0:	fec42783          	lw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:568
}
204031e4:	853e                	mv	a0,a5
204031e6:	50b2                	lw	ra,44(sp)
204031e8:	5422                	lw	s0,40(sp)
204031ea:	6145                	addi	sp,sp,48
204031ec:	8082                	ret

204031ee <__metal_exception_register>:
__metal_exception_register():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
204031ee:	7179                	addi	sp,sp,-48
204031f0:	d622                	sw	s0,44(sp)
204031f2:	1800                	addi	s0,sp,48
204031f4:	fca42e23          	sw	a0,-36(s0)
204031f8:	fcb42c23          	sw	a1,-40(s0)
204031fc:	fcc42a23          	sw	a2,-44(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403200:	fdc42783          	lw	a5,-36(s0)
20403204:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
20403208:	fd842703          	lw	a4,-40(s0)
2040320c:	47ad                	li	a5,11
2040320e:	02e7c263          	blt	a5,a4,20403232 <__metal_exception_register+0x44>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
20403212:	fd442783          	lw	a5,-44(s0)
20403216:	cf91                	beqz	a5,20403232 <__metal_exception_register+0x44>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
20403218:	fec42703          	lw	a4,-20(s0)
2040321c:	fd842783          	lw	a5,-40(s0)
20403220:	0e078793          	addi	a5,a5,224
20403224:	078a                	slli	a5,a5,0x2
20403226:	97ba                	add	a5,a5,a4
20403228:	fd442703          	lw	a4,-44(s0)
2040322c:	c798                	sw	a4,8(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
2040322e:	4781                	li	a5,0
20403230:	a011                	j	20403234 <__metal_exception_register+0x46>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
20403232:	57fd                	li	a5,-1
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:580
}
20403234:	853e                	mv	a0,a5
20403236:	5432                	lw	s0,44(sp)
20403238:	6145                	addi	sp,sp,48
2040323a:	8082                	ret

2040323c <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
2040323c:	7139                	addi	sp,sp,-64
2040323e:	de06                	sw	ra,60(sp)
20403240:	dc22                	sw	s0,56(sp)
20403242:	0080                	addi	s0,sp,64
20403244:	fca42623          	sw	a0,-52(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403248:	fcc42783          	lw	a5,-52(s0)
2040324c:	fef42223          	sw	a5,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
20403250:	fe442783          	lw	a5,-28(s0)
20403254:	43dc                	lw	a5,4(a5)
20403256:	10079d63          	bnez	a5,20403370 <__metal_driver_riscv_cpu_controller_interrupt_init+0x134>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
2040325a:	57fd                	li	a5,-1
2040325c:	3047b073          	csrc	mie,a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
20403260:	57fd                	li	a5,-1
20403262:	3447b073          	csrc	mip,a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
20403266:	301027f3          	csrr	a5,misa
2040326a:	fef42023          	sw	a5,-32(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
2040326e:	fe042703          	lw	a4,-32(s0)
20403272:	6789                	lui	a5,0x2
20403274:	8ff9                	and	a5,a5,a4
20403276:	e799                	bnez	a5,20403284 <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
20403278:	fe042703          	lw	a4,-32(s0)
2040327c:	000407b7          	lui	a5,0x40
20403280:	8ff9                	and	a5,a5,a4
20403282:	c799                	beqz	a5,20403290 <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
20403284:	57fd                	li	a5,-1
20403286:	3037b073          	csrc	mideleg,a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
2040328a:	57fd                	li	a5,-1
2040328c:	3027b073          	csrc	medeleg,a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
20403290:	fe042703          	lw	a4,-32(s0)
20403294:	000407b7          	lui	a5,0x40
20403298:	8ff9                	and	a5,a5,a4
2040329a:	c781                	beqz	a5,204032a2 <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
2040329c:	57fd                	li	a5,-1
2040329e:	1807b073          	csrc	satp,a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
204032a2:	fe042623          	sw	zero,-20(s0)
204032a6:	a0b9                	j	204032f4 <__metal_driver_riscv_cpu_controller_interrupt_init+0xb8>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
204032a8:	fe442683          	lw	a3,-28(s0)
204032ac:	fec42703          	lw	a4,-20(s0)
204032b0:	87ba                	mv	a5,a4
204032b2:	0786                	slli	a5,a5,0x1
204032b4:	97ba                	add	a5,a5,a4
204032b6:	078e                	slli	a5,a5,0x3
204032b8:	97b6                	add	a5,a5,a3
204032ba:	0807a823          	sw	zero,144(a5) # 40090 <__heap_size+0x3f890>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
204032be:	fe442683          	lw	a3,-28(s0)
204032c2:	fec42703          	lw	a4,-20(s0)
204032c6:	87ba                	mv	a5,a4
204032c8:	0786                	slli	a5,a5,0x1
204032ca:	97ba                	add	a5,a5,a4
204032cc:	078e                	slli	a5,a5,0x3
204032ce:	97b6                	add	a5,a5,a3
204032d0:	0807aa23          	sw	zero,148(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
204032d4:	fe442683          	lw	a3,-28(s0)
204032d8:	fec42703          	lw	a4,-20(s0)
204032dc:	87ba                	mv	a5,a4
204032de:	0786                	slli	a5,a5,0x1
204032e0:	97ba                	add	a5,a5,a4
204032e2:	078e                	slli	a5,a5,0x3
204032e4:	97b6                	add	a5,a5,a3
204032e6:	0807ac23          	sw	zero,152(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
204032ea:	fec42783          	lw	a5,-20(s0)
204032ee:	0785                	addi	a5,a5,1
204032f0:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
204032f4:	fec42703          	lw	a4,-20(s0)
204032f8:	47fd                	li	a5,31
204032fa:	fae7d7e3          	bge	a5,a4,204032a8 <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
204032fe:	fe042423          	sw	zero,-24(s0)
20403302:	a01d                	j	20403328 <__metal_driver_riscv_cpu_controller_interrupt_init+0xec>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20403304:	fe442703          	lw	a4,-28(s0)
20403308:	fe842783          	lw	a5,-24(s0)
2040330c:	0e078793          	addi	a5,a5,224
20403310:	078a                	slli	a5,a5,0x2
20403312:	97ba                	add	a5,a5,a4
20403314:	20402737          	lui	a4,0x20402
20403318:	2c070713          	addi	a4,a4,704 # 204022c0 <__metal_default_exception_handler>
2040331c:	c798                	sw	a4,8(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
2040331e:	fe842783          	lw	a5,-24(s0)
20403322:	0785                	addi	a5,a5,1
20403324:	fef42423          	sw	a5,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
20403328:	fe842703          	lw	a4,-24(s0)
2040332c:	47ad                	li	a5,11
2040332e:	fce7dbe3          	bge	a5,a4,20403304 <__metal_driver_riscv_cpu_controller_interrupt_init+0xc8>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
20403332:	204027b7          	lui	a5,0x20402
20403336:	58078593          	addi	a1,a5,1408 # 20402580 <__metal_exception_handler>
2040333a:	4501                	li	a0,0
2040333c:	331d                	jal	20403062 <__metal_controller_interrupt_vector>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
2040333e:	301027f3          	csrr	a5,misa
20403342:	fcf42e23          	sw	a5,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
20403346:	fdc42703          	lw	a4,-36(s0)
2040334a:	67c1                	lui	a5,0x10
2040334c:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
20403350:	8ff9                	and	a5,a5,a4
20403352:	cb99                	beqz	a5,20403368 <__metal_driver_riscv_cpu_controller_interrupt_init+0x12c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
20403354:	300027f3          	csrr	a5,mstatus
20403358:	fcf42e23          	sw	a5,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
2040335c:	fdc42703          	lw	a4,-36(s0)
20403360:	6789                	lui	a5,0x2
20403362:	8fd9                	or	a5,a5,a4
20403364:	30079073          	csrw	mstatus,a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
20403368:	fe442783          	lw	a5,-28(s0)
2040336c:	4705                	li	a4,1
2040336e:	c3d8                	sw	a4,4(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
20403370:	0001                	nop
20403372:	50f2                	lw	ra,60(sp)
20403374:	5462                	lw	s0,56(sp)
20403376:	6121                	addi	sp,sp,64
20403378:	8082                	ret

2040337a <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
2040337a:	7179                	addi	sp,sp,-48
2040337c:	d606                	sw	ra,44(sp)
2040337e:	d422                	sw	s0,40(sp)
20403380:	1800                	addi	s0,sp,48
20403382:	fca42e23          	sw	a0,-36(s0)
20403386:	fcb42c23          	sw	a1,-40(s0)
2040338a:	fcc42a23          	sw	a2,-44(s0)
2040338e:	fcd42823          	sw	a3,-48(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
20403392:	fe042623          	sw	zero,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403396:	fdc42783          	lw	a5,-36(s0)
2040339a:	fef42423          	sw	a5,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
2040339e:	fd842503          	lw	a0,-40(s0)
204033a2:	3ba1                	jal	204030fa <__metal_valid_interrupt_id>
204033a4:	87aa                	mv	a5,a0
204033a6:	e399                	bnez	a5,204033ac <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
204033a8:	57d5                	li	a5,-11
204033aa:	aa11                	j	204034be <__metal_driver_riscv_cpu_controller_interrupt_register+0x144>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
204033ac:	fd442783          	lw	a5,-44(s0)
204033b0:	cf85                	beqz	a5,204033e8 <__metal_driver_riscv_cpu_controller_interrupt_register+0x6e>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
204033b2:	fe842683          	lw	a3,-24(s0)
204033b6:	fd842703          	lw	a4,-40(s0)
204033ba:	87ba                	mv	a5,a4
204033bc:	0786                	slli	a5,a5,0x1
204033be:	97ba                	add	a5,a5,a4
204033c0:	078e                	slli	a5,a5,0x3
204033c2:	97b6                	add	a5,a5,a3
204033c4:	fd442703          	lw	a4,-44(s0)
204033c8:	08e7a823          	sw	a4,144(a5) # 2090 <__heap_size+0x1890>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
204033cc:	fe842683          	lw	a3,-24(s0)
204033d0:	fd842703          	lw	a4,-40(s0)
204033d4:	87ba                	mv	a5,a4
204033d6:	0786                	slli	a5,a5,0x1
204033d8:	97ba                	add	a5,a5,a4
204033da:	078e                	slli	a5,a5,0x3
204033dc:	97b6                	add	a5,a5,a3
204033de:	fd042703          	lw	a4,-48(s0)
204033e2:	08e7ac23          	sw	a4,152(a5)
204033e6:	a8d1                	j	204034ba <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
204033e8:	fd842783          	lw	a5,-40(s0)
204033ec:	17f5                	addi	a5,a5,-3
204033ee:	4771                	li	a4,28
204033f0:	0cf76263          	bltu	a4,a5,204034b4 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
204033f4:	00279713          	slli	a4,a5,0x2
204033f8:	204067b7          	lui	a5,0x20406
204033fc:	be078793          	addi	a5,a5,-1056 # 20405be0 <__metal_driver_vtable_riscv_clint0+0x154>
20403400:	97ba                	add	a5,a5,a4
20403402:	439c                	lw	a5,0(a5)
20403404:	8782                	jr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
20403406:	fe842683          	lw	a3,-24(s0)
2040340a:	fd842703          	lw	a4,-40(s0)
2040340e:	87ba                	mv	a5,a4
20403410:	0786                	slli	a5,a5,0x1
20403412:	97ba                	add	a5,a5,a4
20403414:	078e                	slli	a5,a5,0x3
20403416:	97b6                	add	a5,a5,a3
20403418:	20402737          	lui	a4,0x20402
2040341c:	3ac70713          	addi	a4,a4,940 # 204023ac <__metal_default_sw_handler>
20403420:	08e7a823          	sw	a4,144(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
20403424:	fe842683          	lw	a3,-24(s0)
20403428:	fd842703          	lw	a4,-40(s0)
2040342c:	87ba                	mv	a5,a4
2040342e:	0786                	slli	a5,a5,0x1
20403430:	97ba                	add	a5,a5,a4
20403432:	078e                	slli	a5,a5,0x3
20403434:	97b6                	add	a5,a5,a3
20403436:	fd042703          	lw	a4,-48(s0)
2040343a:	08e7aa23          	sw	a4,148(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
2040343e:	a8b5                	j	204034ba <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
20403440:	fe842683          	lw	a3,-24(s0)
20403444:	fd842703          	lw	a4,-40(s0)
20403448:	87ba                	mv	a5,a4
2040344a:	0786                	slli	a5,a5,0x1
2040344c:	97ba                	add	a5,a5,a4
2040344e:	078e                	slli	a5,a5,0x3
20403450:	97b6                	add	a5,a5,a3
20403452:	20402737          	lui	a4,0x20402
20403456:	49e70713          	addi	a4,a4,1182 # 2040249e <__metal_default_timer_handler>
2040345a:	08e7a823          	sw	a4,144(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
2040345e:	fe842683          	lw	a3,-24(s0)
20403462:	fd842703          	lw	a4,-40(s0)
20403466:	87ba                	mv	a5,a4
20403468:	0786                	slli	a5,a5,0x1
2040346a:	97ba                	add	a5,a5,a4
2040346c:	078e                	slli	a5,a5,0x3
2040346e:	97b6                	add	a5,a5,a3
20403470:	fd042703          	lw	a4,-48(s0)
20403474:	08e7aa23          	sw	a4,148(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
20403478:	a089                	j	204034ba <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
2040347a:	fe842683          	lw	a3,-24(s0)
2040347e:	fd842703          	lw	a4,-40(s0)
20403482:	87ba                	mv	a5,a4
20403484:	0786                	slli	a5,a5,0x1
20403486:	97ba                	add	a5,a5,a4
20403488:	078e                	slli	a5,a5,0x3
2040348a:	97b6                	add	a5,a5,a3
2040348c:	20402737          	lui	a4,0x20402
20403490:	2d870713          	addi	a4,a4,728 # 204022d8 <__metal_default_interrupt_handler>
20403494:	08e7a823          	sw	a4,144(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
20403498:	fe842683          	lw	a3,-24(s0)
2040349c:	fd842703          	lw	a4,-40(s0)
204034a0:	87ba                	mv	a5,a4
204034a2:	0786                	slli	a5,a5,0x1
204034a4:	97ba                	add	a5,a5,a4
204034a6:	078e                	slli	a5,a5,0x3
204034a8:	97b6                	add	a5,a5,a3
204034aa:	fd042703          	lw	a4,-48(s0)
204034ae:	08e7aa23          	sw	a4,148(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
204034b2:	a021                	j	204034ba <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
204034b4:	57d1                	li	a5,-12
204034b6:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
204034ba:	fec42783          	lw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:679
}
204034be:	853e                	mv	a0,a5
204034c0:	50b2                	lw	ra,44(sp)
204034c2:	5422                	lw	s0,40(sp)
204034c4:	6145                	addi	sp,sp,48
204034c6:	8082                	ret

204034c8 <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
204034c8:	1101                	addi	sp,sp,-32
204034ca:	ce06                	sw	ra,28(sp)
204034cc:	cc22                	sw	s0,24(sp)
204034ce:	1000                	addi	s0,sp,32
204034d0:	fea42623          	sw	a0,-20(s0)
204034d4:	feb42423          	sw	a1,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
204034d8:	fe842783          	lw	a5,-24(s0)
204034dc:	4605                	li	a2,1
204034de:	85be                	mv	a1,a5
204034e0:	fec42503          	lw	a0,-20(s0)
204034e4:	31b9                	jal	20403132 <__metal_local_interrupt_enable>
204034e6:	87aa                	mv	a5,a0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:685
}
204034e8:	853e                	mv	a0,a5
204034ea:	40f2                	lw	ra,28(sp)
204034ec:	4462                	lw	s0,24(sp)
204034ee:	6105                	addi	sp,sp,32
204034f0:	8082                	ret

204034f2 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
204034f2:	1101                	addi	sp,sp,-32
204034f4:	ce06                	sw	ra,28(sp)
204034f6:	cc22                	sw	s0,24(sp)
204034f8:	1000                	addi	s0,sp,32
204034fa:	fea42623          	sw	a0,-20(s0)
204034fe:	feb42423          	sw	a1,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20403502:	fe842783          	lw	a5,-24(s0)
20403506:	4601                	li	a2,0
20403508:	85be                	mv	a1,a5
2040350a:	fec42503          	lw	a0,-20(s0)
2040350e:	3115                	jal	20403132 <__metal_local_interrupt_enable>
20403510:	87aa                	mv	a5,a0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:691
}
20403512:	853e                	mv	a0,a5
20403514:	40f2                	lw	ra,28(sp)
20403516:	4462                	lw	s0,24(sp)
20403518:	6105                	addi	sp,sp,32
2040351a:	8082                	ret

2040351c <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
2040351c:	1101                	addi	sp,sp,-32
2040351e:	ce06                	sw	ra,28(sp)
20403520:	cc22                	sw	s0,24(sp)
20403522:	1000                	addi	s0,sp,32
20403524:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
20403528:	aebff0ef          	jal	ra,20403012 <__metal_controller_interrupt_vector_mode>
2040352c:	87aa                	mv	a5,a0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:724
}
2040352e:	853e                	mv	a0,a5
20403530:	40f2                	lw	ra,28(sp)
20403532:	4462                	lw	s0,24(sp)
20403534:	6105                	addi	sp,sp,32
20403536:	8082                	ret

20403538 <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
20403538:	7179                	addi	sp,sp,-48
2040353a:	d606                	sw	ra,44(sp)
2040353c:	d422                	sw	s0,40(sp)
2040353e:	1800                	addi	s0,sp,48
20403540:	fca42e23          	sw	a0,-36(s0)
20403544:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403548:	fdc42783          	lw	a5,-36(s0)
2040354c:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
20403550:	fd842783          	lw	a5,-40(s0)
20403554:	eb99                	bnez	a5,2040356a <__metal_driver_riscv_cpu_controller_set_vector_mode+0x32>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
20403556:	204027b7          	lui	a5,0x20402
2040355a:	58078593          	addi	a1,a5,1408 # 20402580 <__metal_exception_handler>
2040355e:	fd842503          	lw	a0,-40(s0)
20403562:	b01ff0ef          	jal	ra,20403062 <__metal_controller_interrupt_vector>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
20403566:	4781                	li	a5,0
20403568:	a00d                	j	2040358a <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
2040356a:	fd842703          	lw	a4,-40(s0)
2040356e:	4785                	li	a5,1
20403570:	00f71c63          	bne	a4,a5,20403588 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x50>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
20403574:	204067b7          	lui	a5,0x20406
20403578:	88078593          	addi	a1,a5,-1920 # 20405880 <__metal_vector_table>
2040357c:	fd842503          	lw	a0,-40(s0)
20403580:	ae3ff0ef          	jal	ra,20403062 <__metal_controller_interrupt_vector>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
20403584:	4781                	li	a5,0
20403586:	a011                	j	2040358a <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
20403588:	57fd                	li	a5,-1
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:740
}
2040358a:	853e                	mv	a0,a5
2040358c:	50b2                	lw	ra,44(sp)
2040358e:	5422                	lw	s0,40(sp)
20403590:	6145                	addi	sp,sp,48
20403592:	8082                	ret

20403594 <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
20403594:	1101                	addi	sp,sp,-32
20403596:	ce22                	sw	s0,28(sp)
20403598:	1000                	addi	s0,sp,32
2040359a:	fea42623          	sw	a0,-20(s0)
2040359e:	feb42423          	sw	a1,-24(s0)
204035a2:	fec42223          	sw	a2,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
204035a6:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:747
}
204035a8:	853e                	mv	a0,a5
204035aa:	4472                	lw	s0,28(sp)
204035ac:	6105                	addi	sp,sp,32
204035ae:	8082                	ret

204035b0 <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
204035b0:	7139                	addi	sp,sp,-64
204035b2:	de22                	sw	s0,60(sp)
204035b4:	0080                	addi	s0,sp,64
204035b6:	fca42623          	sw	a0,-52(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
204035ba:	4301                	li	t1,0
204035bc:	4381                	li	t2,0
204035be:	fe642423          	sw	t1,-24(s0)
204035c2:	fe742623          	sw	t2,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:758

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi));
204035c6:	b8002573          	csrr	a0,mcycleh
204035ca:	fea42223          	sw	a0,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:759
    __asm__ volatile ("csrr %0, mcycle" : "=r"(lo));
204035ce:	b0002573          	csrr	a0,mcycle
204035d2:	fea42023          	sw	a0,-32(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:760
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
204035d6:	b8002573          	csrr	a0,mcycleh
204035da:	fca42e23          	sw	a0,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:761
    if (hi == hi1) {
204035de:	fe442883          	lw	a7,-28(s0)
204035e2:	fdc42503          	lw	a0,-36(s0)
204035e6:	02a89563          	bne	a7,a0,20403610 <__metal_driver_cpu_mcycle_get+0x60>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:762
        val = ((unsigned long long)hi << 32) | lo;
204035ea:	fe442503          	lw	a0,-28(s0)
204035ee:	85aa                	mv	a1,a0
204035f0:	4601                	li	a2,0
204035f2:	00059813          	slli	a6,a1,0x0
204035f6:	4781                	li	a5,0
204035f8:	fe042603          	lw	a2,-32(s0)
204035fc:	86b2                	mv	a3,a2
204035fe:	4701                	li	a4,0
20403600:	00d7e633          	or	a2,a5,a3
20403604:	fec42423          	sw	a2,-24(s0)
20403608:	00e867b3          	or	a5,a6,a4
2040360c:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:768
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
20403610:	fe842783          	lw	a5,-24(s0)
20403614:	fec42803          	lw	a6,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:769
}
20403618:	853e                	mv	a0,a5
2040361a:	85c2                	mv	a1,a6
2040361c:	5472                	lw	s0,60(sp)
2040361e:	6121                	addi	sp,sp,64
20403620:	8082                	ret

20403622 <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
20403622:	7179                	addi	sp,sp,-48
20403624:	d606                	sw	ra,44(sp)
20403626:	d422                	sw	s0,40(sp)
20403628:	d24a                	sw	s2,36(sp)
2040362a:	d04e                	sw	s3,32(sp)
2040362c:	1800                	addi	s0,sp,48
2040362e:	fca42e23          	sw	a0,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
20403632:	fdc42783          	lw	a5,-36(s0)
20403636:	e781                	bnez	a5,2040363e <__metal_driver_cpu_timebase_get+0x1c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
20403638:	4901                	li	s2,0
2040363a:	4981                	li	s3,0
2040363c:	a821                	j	20403654 <__metal_driver_cpu_timebase_get+0x32>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
2040363e:	fdc42503          	lw	a0,-36(s0)
20403642:	ac1fe0ef          	jal	ra,20402102 <__metal_driver_cpu_timebase>
20403646:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
2040364a:	fec42783          	lw	a5,-20(s0)
2040364e:	893e                	mv	s2,a5
20403650:	87fd                	srai	a5,a5,0x1f
20403652:	89be                	mv	s3,a5
20403654:	87ca                	mv	a5,s2
20403656:	884e                	mv	a6,s3
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:780
}
20403658:	853e                	mv	a0,a5
2040365a:	85c2                	mv	a1,a6
2040365c:	50b2                	lw	ra,44(sp)
2040365e:	5422                	lw	s0,40(sp)
20403660:	5912                	lw	s2,36(sp)
20403662:	5982                	lw	s3,32(sp)
20403664:	6145                	addi	sp,sp,48
20403666:	8082                	ret

20403668 <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
20403668:	7179                	addi	sp,sp,-48
2040366a:	d606                	sw	ra,44(sp)
2040366c:	d422                	sw	s0,40(sp)
2040366e:	1800                	addi	s0,sp,48
20403670:	fca42e23          	sw	a0,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
20403674:	4781                	li	a5,0
20403676:	4801                	li	a6,0
20403678:	fef42023          	sw	a5,-32(s0)
2040367c:	ff042223          	sw	a6,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403680:	fdc42503          	lw	a0,-36(s0)
20403684:	aa9fe0ef          	jal	ra,2040212c <__metal_driver_cpu_interrupt_controller>
20403688:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
2040368c:	fec42783          	lw	a5,-20(s0)
20403690:	c78d                	beqz	a5,204036ba <__metal_driver_cpu_mtime_get+0x52>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403692:	fec42783          	lw	a5,-20(s0)
20403696:	13c7a783          	lw	a5,316(a5)
2040369a:	fef42423          	sw	a5,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
2040369e:	fe842783          	lw	a5,-24(s0)
204036a2:	cf81                	beqz	a5,204036ba <__metal_driver_cpu_mtime_get+0x52>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
204036a4:	fe842783          	lw	a5,-24(s0)
204036a8:	439c                	lw	a5,0(a5)
204036aa:	43f8                	lw	a4,68(a5)
204036ac:	fe040793          	addi	a5,s0,-32
204036b0:	863e                	mv	a2,a5
204036b2:	4585                	li	a1,1
204036b4:	fe842503          	lw	a0,-24(s0)
204036b8:	9702                	jalr	a4
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
204036ba:	fe042783          	lw	a5,-32(s0)
204036be:	fe442803          	lw	a6,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:797
}
204036c2:	853e                	mv	a0,a5
204036c4:	85c2                	mv	a1,a6
204036c6:	50b2                	lw	ra,44(sp)
204036c8:	5422                	lw	s0,40(sp)
204036ca:	6145                	addi	sp,sp,48
204036cc:	8082                	ret

204036ce <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
204036ce:	7179                	addi	sp,sp,-48
204036d0:	d606                	sw	ra,44(sp)
204036d2:	d422                	sw	s0,40(sp)
204036d4:	d226                	sw	s1,36(sp)
204036d6:	1800                	addi	s0,sp,48
204036d8:	fca42e23          	sw	a0,-36(s0)
204036dc:	fcb42823          	sw	a1,-48(s0)
204036e0:	fcc42a23          	sw	a2,-44(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
204036e4:	57fd                	li	a5,-1
204036e6:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204036ea:	fdc42503          	lw	a0,-36(s0)
204036ee:	a3ffe0ef          	jal	ra,2040212c <__metal_driver_cpu_interrupt_controller>
204036f2:	fea42423          	sw	a0,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
204036f6:	fe842783          	lw	a5,-24(s0)
204036fa:	cf8d                	beqz	a5,20403734 <__metal_driver_cpu_mtimecmp_set+0x66>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
204036fc:	fe842783          	lw	a5,-24(s0)
20403700:	13c7a783          	lw	a5,316(a5)
20403704:	fef42223          	sw	a5,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
20403708:	fe442783          	lw	a5,-28(s0)
2040370c:	c785                	beqz	a5,20403734 <__metal_driver_cpu_mtimecmp_set+0x66>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
2040370e:	fe442783          	lw	a5,-28(s0)
20403712:	439c                	lw	a5,0(a5)
20403714:	47a4                	lw	s1,72(a5)
20403716:	fdc42503          	lw	a0,-36(s0)
2040371a:	9c5fe0ef          	jal	ra,204020de <__metal_driver_cpu_hartid>
2040371e:	87aa                	mv	a5,a0
20403720:	fd042603          	lw	a2,-48(s0)
20403724:	fd442683          	lw	a3,-44(s0)
20403728:	85be                	mv	a1,a5
2040372a:	fe442503          	lw	a0,-28(s0)
2040372e:	9482                	jalr	s1
20403730:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
20403734:	fec42783          	lw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:815
}
20403738:	853e                	mv	a0,a5
2040373a:	50b2                	lw	ra,44(sp)
2040373c:	5422                	lw	s0,40(sp)
2040373e:	5492                	lw	s1,36(sp)
20403740:	6145                	addi	sp,sp,48
20403742:	8082                	ret

20403744 <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
20403744:	1101                	addi	sp,sp,-32
20403746:	ce22                	sw	s0,28(sp)
20403748:	1000                	addi	s0,sp,32
2040374a:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
2040374e:	81018793          	addi	a5,gp,-2032 # 80000798 <__metal_dt_clint_2000000>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
20403752:	853e                	mv	a0,a5
20403754:	4472                	lw	s0,28(sp)
20403756:	6105                	addi	sp,sp,32
20403758:	8082                	ret

2040375a <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
2040375a:	1101                	addi	sp,sp,-32
2040375c:	ce22                	sw	s0,28(sp)
2040375e:	1000                	addi	s0,sp,32
20403760:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
20403764:	479d                	li	a5,7
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:835
}
20403766:	853e                	mv	a0,a5
20403768:	4472                	lw	s0,28(sp)
2040376a:	6105                	addi	sp,sp,32
2040376c:	8082                	ret

2040376e <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
2040376e:	1101                	addi	sp,sp,-32
20403770:	ce22                	sw	s0,28(sp)
20403772:	1000                	addi	s0,sp,32
20403774:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20403778:	81018793          	addi	a5,gp,-2032 # 80000798 <__metal_dt_clint_2000000>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
2040377c:	853e                	mv	a0,a5
2040377e:	4472                	lw	s0,28(sp)
20403780:	6105                	addi	sp,sp,32
20403782:	8082                	ret

20403784 <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
20403784:	1101                	addi	sp,sp,-32
20403786:	ce22                	sw	s0,28(sp)
20403788:	1000                	addi	s0,sp,32
2040378a:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
2040378e:	478d                	li	a5,3
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:855
}
20403790:	853e                	mv	a0,a5
20403792:	4472                	lw	s0,28(sp)
20403794:	6105                	addi	sp,sp,32
20403796:	8082                	ret

20403798 <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20403798:	7179                	addi	sp,sp,-48
2040379a:	d606                	sw	ra,44(sp)
2040379c:	d422                	sw	s0,40(sp)
2040379e:	1800                	addi	s0,sp,48
204037a0:	fca42e23          	sw	a0,-36(s0)
204037a4:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
204037a8:	57fd                	li	a5,-1
204037aa:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204037ae:	fdc42503          	lw	a0,-36(s0)
204037b2:	97bfe0ef          	jal	ra,2040212c <__metal_driver_cpu_interrupt_controller>
204037b6:	fea42423          	sw	a0,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
204037ba:	fe842783          	lw	a5,-24(s0)
204037be:	c79d                	beqz	a5,204037ec <__metal_driver_cpu_set_sw_ipi+0x54>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
204037c0:	fe842783          	lw	a5,-24(s0)
204037c4:	0dc7a783          	lw	a5,220(a5)
204037c8:	fef42223          	sw	a5,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
204037cc:	fe442783          	lw	a5,-28(s0)
204037d0:	cf91                	beqz	a5,204037ec <__metal_driver_cpu_set_sw_ipi+0x54>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
204037d2:	fe442783          	lw	a5,-28(s0)
204037d6:	439c                	lw	a5,0(a5)
204037d8:	43f8                	lw	a4,68(a5)
204037da:	fd840793          	addi	a5,s0,-40
204037de:	863e                	mv	a2,a5
204037e0:	458d                	li	a1,3
204037e2:	fe442503          	lw	a0,-28(s0)
204037e6:	9702                	jalr	a4
204037e8:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
204037ec:	fec42783          	lw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:872
}
204037f0:	853e                	mv	a0,a5
204037f2:	50b2                	lw	ra,44(sp)
204037f4:	5422                	lw	s0,40(sp)
204037f6:	6145                	addi	sp,sp,48
204037f8:	8082                	ret

204037fa <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
204037fa:	7179                	addi	sp,sp,-48
204037fc:	d606                	sw	ra,44(sp)
204037fe:	d422                	sw	s0,40(sp)
20403800:	1800                	addi	s0,sp,48
20403802:	fca42e23          	sw	a0,-36(s0)
20403806:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
2040380a:	57fd                	li	a5,-1
2040380c:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403810:	fdc42503          	lw	a0,-36(s0)
20403814:	919fe0ef          	jal	ra,2040212c <__metal_driver_cpu_interrupt_controller>
20403818:	fea42423          	sw	a0,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
2040381c:	fe842783          	lw	a5,-24(s0)
20403820:	c79d                	beqz	a5,2040384e <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403822:	fe842783          	lw	a5,-24(s0)
20403826:	0dc7a783          	lw	a5,220(a5)
2040382a:	fef42223          	sw	a5,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
2040382e:	fe442783          	lw	a5,-28(s0)
20403832:	cf91                	beqz	a5,2040384e <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
20403834:	fe442783          	lw	a5,-28(s0)
20403838:	439c                	lw	a5,0(a5)
2040383a:	43f8                	lw	a4,68(a5)
2040383c:	fd840793          	addi	a5,s0,-40
20403840:	863e                	mv	a2,a5
20403842:	4589                	li	a1,2
20403844:	fe442503          	lw	a0,-28(s0)
20403848:	9702                	jalr	a4
2040384a:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
2040384e:	fec42783          	lw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:889
}
20403852:	853e                	mv	a0,a5
20403854:	50b2                	lw	ra,44(sp)
20403856:	5422                	lw	s0,40(sp)
20403858:	6145                	addi	sp,sp,48
2040385a:	8082                	ret

2040385c <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
2040385c:	7179                	addi	sp,sp,-48
2040385e:	d606                	sw	ra,44(sp)
20403860:	d422                	sw	s0,40(sp)
20403862:	1800                	addi	s0,sp,48
20403864:	fca42e23          	sw	a0,-36(s0)
20403868:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
2040386c:	fe042623          	sw	zero,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403870:	fdc42503          	lw	a0,-36(s0)
20403874:	8b9fe0ef          	jal	ra,2040212c <__metal_driver_cpu_interrupt_controller>
20403878:	fea42423          	sw	a0,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
2040387c:	fe842783          	lw	a5,-24(s0)
20403880:	c79d                	beqz	a5,204038ae <__metal_driver_cpu_get_msip+0x52>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403882:	fe842783          	lw	a5,-24(s0)
20403886:	0dc7a783          	lw	a5,220(a5)
2040388a:	fef42223          	sw	a5,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
2040388e:	fe442783          	lw	a5,-28(s0)
20403892:	cf91                	beqz	a5,204038ae <__metal_driver_cpu_get_msip+0x52>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
20403894:	fe442783          	lw	a5,-28(s0)
20403898:	439c                	lw	a5,0(a5)
2040389a:	43f8                	lw	a4,68(a5)
2040389c:	fd840793          	addi	a5,s0,-40
204038a0:	863e                	mv	a2,a5
204038a2:	4591                	li	a1,4
204038a4:	fe442503          	lw	a0,-28(s0)
204038a8:	9702                	jalr	a4
204038aa:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
204038ae:	fec42783          	lw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:906
}
204038b2:	853e                	mv	a0,a5
204038b4:	50b2                	lw	ra,44(sp)
204038b6:	5422                	lw	s0,40(sp)
204038b8:	6145                	addi	sp,sp,48
204038ba:	8082                	ret

204038bc <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
204038bc:	1101                	addi	sp,sp,-32
204038be:	ce06                	sw	ra,28(sp)
204038c0:	cc22                	sw	s0,24(sp)
204038c2:	1000                	addi	s0,sp,32
204038c4:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
204038c8:	fec42503          	lw	a0,-20(s0)
204038cc:	861fe0ef          	jal	ra,2040212c <__metal_driver_cpu_interrupt_controller>
204038d0:	87aa                	mv	a5,a0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:912
}
204038d2:	853e                	mv	a0,a5
204038d4:	40f2                	lw	ra,28(sp)
204038d6:	4462                	lw	s0,24(sp)
204038d8:	6105                	addi	sp,sp,32
204038da:	8082                	ret

204038dc <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
204038dc:	7179                	addi	sp,sp,-48
204038de:	d606                	sw	ra,44(sp)
204038e0:	d422                	sw	s0,40(sp)
204038e2:	1800                	addi	s0,sp,48
204038e4:	fca42e23          	sw	a0,-36(s0)
204038e8:	fcb42c23          	sw	a1,-40(s0)
204038ec:	fcc42a23          	sw	a2,-44(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204038f0:	fdc42503          	lw	a0,-36(s0)
204038f4:	839fe0ef          	jal	ra,2040212c <__metal_driver_cpu_interrupt_controller>
204038f8:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
204038fc:	fec42783          	lw	a5,-20(s0)
20403900:	cb99                	beqz	a5,20403916 <__metal_driver_cpu_exception_register+0x3a>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
20403902:	fd442603          	lw	a2,-44(s0)
20403906:	fd842583          	lw	a1,-40(s0)
2040390a:	fec42503          	lw	a0,-20(s0)
2040390e:	8e1ff0ef          	jal	ra,204031ee <__metal_exception_register>
20403912:	87aa                	mv	a5,a0
20403914:	a011                	j	20403918 <__metal_driver_cpu_exception_register+0x3c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
20403916:	57fd                	li	a5,-1
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:944
}
20403918:	853e                	mv	a0,a5
2040391a:	50b2                	lw	ra,44(sp)
2040391c:	5422                	lw	s0,40(sp)
2040391e:	6145                	addi	sp,sp,48
20403920:	8082                	ret

20403922 <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
20403922:	1101                	addi	sp,sp,-32
20403924:	ce22                	sw	s0,28(sp)
20403926:	1000                	addi	s0,sp,32
20403928:	fea42623          	sw	a0,-20(s0)
2040392c:	feb42423          	sw	a1,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
20403930:	fe842783          	lw	a5,-24(s0)
20403934:	0007d783          	lhu	a5,0(a5)
20403938:	0037f713          	andi	a4,a5,3
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
2040393c:	478d                	li	a5,3
2040393e:	00f71463          	bne	a4,a5,20403946 <__metal_driver_cpu_get_instruction_length+0x24>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
20403942:	4791                	li	a5,4
20403944:	a011                	j	20403948 <__metal_driver_cpu_get_instruction_length+0x26>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
20403946:	4789                	li	a5,2
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 5)
}
20403948:	853e                	mv	a0,a5
2040394a:	4472                	lw	s0,28(sp)
2040394c:	6105                	addi	sp,sp,32
2040394e:	8082                	ret

20403950 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
20403950:	7179                	addi	sp,sp,-48
20403952:	d622                	sw	s0,44(sp)
20403954:	1800                	addi	s0,sp,48
20403956:	fca42e23          	sw	a0,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
2040395a:	341027f3          	csrr	a5,mepc
2040395e:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
20403962:	fec42783          	lw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:962
}
20403966:	853e                	mv	a0,a5
20403968:	5432                	lw	s0,44(sp)
2040396a:	6145                	addi	sp,sp,48
2040396c:	8082                	ret

2040396e <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
2040396e:	1101                	addi	sp,sp,-32
20403970:	ce22                	sw	s0,28(sp)
20403972:	1000                	addi	s0,sp,32
20403974:	fea42623          	sw	a0,-20(s0)
20403978:	feb42423          	sw	a1,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
2040397c:	fe842783          	lw	a5,-24(s0)
20403980:	34179073          	csrw	mepc,a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
20403984:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_cpu.c:968
}
20403986:	853e                	mv	a0,a5
20403988:	4472                	lw	s0,28(sp)
2040398a:	6105                	addi	sp,sp,32
2040398c:	8082                	ret

2040398e <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:290



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
2040398e:	1101                	addi	sp,sp,-32
20403990:	ce22                	sw	s0,28(sp)
20403992:	1000                	addi	s0,sp,32
20403994:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:291
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403998:	fec42703          	lw	a4,-20(s0)
2040399c:	800007b7          	lui	a5,0x80000
204039a0:	44078793          	addi	a5,a5,1088 # 80000440 <metal_segment_heap_target_end+0xffffefcc>
204039a4:	00f71563          	bne	a4,a5,204039ae <__metal_driver_sifive_plic0_control_base+0x20>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:292
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
204039a8:	0c0007b7          	lui	a5,0xc000
204039ac:	a011                	j	204039b0 <__metal_driver_sifive_plic0_control_base+0x22>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:295
	}
	else {
		return 0;
204039ae:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:297
	}
}
204039b0:	853e                	mv	a0,a5
204039b2:	4472                	lw	s0,28(sp)
204039b4:	6105                	addi	sp,sp,32
204039b6:	8082                	ret

204039b8 <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:310
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
204039b8:	1101                	addi	sp,sp,-32
204039ba:	ce22                	sw	s0,28(sp)
204039bc:	1000                	addi	s0,sp,32
204039be:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:311
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
204039c2:	fec42703          	lw	a4,-20(s0)
204039c6:	800007b7          	lui	a5,0x80000
204039ca:	44078793          	addi	a5,a5,1088 # 80000440 <metal_segment_heap_target_end+0xffffefcc>
204039ce:	00f71463          	bne	a4,a5,204039d6 <__metal_driver_sifive_plic0_num_interrupts+0x1e>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:312
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
204039d2:	47ed                	li	a5,27
204039d4:	a011                	j	204039d8 <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:315
	}
	else {
		return 0;
204039d6:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:317
	}
}
204039d8:	853e                	mv	a0,a5
204039da:	4472                	lw	s0,28(sp)
204039dc:	6105                	addi	sp,sp,32
204039de:	8082                	ret

204039e0 <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:320

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
204039e0:	1101                	addi	sp,sp,-32
204039e2:	ce22                	sw	s0,28(sp)
204039e4:	1000                	addi	s0,sp,32
204039e6:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:321
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
204039ea:	fec42703          	lw	a4,-20(s0)
204039ee:	800007b7          	lui	a5,0x80000
204039f2:	44078793          	addi	a5,a5,1088 # 80000440 <metal_segment_heap_target_end+0xffffefcc>
204039f6:	00f71463          	bne	a4,a5,204039fe <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:322
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
204039fa:	479d                	li	a5,7
204039fc:	a011                	j	20403a00 <__metal_driver_sifive_plic0_max_priority+0x20>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:325
	}
	else {
		return 0;
204039fe:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:327
	}
}
20403a00:	853e                	mv	a0,a5
20403a02:	4472                	lw	s0,28(sp)
20403a04:	6105                	addi	sp,sp,32
20403a06:	8082                	ret

20403a08 <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:330

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20403a08:	1101                	addi	sp,sp,-32
20403a0a:	ce22                	sw	s0,28(sp)
20403a0c:	1000                	addi	s0,sp,32
20403a0e:	fea42623          	sw	a0,-20(s0)
20403a12:	feb42423          	sw	a1,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:331
	if (idx == 0) {
20403a16:	fe842783          	lw	a5,-24(s0)
20403a1a:	e791                	bnez	a5,20403a26 <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:332
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20403a1c:	800007b7          	lui	a5,0x80000
20403a20:	08878793          	addi	a5,a5,136 # 80000088 <metal_segment_heap_target_end+0xffffec14>
20403a24:	a011                	j	20403a28 <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:335
	}
	else {
		return NULL;
20403a26:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:337
	}
}
20403a28:	853e                	mv	a0,a5
20403a2a:	4472                	lw	s0,28(sp)
20403a2c:	6105                	addi	sp,sp,32
20403a2e:	8082                	ret

20403a30 <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:340

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20403a30:	1101                	addi	sp,sp,-32
20403a32:	ce22                	sw	s0,28(sp)
20403a34:	1000                	addi	s0,sp,32
20403a36:	fea42623          	sw	a0,-20(s0)
20403a3a:	feb42423          	sw	a1,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:341
	if (idx == 0) {
20403a3e:	fe842783          	lw	a5,-24(s0)
20403a42:	e399                	bnez	a5,20403a48 <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:342
		return 11;
20403a44:	47ad                	li	a5,11
20403a46:	a011                	j	20403a4a <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:345
	}
	else {
		return 0;
20403a48:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:347
	}
}
20403a4a:	853e                	mv	a0,a5
20403a4c:	4472                	lw	s0,28(sp)
20403a4e:	6105                	addi	sp,sp,32
20403a50:	8082                	ret

20403a52 <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
20403a52:	7179                	addi	sp,sp,-48
20403a54:	d606                	sw	ra,44(sp)
20403a56:	d422                	sw	s0,40(sp)
20403a58:	1800                	addi	s0,sp,48
20403a5a:	fca42e23          	sw	a0,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403a5e:	fdc42503          	lw	a0,-36(s0)
20403a62:	3735                	jal	2040398e <__metal_driver_sifive_plic0_control_base>
20403a64:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403a68:	fec42703          	lw	a4,-20(s0)
20403a6c:	002007b7          	lui	a5,0x200
20403a70:	0791                	addi	a5,a5,4
20403a72:	97ba                	add	a5,a5,a4
20403a74:	439c                	lw	a5,0(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
20403a76:	853e                	mv	a0,a5
20403a78:	50b2                	lw	ra,44(sp)
20403a7a:	5422                	lw	s0,40(sp)
20403a7c:	6145                	addi	sp,sp,48
20403a7e:	8082                	ret

20403a80 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
20403a80:	7179                	addi	sp,sp,-48
20403a82:	d606                	sw	ra,44(sp)
20403a84:	d422                	sw	s0,40(sp)
20403a86:	1800                	addi	s0,sp,48
20403a88:	fca42e23          	sw	a0,-36(s0)
20403a8c:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403a90:	fdc42503          	lw	a0,-36(s0)
20403a94:	3ded                	jal	2040398e <__metal_driver_sifive_plic0_control_base>
20403a96:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403a9a:	fec42703          	lw	a4,-20(s0)
20403a9e:	002007b7          	lui	a5,0x200
20403aa2:	0791                	addi	a5,a5,4
20403aa4:	97ba                	add	a5,a5,a4
20403aa6:	873e                	mv	a4,a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
20403aa8:	fd842783          	lw	a5,-40(s0)
20403aac:	c31c                	sw	a5,0(a4)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:26
}
20403aae:	0001                	nop
20403ab0:	50b2                	lw	ra,44(sp)
20403ab2:	5422                	lw	s0,40(sp)
20403ab4:	6145                	addi	sp,sp,48
20403ab6:	8082                	ret

20403ab8 <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
20403ab8:	7179                	addi	sp,sp,-48
20403aba:	d606                	sw	ra,44(sp)
20403abc:	d422                	sw	s0,40(sp)
20403abe:	1800                	addi	s0,sp,48
20403ac0:	fca42e23          	sw	a0,-36(s0)
20403ac4:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403ac8:	fdc42503          	lw	a0,-36(s0)
20403acc:	35c9                	jal	2040398e <__metal_driver_sifive_plic0_control_base>
20403ace:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403ad2:	fec42703          	lw	a4,-20(s0)
20403ad6:	002007b7          	lui	a5,0x200
20403ada:	97ba                	add	a5,a5,a4
20403adc:	873e                	mv	a4,a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
20403ade:	fd842783          	lw	a5,-40(s0)
20403ae2:	c31c                	sw	a5,0(a4)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
20403ae4:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:34
}
20403ae6:	853e                	mv	a0,a5
20403ae8:	50b2                	lw	ra,44(sp)
20403aea:	5422                	lw	s0,40(sp)
20403aec:	6145                	addi	sp,sp,48
20403aee:	8082                	ret

20403af0 <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
20403af0:	7179                	addi	sp,sp,-48
20403af2:	d606                	sw	ra,44(sp)
20403af4:	d422                	sw	s0,40(sp)
20403af6:	1800                	addi	s0,sp,48
20403af8:	fca42e23          	sw	a0,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403afc:	fdc42503          	lw	a0,-36(s0)
20403b00:	3579                	jal	2040398e <__metal_driver_sifive_plic0_control_base>
20403b02:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403b06:	fec42703          	lw	a4,-20(s0)
20403b0a:	002007b7          	lui	a5,0x200
20403b0e:	97ba                	add	a5,a5,a4
20403b10:	439c                	lw	a5,0(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
20403b12:	853e                	mv	a0,a5
20403b14:	50b2                	lw	ra,44(sp)
20403b16:	5422                	lw	s0,40(sp)
20403b18:	6145                	addi	sp,sp,48
20403b1a:	8082                	ret

20403b1c <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
20403b1c:	7179                	addi	sp,sp,-48
20403b1e:	d606                	sw	ra,44(sp)
20403b20:	d422                	sw	s0,40(sp)
20403b22:	1800                	addi	s0,sp,48
20403b24:	fca42e23          	sw	a0,-36(s0)
20403b28:	fcb42c23          	sw	a1,-40(s0)
20403b2c:	fcc42a23          	sw	a2,-44(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
20403b30:	fdc42503          	lw	a0,-36(s0)
20403b34:	3da9                	jal	2040398e <__metal_driver_sifive_plic0_control_base>
20403b36:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
20403b3a:	fdc42503          	lw	a0,-36(s0)
20403b3e:	354d                	jal	204039e0 <__metal_driver_sifive_plic0_max_priority>
20403b40:	87aa                	mv	a5,a0
20403b42:	fef42423          	sw	a5,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
20403b46:	fe842783          	lw	a5,-24(s0)
20403b4a:	c785                	beqz	a5,20403b72 <__metal_plic0_set_priority+0x56>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
20403b4c:	fd442703          	lw	a4,-44(s0)
20403b50:	fe842783          	lw	a5,-24(s0)
20403b54:	00f77f63          	bgeu	a4,a5,20403b72 <__metal_plic0_set_priority+0x56>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403b58:	fd842783          	lw	a5,-40(s0)
20403b5c:	078a                	slli	a5,a5,0x2
20403b5e:	873e                	mv	a4,a5
20403b60:	fec42783          	lw	a5,-20(s0)
20403b64:	97ba                	add	a5,a5,a4
20403b66:	873e                	mv	a4,a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
20403b68:	fd442783          	lw	a5,-44(s0)
20403b6c:	c31c                	sw	a5,0(a4)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
20403b6e:	4781                	li	a5,0
20403b70:	a011                	j	20403b74 <__metal_plic0_set_priority+0x58>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
20403b72:	57fd                	li	a5,-1
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:55
}
20403b74:	853e                	mv	a0,a5
20403b76:	50b2                	lw	ra,44(sp)
20403b78:	5422                	lw	s0,40(sp)
20403b7a:	6145                	addi	sp,sp,48
20403b7c:	8082                	ret

20403b7e <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
20403b7e:	7179                	addi	sp,sp,-48
20403b80:	d606                	sw	ra,44(sp)
20403b82:	d422                	sw	s0,40(sp)
20403b84:	1800                	addi	s0,sp,48
20403b86:	fca42e23          	sw	a0,-36(s0)
20403b8a:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403b8e:	fdc42503          	lw	a0,-36(s0)
20403b92:	3bf5                	jal	2040398e <__metal_driver_sifive_plic0_control_base>
20403b94:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403b98:	fd842783          	lw	a5,-40(s0)
20403b9c:	078a                	slli	a5,a5,0x2
20403b9e:	873e                	mv	a4,a5
20403ba0:	fec42783          	lw	a5,-20(s0)
20403ba4:	97ba                	add	a5,a5,a4
20403ba6:	439c                	lw	a5,0(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
20403ba8:	853e                	mv	a0,a5
20403baa:	50b2                	lw	ra,44(sp)
20403bac:	5422                	lw	s0,40(sp)
20403bae:	6145                	addi	sp,sp,48
20403bb0:	8082                	ret

20403bb2 <__metal_plic0_enable>:
__metal_plic0_enable():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
20403bb2:	7179                	addi	sp,sp,-48
20403bb4:	d606                	sw	ra,44(sp)
20403bb6:	d422                	sw	s0,40(sp)
20403bb8:	1800                	addi	s0,sp,48
20403bba:	fca42e23          	sw	a0,-36(s0)
20403bbe:	fcb42c23          	sw	a1,-40(s0)
20403bc2:	fcc42a23          	sw	a2,-44(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403bc6:	fdc42503          	lw	a0,-36(s0)
20403bca:	33d1                	jal	2040398e <__metal_driver_sifive_plic0_control_base>
20403bcc:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403bd0:	fd842783          	lw	a5,-40(s0)
20403bd4:	8795                	srai	a5,a5,0x5
20403bd6:	078a                	slli	a5,a5,0x2
20403bd8:	873e                	mv	a4,a5
20403bda:	fec42783          	lw	a5,-20(s0)
20403bde:	973e                	add	a4,a4,a5
20403be0:	6789                	lui	a5,0x2
20403be2:	97ba                	add	a5,a5,a4
20403be4:	439c                	lw	a5,0(a5)
20403be6:	fef42423          	sw	a5,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20403bea:	fd442783          	lw	a5,-44(s0)
20403bee:	cf81                	beqz	a5,20403c06 <__metal_plic0_enable+0x54>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
20403bf0:	fd842783          	lw	a5,-40(s0)
20403bf4:	8bfd                	andi	a5,a5,31
20403bf6:	4705                	li	a4,1
20403bf8:	00f717b3          	sll	a5,a4,a5
20403bfc:	873e                	mv	a4,a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20403bfe:	fe842783          	lw	a5,-24(s0)
20403c02:	8fd9                	or	a5,a5,a4
20403c04:	a829                	j	20403c1e <__metal_plic0_enable+0x6c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
20403c06:	fd842783          	lw	a5,-40(s0)
20403c0a:	8bfd                	andi	a5,a5,31
20403c0c:	4705                	li	a4,1
20403c0e:	00f717b3          	sll	a5,a4,a5
20403c12:	fff7c793          	not	a5,a5
20403c16:	873e                	mv	a4,a5
20403c18:	fe842783          	lw	a5,-24(s0)
20403c1c:	8ff9                	and	a5,a5,a4
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403c1e:	fd842703          	lw	a4,-40(s0)
20403c22:	8715                	srai	a4,a4,0x5
20403c24:	070a                	slli	a4,a4,0x2
20403c26:	86ba                	mv	a3,a4
20403c28:	fec42703          	lw	a4,-20(s0)
20403c2c:	96ba                	add	a3,a3,a4
20403c2e:	6709                	lui	a4,0x2
20403c30:	9736                	add	a4,a4,a3
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
20403c32:	c31c                	sw	a5,0(a4)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:79
}
20403c34:	0001                	nop
20403c36:	50b2                	lw	ra,44(sp)
20403c38:	5422                	lw	s0,40(sp)
20403c3a:	6145                	addi	sp,sp,48
20403c3c:	8082                	ret

20403c3e <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
20403c3e:	1101                	addi	sp,sp,-32
20403c40:	ce06                	sw	ra,28(sp)
20403c42:	cc22                	sw	s0,24(sp)
20403c44:	1000                	addi	s0,sp,32
20403c46:	fea42623          	sw	a0,-20(s0)
20403c4a:	feb42423          	sw	a1,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
20403c4e:	12c00513          	li	a0,300
20403c52:	415010ef          	jal	ra,20405866 <metal_shutdown>

20403c56 <__metal_plic0_handler>:
__metal_plic0_handler():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
20403c56:	7179                	addi	sp,sp,-48
20403c58:	d606                	sw	ra,44(sp)
20403c5a:	d422                	sw	s0,40(sp)
20403c5c:	1800                	addi	s0,sp,48
20403c5e:	fca42e23          	sw	a0,-36(s0)
20403c62:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
20403c66:	fd842783          	lw	a5,-40(s0)
20403c6a:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
20403c6e:	fec42503          	lw	a0,-20(s0)
20403c72:	33c5                	jal	20403a52 <__metal_plic0_claim_interrupt>
20403c74:	fea42423          	sw	a0,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
20403c78:	fec42503          	lw	a0,-20(s0)
20403c7c:	3b35                	jal	204039b8 <__metal_driver_sifive_plic0_num_interrupts>
20403c7e:	87aa                	mv	a5,a0
20403c80:	fef42223          	sw	a5,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
20403c84:	fe842703          	lw	a4,-24(s0)
20403c88:	fe442783          	lw	a5,-28(s0)
20403c8c:	04f77263          	bgeu	a4,a5,20403cd0 <__metal_plic0_handler+0x7a>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
20403c90:	fec42703          	lw	a4,-20(s0)
20403c94:	fe842783          	lw	a5,-24(s0)
20403c98:	078a                	slli	a5,a5,0x2
20403c9a:	97ba                	add	a5,a5,a4
20403c9c:	479c                	lw	a5,8(a5)
20403c9e:	cb8d                	beqz	a5,20403cd0 <__metal_plic0_handler+0x7a>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
20403ca0:	fec42703          	lw	a4,-20(s0)
20403ca4:	fe842783          	lw	a5,-24(s0)
20403ca8:	078a                	slli	a5,a5,0x2
20403caa:	97ba                	add	a5,a5,a4
20403cac:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
20403cb0:	fe842603          	lw	a2,-24(s0)
20403cb4:	fec42683          	lw	a3,-20(s0)
20403cb8:	fe842703          	lw	a4,-24(s0)
20403cbc:	87ba                	mv	a5,a4
20403cbe:	0786                	slli	a5,a5,0x1
20403cc0:	97ba                	add	a5,a5,a4
20403cc2:	078e                	slli	a5,a5,0x3
20403cc4:	97b6                	add	a5,a5,a3
20403cc6:	0887a783          	lw	a5,136(a5)
20403cca:	85be                	mv	a1,a5
20403ccc:	8532                	mv	a0,a2
20403cce:	9802                	jalr	a6
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
20403cd0:	fe842583          	lw	a1,-24(s0)
20403cd4:	fec42503          	lw	a0,-20(s0)
20403cd8:	3365                	jal	20403a80 <__metal_plic0_complete_interrupt>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:97
}
20403cda:	0001                	nop
20403cdc:	50b2                	lw	ra,44(sp)
20403cde:	5422                	lw	s0,40(sp)
20403ce0:	6145                	addi	sp,sp,48
20403ce2:	8082                	ret

20403ce4 <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
20403ce4:	7139                	addi	sp,sp,-64
20403ce6:	de06                	sw	ra,60(sp)
20403ce8:	dc22                	sw	s0,56(sp)
20403cea:	0080                	addi	s0,sp,64
20403cec:	fca42623          	sw	a0,-52(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20403cf0:	fcc42783          	lw	a5,-52(s0)
20403cf4:	fef42223          	sw	a5,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
20403cf8:	fe442783          	lw	a5,-28(s0)
20403cfc:	43dc                	lw	a5,4(a5)
20403cfe:	10079c63          	bnez	a5,20403e16 <__metal_driver_riscv_plic0_init+0x132>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20403d02:	fe042623          	sw	zero,-20(s0)
20403d06:	a201                	j	20403e06 <__metal_driver_riscv_plic0_init+0x122>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
20403d08:	fcc42503          	lw	a0,-52(s0)
20403d0c:	3175                	jal	204039b8 <__metal_driver_sifive_plic0_num_interrupts>
20403d0e:	fea42023          	sw	a0,-32(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
20403d12:	fec42583          	lw	a1,-20(s0)
20403d16:	fcc42503          	lw	a0,-52(s0)
20403d1a:	31fd                	jal	20403a08 <__metal_driver_sifive_plic0_interrupt_parents>
20403d1c:	fca42e23          	sw	a0,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
20403d20:	fec42583          	lw	a1,-20(s0)
20403d24:	fcc42503          	lw	a0,-52(s0)
20403d28:	3321                	jal	20403a30 <__metal_driver_sifive_plic0_interrupt_lines>
20403d2a:	fca42c23          	sw	a0,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
20403d2e:	fdc42783          	lw	a5,-36(s0)
20403d32:	439c                	lw	a5,0(a5)
20403d34:	439c                	lw	a5,0(a5)
20403d36:	fdc42503          	lw	a0,-36(s0)
20403d3a:	9782                	jalr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
20403d3c:	fe042423          	sw	zero,-24(s0)
20403d40:	a085                	j	20403da0 <__metal_driver_riscv_plic0_init+0xbc>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
20403d42:	4601                	li	a2,0
20403d44:	fe842583          	lw	a1,-24(s0)
20403d48:	fe442503          	lw	a0,-28(s0)
20403d4c:	359d                	jal	20403bb2 <__metal_plic0_enable>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
20403d4e:	4601                	li	a2,0
20403d50:	fe842583          	lw	a1,-24(s0)
20403d54:	fcc42503          	lw	a0,-52(s0)
20403d58:	33d1                	jal	20403b1c <__metal_plic0_set_priority>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
20403d5a:	fe442703          	lw	a4,-28(s0)
20403d5e:	fe842783          	lw	a5,-24(s0)
20403d62:	078a                	slli	a5,a5,0x2
20403d64:	97ba                	add	a5,a5,a4
20403d66:	0007a423          	sw	zero,8(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
20403d6a:	fe442683          	lw	a3,-28(s0)
20403d6e:	fe842703          	lw	a4,-24(s0)
20403d72:	87ba                	mv	a5,a4
20403d74:	0786                	slli	a5,a5,0x1
20403d76:	97ba                	add	a5,a5,a4
20403d78:	078e                	slli	a5,a5,0x3
20403d7a:	97b6                	add	a5,a5,a3
20403d7c:	0807a223          	sw	zero,132(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
20403d80:	fe442683          	lw	a3,-28(s0)
20403d84:	fe842703          	lw	a4,-24(s0)
20403d88:	87ba                	mv	a5,a4
20403d8a:	0786                	slli	a5,a5,0x1
20403d8c:	97ba                	add	a5,a5,a4
20403d8e:	078e                	slli	a5,a5,0x3
20403d90:	97b6                	add	a5,a5,a3
20403d92:	0807a423          	sw	zero,136(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
20403d96:	fe842783          	lw	a5,-24(s0)
20403d9a:	0785                	addi	a5,a5,1
20403d9c:	fef42423          	sw	a5,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
20403da0:	fe842703          	lw	a4,-24(s0)
20403da4:	fe042783          	lw	a5,-32(s0)
20403da8:	f8f74de3          	blt	a4,a5,20403d42 <__metal_driver_riscv_plic0_init+0x5e>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
20403dac:	4581                	li	a1,0
20403dae:	fcc42503          	lw	a0,-52(s0)
20403db2:	3319                	jal	20403ab8 <__metal_plic0_set_threshold>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
20403db4:	fdc42783          	lw	a5,-36(s0)
20403db8:	439c                	lw	a5,0(a5)
20403dba:	4fdc                	lw	a5,28(a5)
20403dbc:	fe442683          	lw	a3,-28(s0)
20403dc0:	4601                	li	a2,0
20403dc2:	fd842583          	lw	a1,-40(s0)
20403dc6:	fdc42503          	lw	a0,-36(s0)
20403dca:	9782                	jalr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
20403dcc:	fdc42783          	lw	a5,-36(s0)
20403dd0:	439c                	lw	a5,0(a5)
20403dd2:	4fd8                	lw	a4,28(a5)
20403dd4:	fe442683          	lw	a3,-28(s0)
20403dd8:	204047b7          	lui	a5,0x20404
20403ddc:	c5678613          	addi	a2,a5,-938 # 20403c56 <__metal_plic0_handler>
20403de0:	fd842583          	lw	a1,-40(s0)
20403de4:	fdc42503          	lw	a0,-36(s0)
20403de8:	9702                	jalr	a4
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
20403dea:	fdc42783          	lw	a5,-36(s0)
20403dee:	439c                	lw	a5,0(a5)
20403df0:	53dc                	lw	a5,36(a5)
20403df2:	fd842583          	lw	a1,-40(s0)
20403df6:	fdc42503          	lw	a0,-36(s0)
20403dfa:	9782                	jalr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20403dfc:	fec42783          	lw	a5,-20(s0)
20403e00:	0785                	addi	a5,a5,1
20403e02:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
20403e06:	fec42783          	lw	a5,-20(s0)
20403e0a:	eef05fe3          	blez	a5,20403d08 <__metal_driver_riscv_plic0_init+0x24>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
20403e0e:	fe442783          	lw	a5,-28(s0)
20403e12:	4705                	li	a4,1
20403e14:	c3d8                	sw	a4,4(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
20403e16:	0001                	nop
20403e18:	50f2                	lw	ra,60(sp)
20403e1a:	5462                	lw	s0,56(sp)
20403e1c:	6121                	addi	sp,sp,64
20403e1e:	8082                	ret

20403e20 <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
20403e20:	7179                	addi	sp,sp,-48
20403e22:	d606                	sw	ra,44(sp)
20403e24:	d422                	sw	s0,40(sp)
20403e26:	1800                	addi	s0,sp,48
20403e28:	fca42e23          	sw	a0,-36(s0)
20403e2c:	fcb42c23          	sw	a1,-40(s0)
20403e30:	fcc42a23          	sw	a2,-44(s0)
20403e34:	fcd42823          	sw	a3,-48(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20403e38:	fdc42783          	lw	a5,-36(s0)
20403e3c:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20403e40:	fdc42503          	lw	a0,-36(s0)
20403e44:	b75ff0ef          	jal	ra,204039b8 <__metal_driver_sifive_plic0_num_interrupts>
20403e48:	872a                	mv	a4,a0
20403e4a:	fd842783          	lw	a5,-40(s0)
20403e4e:	00e7c463          	blt	a5,a4,20403e56 <__metal_driver_riscv_plic0_register+0x36>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
20403e52:	57fd                	li	a5,-1
20403e54:	a049                	j	20403ed6 <__metal_driver_riscv_plic0_register+0xb6>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
20403e56:	fd442783          	lw	a5,-44(s0)
20403e5a:	cf95                	beqz	a5,20403e96 <__metal_driver_riscv_plic0_register+0x76>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
20403e5c:	4609                	li	a2,2
20403e5e:	fd842583          	lw	a1,-40(s0)
20403e62:	fdc42503          	lw	a0,-36(s0)
20403e66:	395d                	jal	20403b1c <__metal_plic0_set_priority>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
20403e68:	fec42703          	lw	a4,-20(s0)
20403e6c:	fd842783          	lw	a5,-40(s0)
20403e70:	078a                	slli	a5,a5,0x2
20403e72:	97ba                	add	a5,a5,a4
20403e74:	fd442703          	lw	a4,-44(s0)
20403e78:	c798                	sw	a4,8(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
20403e7a:	fec42683          	lw	a3,-20(s0)
20403e7e:	fd842703          	lw	a4,-40(s0)
20403e82:	87ba                	mv	a5,a4
20403e84:	0786                	slli	a5,a5,0x1
20403e86:	97ba                	add	a5,a5,a4
20403e88:	078e                	slli	a5,a5,0x3
20403e8a:	97b6                	add	a5,a5,a3
20403e8c:	fd042703          	lw	a4,-48(s0)
20403e90:	08e7a423          	sw	a4,136(a5)
20403e94:	a081                	j	20403ed4 <__metal_driver_riscv_plic0_register+0xb4>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
20403e96:	4605                	li	a2,1
20403e98:	fd842583          	lw	a1,-40(s0)
20403e9c:	fdc42503          	lw	a0,-36(s0)
20403ea0:	c7dff0ef          	jal	ra,20403b1c <__metal_plic0_set_priority>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
20403ea4:	fec42703          	lw	a4,-20(s0)
20403ea8:	fd842783          	lw	a5,-40(s0)
20403eac:	078a                	slli	a5,a5,0x2
20403eae:	97ba                	add	a5,a5,a4
20403eb0:	20404737          	lui	a4,0x20404
20403eb4:	c3e70713          	addi	a4,a4,-962 # 20403c3e <__metal_plic0_default_handler>
20403eb8:	c798                	sw	a4,8(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
20403eba:	fec42683          	lw	a3,-20(s0)
20403ebe:	fd842703          	lw	a4,-40(s0)
20403ec2:	87ba                	mv	a5,a4
20403ec4:	0786                	slli	a5,a5,0x1
20403ec6:	97ba                	add	a5,a5,a4
20403ec8:	078e                	slli	a5,a5,0x3
20403eca:	97b6                	add	a5,a5,a3
20403ecc:	fd042703          	lw	a4,-48(s0)
20403ed0:	08e7a223          	sw	a4,132(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
20403ed4:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:157
}
20403ed6:	853e                	mv	a0,a5
20403ed8:	50b2                	lw	ra,44(sp)
20403eda:	5422                	lw	s0,40(sp)
20403edc:	6145                	addi	sp,sp,48
20403ede:	8082                	ret

20403ee0 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
20403ee0:	7179                	addi	sp,sp,-48
20403ee2:	d606                	sw	ra,44(sp)
20403ee4:	d422                	sw	s0,40(sp)
20403ee6:	1800                	addi	s0,sp,48
20403ee8:	fca42e23          	sw	a0,-36(s0)
20403eec:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20403ef0:	fdc42783          	lw	a5,-36(s0)
20403ef4:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20403ef8:	fdc42503          	lw	a0,-36(s0)
20403efc:	abdff0ef          	jal	ra,204039b8 <__metal_driver_sifive_plic0_num_interrupts>
20403f00:	872a                	mv	a4,a0
20403f02:	fd842783          	lw	a5,-40(s0)
20403f06:	00e7c463          	blt	a5,a4,20403f0e <__metal_driver_riscv_plic0_enable+0x2e>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
20403f0a:	57fd                	li	a5,-1
20403f0c:	a809                	j	20403f1e <__metal_driver_riscv_plic0_enable+0x3e>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
20403f0e:	4605                	li	a2,1
20403f10:	fd842583          	lw	a1,-40(s0)
20403f14:	fec42503          	lw	a0,-20(s0)
20403f18:	c9bff0ef          	jal	ra,20403bb2 <__metal_plic0_enable>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
20403f1c:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:169
}
20403f1e:	853e                	mv	a0,a5
20403f20:	50b2                	lw	ra,44(sp)
20403f22:	5422                	lw	s0,40(sp)
20403f24:	6145                	addi	sp,sp,48
20403f26:	8082                	ret

20403f28 <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
20403f28:	7179                	addi	sp,sp,-48
20403f2a:	d606                	sw	ra,44(sp)
20403f2c:	d422                	sw	s0,40(sp)
20403f2e:	1800                	addi	s0,sp,48
20403f30:	fca42e23          	sw	a0,-36(s0)
20403f34:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20403f38:	fdc42783          	lw	a5,-36(s0)
20403f3c:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20403f40:	fdc42503          	lw	a0,-36(s0)
20403f44:	a75ff0ef          	jal	ra,204039b8 <__metal_driver_sifive_plic0_num_interrupts>
20403f48:	872a                	mv	a4,a0
20403f4a:	fd842783          	lw	a5,-40(s0)
20403f4e:	00e7c463          	blt	a5,a4,20403f56 <__metal_driver_riscv_plic0_disable+0x2e>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
20403f52:	57fd                	li	a5,-1
20403f54:	a809                	j	20403f66 <__metal_driver_riscv_plic0_disable+0x3e>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
20403f56:	4601                	li	a2,0
20403f58:	fd842583          	lw	a1,-40(s0)
20403f5c:	fec42503          	lw	a0,-20(s0)
20403f60:	c53ff0ef          	jal	ra,20403bb2 <__metal_plic0_enable>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
20403f64:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/riscv_plic0.c:180
}
20403f66:	853e                	mv	a0,a5
20403f68:	50b2                	lw	ra,44(sp)
20403f6a:	5422                	lw	s0,40(sp)
20403f6c:	6145                	addi	sp,sp,48
20403f6e:	8082                	ret

20403f70 <__metal_driver_sifive_fe310_g000_hfrosc_ref>:
__metal_driver_sifive_fe310_g000_hfrosc_ref():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:880



/* --------------------- sifive_fe310_g000_hfrosc ------------ */
static __inline__ struct metal_clock * __metal_driver_sifive_fe310_g000_hfrosc_ref(const struct metal_clock *clock)
{
20403f70:	1101                	addi	sp,sp,-32
20403f72:	ce22                	sw	s0,28(sp)
20403f74:	1000                	addi	s0,sp,32
20403f76:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:881
		return (struct metal_clock *)&__metal_dt_clock_2.clock;
20403f7a:	800007b7          	lui	a5,0x80000
20403f7e:	06c78793          	addi	a5,a5,108 # 8000006c <metal_segment_heap_target_end+0xffffebf8>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:882
}
20403f82:	853e                	mv	a0,a5
20403f84:	4472                	lw	s0,28(sp)
20403f86:	6105                	addi	sp,sp,32
20403f88:	8082                	ret

20403f8a <__metal_driver_sifive_fe310_g000_hfrosc_config_base>:
__metal_driver_sifive_fe310_g000_hfrosc_config_base():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:885

static __inline__ struct __metal_driver_sifive_fe310_g000_prci * __metal_driver_sifive_fe310_g000_hfrosc_config_base(const struct metal_clock *clock)
{
20403f8a:	1101                	addi	sp,sp,-32
20403f8c:	ce22                	sw	s0,28(sp)
20403f8e:	1000                	addi	s0,sp,32
20403f90:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:886
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20403f94:	82418793          	addi	a5,gp,-2012 # 800007ac <__metal_dt_prci_10008000>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:887
}
20403f98:	853e                	mv	a0,a5
20403f9a:	4472                	lw	s0,28(sp)
20403f9c:	6105                	addi	sp,sp,32
20403f9e:	8082                	ret

20403fa0 <__metal_driver_sifive_fe310_g000_hfrosc_config_offset>:
__metal_driver_sifive_fe310_g000_hfrosc_config_offset():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:895
{
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
}

static __inline__ long __metal_driver_sifive_fe310_g000_hfrosc_config_offset(const struct metal_clock *clock)
{
20403fa0:	1101                	addi	sp,sp,-32
20403fa2:	ce22                	sw	s0,28(sp)
20403fa4:	1000                	addi	s0,sp,32
20403fa6:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:896
		return METAL_SIFIVE_FE310_G000_PRCI_HFROSCCFG;
20403faa:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:897
}
20403fac:	853e                	mv	a0,a5
20403fae:	4472                	lw	s0,28(sp)
20403fb0:	6105                	addi	sp,sp,32
20403fb2:	8082                	ret

20403fb4 <__metal_driver_sifive_fe310_g000_prci_vtable>:
__metal_driver_sifive_fe310_g000_prci_vtable():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:1012
{
		return METAL_SIFIVE_FE310_G000_PRCI_10008000_SIZE;
}

static __inline__ const struct __metal_driver_vtable_sifive_fe310_g000_prci * __metal_driver_sifive_fe310_g000_prci_vtable( )
{
20403fb4:	1141                	addi	sp,sp,-16
20403fb6:	c622                	sw	s0,12(sp)
20403fb8:	0800                	addi	s0,sp,16
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:1013
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
20403fba:	83818793          	addi	a5,gp,-1992 # 800007c0 <__metal_driver_vtable_sifive_fe310_g000_prci>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:1014
}
20403fbe:	853e                	mv	a0,a5
20403fc0:	4432                	lw	s0,12(sp)
20403fc2:	0141                	addi	sp,sp,16
20403fc4:	8082                	ret

20403fc6 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz>:
__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:17
#define CONFIG_TRIM    0x001F0000UL
#define CONFIG_ENABLE  0x40000000UL
#define CONFIG_READY   0x80000000UL

long __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz(const struct metal_clock *clock)
{
20403fc6:	7139                	addi	sp,sp,-64
20403fc8:	de06                	sw	ra,60(sp)
20403fca:	dc22                	sw	s0,56(sp)
20403fcc:	0080                	addi	s0,sp,64
20403fce:	fca42623          	sw	a0,-52(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:18
    struct metal_clock *ref = __metal_driver_sifive_fe310_g000_hfrosc_ref(clock);
20403fd2:	fcc42503          	lw	a0,-52(s0)
20403fd6:	3f69                	jal	20403f70 <__metal_driver_sifive_fe310_g000_hfrosc_ref>
20403fd8:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:19
    long config_offset = __metal_driver_sifive_fe310_g000_hfrosc_config_offset(clock);
20403fdc:	fcc42503          	lw	a0,-52(s0)
20403fe0:	37c1                	jal	20403fa0 <__metal_driver_sifive_fe310_g000_hfrosc_config_offset>
20403fe2:	fea42423          	sw	a0,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:21
    struct __metal_driver_sifive_fe310_g000_prci *config_base =
      __metal_driver_sifive_fe310_g000_hfrosc_config_base(clock);
20403fe6:	fcc42503          	lw	a0,-52(s0)
20403fea:	3745                	jal	20403f8a <__metal_driver_sifive_fe310_g000_hfrosc_config_base>
20403fec:	fea42223          	sw	a0,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:23
    const struct __metal_driver_vtable_sifive_fe310_g000_prci *vtable =
      __metal_driver_sifive_fe310_g000_prci_vtable();
20403ff0:	37d1                	jal	20403fb4 <__metal_driver_sifive_fe310_g000_prci_vtable>
20403ff2:	fea42023          	sw	a0,-32(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:24
    long cfg = vtable->get_reg(config_base, config_offset);
20403ff6:	fe042783          	lw	a5,-32(s0)
20403ffa:	439c                	lw	a5,0(a5)
20403ffc:	fe842583          	lw	a1,-24(s0)
20404000:	fe442503          	lw	a0,-28(s0)
20404004:	9782                	jalr	a5
20404006:	fca42e23          	sw	a0,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:26

    if ((cfg & CONFIG_ENABLE) == 0)
2040400a:	fdc42703          	lw	a4,-36(s0)
2040400e:	400007b7          	lui	a5,0x40000
20404012:	8ff9                	and	a5,a5,a4
20404014:	e399                	bnez	a5,2040401a <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x54>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:27
        return -1;
20404016:	57fd                	li	a5,-1
20404018:	a025                	j	20404040 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x7a>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:28
    if ((cfg & CONFIG_READY) == 0)
2040401a:	fdc42783          	lw	a5,-36(s0)
2040401e:	0007c463          	bltz	a5,20404026 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x60>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:29
        return -1;
20404022:	57fd                	li	a5,-1
20404024:	a831                	j	20404040 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x7a>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:30
    return metal_clock_get_rate_hz(ref) / ((cfg & CONFIG_DIVIDER) + 1);
20404026:	fec42503          	lw	a0,-20(s0)
2040402a:	6e2010ef          	jal	ra,2040570c <metal_clock_get_rate_hz>
2040402e:	87aa                	mv	a5,a0
20404030:	873e                	mv	a4,a5
20404032:	fdc42783          	lw	a5,-36(s0)
20404036:	03f7f793          	andi	a5,a5,63
2040403a:	0785                	addi	a5,a5,1
2040403c:	02f757b3          	divu	a5,a4,a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:31
}
20404040:	853e                	mv	a0,a5
20404042:	50f2                	lw	ra,60(sp)
20404044:	5462                	lw	s0,56(sp)
20404046:	6121                	addi	sp,sp,64
20404048:	8082                	ret

2040404a <__metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz>:
__metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:34

long __metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz(struct metal_clock *clock, long rate)
{
2040404a:	1101                	addi	sp,sp,-32
2040404c:	ce06                	sw	ra,28(sp)
2040404e:	cc22                	sw	s0,24(sp)
20404050:	1000                	addi	s0,sp,32
20404052:	fea42623          	sw	a0,-20(s0)
20404056:	feb42423          	sw	a1,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:35
    return __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz(clock);
2040405a:	fec42503          	lw	a0,-20(s0)
2040405e:	37a5                	jal	20403fc6 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz>
20404060:	87aa                	mv	a5,a0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:36
}
20404062:	853e                	mv	a0,a5
20404064:	40f2                	lw	ra,28(sp)
20404066:	4462                	lw	s0,24(sp)
20404068:	6105                	addi	sp,sp,32
2040406a:	8082                	ret

2040406c <__metal_driver_sifive_fe310_g000_hfxosc_ref>:
__metal_driver_sifive_fe310_g000_hfxosc_ref():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:903
{
2040406c:	1101                	addi	sp,sp,-32
2040406e:	ce22                	sw	s0,28(sp)
20404070:	1000                	addi	s0,sp,32
20404072:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:904
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
20404076:	800007b7          	lui	a5,0x80000
2040407a:	06078793          	addi	a5,a5,96 # 80000060 <metal_segment_heap_target_end+0xffffebec>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:905
}
2040407e:	853e                	mv	a0,a5
20404080:	4472                	lw	s0,28(sp)
20404082:	6105                	addi	sp,sp,32
20404084:	8082                	ret

20404086 <__metal_driver_sifive_fe310_g000_hfxosc_config_base>:
__metal_driver_sifive_fe310_g000_hfxosc_config_base():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:908
{
20404086:	1101                	addi	sp,sp,-32
20404088:	ce22                	sw	s0,28(sp)
2040408a:	1000                	addi	s0,sp,32
2040408c:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:909
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20404090:	82418793          	addi	a5,gp,-2012 # 800007ac <__metal_dt_prci_10008000>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:910
}
20404094:	853e                	mv	a0,a5
20404096:	4472                	lw	s0,28(sp)
20404098:	6105                	addi	sp,sp,32
2040409a:	8082                	ret

2040409c <__metal_driver_sifive_fe310_g000_hfxosc_config_offset>:
__metal_driver_sifive_fe310_g000_hfxosc_config_offset():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:913
{
2040409c:	1101                	addi	sp,sp,-32
2040409e:	ce22                	sw	s0,28(sp)
204040a0:	1000                	addi	s0,sp,32
204040a2:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:914
		return METAL_SIFIVE_FE310_G000_PRCI_HFXOSCCFG;
204040a6:	4791                	li	a5,4
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:915
}
204040a8:	853e                	mv	a0,a5
204040aa:	4472                	lw	s0,28(sp)
204040ac:	6105                	addi	sp,sp,32
204040ae:	8082                	ret

204040b0 <__metal_driver_sifive_fe310_g000_prci_vtable>:
__metal_driver_sifive_fe310_g000_prci_vtable():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:1012
{
204040b0:	1141                	addi	sp,sp,-16
204040b2:	c622                	sw	s0,12(sp)
204040b4:	0800                	addi	s0,sp,16
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:1013
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
204040b6:	83818793          	addi	a5,gp,-1992 # 800007c0 <__metal_driver_vtable_sifive_fe310_g000_prci>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:1014
}
204040ba:	853e                	mv	a0,a5
204040bc:	4432                	lw	s0,12(sp)
204040be:	0141                	addi	sp,sp,16
204040c0:	8082                	ret

204040c2 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz>:
__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:15

#define CONFIG_ENABLE  0x40000000UL
#define CONFIG_READY   0x80000000UL

long __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz(const struct metal_clock *clock)
{
204040c2:	7139                	addi	sp,sp,-64
204040c4:	de06                	sw	ra,60(sp)
204040c6:	dc22                	sw	s0,56(sp)
204040c8:	0080                	addi	s0,sp,64
204040ca:	fca42623          	sw	a0,-52(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:16
    struct metal_clock *ref = __metal_driver_sifive_fe310_g000_hfxosc_ref(clock);
204040ce:	fcc42503          	lw	a0,-52(s0)
204040d2:	3f69                	jal	2040406c <__metal_driver_sifive_fe310_g000_hfxosc_ref>
204040d4:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:17
    long config_offset = __metal_driver_sifive_fe310_g000_hfxosc_config_offset(clock);
204040d8:	fcc42503          	lw	a0,-52(s0)
204040dc:	37c1                	jal	2040409c <__metal_driver_sifive_fe310_g000_hfxosc_config_offset>
204040de:	fea42423          	sw	a0,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:19
    struct __metal_driver_sifive_fe310_g000_prci *config_base =
      __metal_driver_sifive_fe310_g000_hfxosc_config_base(clock);
204040e2:	fcc42503          	lw	a0,-52(s0)
204040e6:	3745                	jal	20404086 <__metal_driver_sifive_fe310_g000_hfxosc_config_base>
204040e8:	fea42223          	sw	a0,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:21
    const struct __metal_driver_vtable_sifive_fe310_g000_prci *vtable =
      __metal_driver_sifive_fe310_g000_prci_vtable();
204040ec:	37d1                	jal	204040b0 <__metal_driver_sifive_fe310_g000_prci_vtable>
204040ee:	fea42023          	sw	a0,-32(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:22
    long cfg = vtable->get_reg(config_base, config_offset);
204040f2:	fe042783          	lw	a5,-32(s0)
204040f6:	439c                	lw	a5,0(a5)
204040f8:	fe842583          	lw	a1,-24(s0)
204040fc:	fe442503          	lw	a0,-28(s0)
20404100:	9782                	jalr	a5
20404102:	fca42e23          	sw	a0,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:24

    if ((cfg & CONFIG_ENABLE) == 0)
20404106:	fdc42703          	lw	a4,-36(s0)
2040410a:	400007b7          	lui	a5,0x40000
2040410e:	8ff9                	and	a5,a5,a4
20404110:	e399                	bnez	a5,20404116 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x54>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:25
        return -1;
20404112:	57fd                	li	a5,-1
20404114:	a821                	j	2040412c <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x6a>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:26
    if ((cfg & CONFIG_READY) == 0)
20404116:	fdc42783          	lw	a5,-36(s0)
2040411a:	0007c463          	bltz	a5,20404122 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x60>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:27
        return -1;
2040411e:	57fd                	li	a5,-1
20404120:	a031                	j	2040412c <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x6a>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:28
    return metal_clock_get_rate_hz(ref);
20404122:	fec42503          	lw	a0,-20(s0)
20404126:	5e6010ef          	jal	ra,2040570c <metal_clock_get_rate_hz>
2040412a:	87aa                	mv	a5,a0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:29
}
2040412c:	853e                	mv	a0,a5
2040412e:	50f2                	lw	ra,60(sp)
20404130:	5462                	lw	s0,56(sp)
20404132:	6121                	addi	sp,sp,64
20404134:	8082                	ret

20404136 <__metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz>:
__metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:32

long __metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz(struct metal_clock *clock, long rate)
{
20404136:	1101                	addi	sp,sp,-32
20404138:	ce06                	sw	ra,28(sp)
2040413a:	cc22                	sw	s0,24(sp)
2040413c:	1000                	addi	s0,sp,32
2040413e:	fea42623          	sw	a0,-20(s0)
20404142:	feb42423          	sw	a1,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:33
    return __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz(clock);
20404146:	fec42503          	lw	a0,-20(s0)
2040414a:	3fa5                	jal	204040c2 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz>
2040414c:	87aa                	mv	a5,a0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:34
}
2040414e:	853e                	mv	a0,a5
20404150:	40f2                	lw	ra,28(sp)
20404152:	4462                	lw	s0,24(sp)
20404154:	6105                	addi	sp,sp,32
20404156:	8082                	ret

20404158 <__metal_driver_sifive_fe310_g000_pll_pllsel0>:
__metal_driver_sifive_fe310_g000_pll_pllsel0():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:964
{
20404158:	1101                	addi	sp,sp,-32
2040415a:	ce22                	sw	s0,28(sp)
2040415c:	1000                	addi	s0,sp,32
2040415e:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:965
		return (struct metal_clock *)&__metal_dt_clock_3.clock;
20404162:	800007b7          	lui	a5,0x80000
20404166:	76078793          	addi	a5,a5,1888 # 80000760 <metal_segment_heap_target_end+0xfffff2ec>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:966
}
2040416a:	853e                	mv	a0,a5
2040416c:	4472                	lw	s0,28(sp)
2040416e:	6105                	addi	sp,sp,32
20404170:	8082                	ret

20404172 <__metal_driver_sifive_fe310_g000_pll_pllref>:
__metal_driver_sifive_fe310_g000_pll_pllref():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:969
{
20404172:	1101                	addi	sp,sp,-32
20404174:	ce22                	sw	s0,28(sp)
20404176:	1000                	addi	s0,sp,32
20404178:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:970
		return (struct metal_clock *)&__metal_dt_clock_1.clock;
2040417c:	800007b7          	lui	a5,0x80000
20404180:	76c78793          	addi	a5,a5,1900 # 8000076c <metal_segment_heap_target_end+0xfffff2f8>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:971
}
20404184:	853e                	mv	a0,a5
20404186:	4472                	lw	s0,28(sp)
20404188:	6105                	addi	sp,sp,32
2040418a:	8082                	ret

2040418c <__metal_driver_sifive_fe310_g000_pll_divider_base>:
__metal_driver_sifive_fe310_g000_pll_divider_base():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:974
{
2040418c:	1101                	addi	sp,sp,-32
2040418e:	ce22                	sw	s0,28(sp)
20404190:	1000                	addi	s0,sp,32
20404192:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:975
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20404196:	82418793          	addi	a5,gp,-2012 # 800007ac <__metal_dt_prci_10008000>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:976
}
2040419a:	853e                	mv	a0,a5
2040419c:	4472                	lw	s0,28(sp)
2040419e:	6105                	addi	sp,sp,32
204041a0:	8082                	ret

204041a2 <__metal_driver_sifive_fe310_g000_pll_divider_offset>:
__metal_driver_sifive_fe310_g000_pll_divider_offset():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:979
{
204041a2:	1101                	addi	sp,sp,-32
204041a4:	ce22                	sw	s0,28(sp)
204041a6:	1000                	addi	s0,sp,32
204041a8:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:980
		return METAL_SIFIVE_FE310_G000_PRCI_PLLOUTDIV;
204041ac:	47b1                	li	a5,12
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:981
}
204041ae:	853e                	mv	a0,a5
204041b0:	4472                	lw	s0,28(sp)
204041b2:	6105                	addi	sp,sp,32
204041b4:	8082                	ret

204041b6 <__metal_driver_sifive_fe310_g000_pll_config_base>:
__metal_driver_sifive_fe310_g000_pll_config_base():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:984
{
204041b6:	1141                	addi	sp,sp,-16
204041b8:	c622                	sw	s0,12(sp)
204041ba:	0800                	addi	s0,sp,16
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:985
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
204041bc:	82418793          	addi	a5,gp,-2012 # 800007ac <__metal_dt_prci_10008000>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:986
}
204041c0:	853e                	mv	a0,a5
204041c2:	4432                	lw	s0,12(sp)
204041c4:	0141                	addi	sp,sp,16
204041c6:	8082                	ret

204041c8 <__metal_driver_sifive_fe310_g000_pll_config_offset>:
__metal_driver_sifive_fe310_g000_pll_config_offset():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:989
{
204041c8:	1141                	addi	sp,sp,-16
204041ca:	c622                	sw	s0,12(sp)
204041cc:	0800                	addi	s0,sp,16
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:990
		return METAL_SIFIVE_FE310_G000_PRCI_PLLCFG;
204041ce:	47a1                	li	a5,8
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:991
}
204041d0:	853e                	mv	a0,a5
204041d2:	4432                	lw	s0,12(sp)
204041d4:	0141                	addi	sp,sp,16
204041d6:	8082                	ret

204041d8 <__metal_driver_sifive_fe310_g000_pll_init_rate>:
__metal_driver_sifive_fe310_g000_pll_init_rate():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:994
{
204041d8:	1141                	addi	sp,sp,-16
204041da:	c622                	sw	s0,12(sp)
204041dc:	0800                	addi	s0,sp,16
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:995
		return 16000000;
204041de:	00f427b7          	lui	a5,0xf42
204041e2:	40078793          	addi	a5,a5,1024 # f42400 <__heap_size+0xf41c00>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:996
}
204041e6:	853e                	mv	a0,a5
204041e8:	4432                	lw	s0,12(sp)
204041ea:	0141                	addi	sp,sp,16
204041ec:	8082                	ret

204041ee <__metal_driver_sifive_fe310_g000_prci_base>:
__metal_driver_sifive_fe310_g000_prci_base():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:1002
{
204041ee:	1141                	addi	sp,sp,-16
204041f0:	c622                	sw	s0,12(sp)
204041f2:	0800                	addi	s0,sp,16
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:1003
		return METAL_SIFIVE_FE310_G000_PRCI_10008000_BASE_ADDRESS;
204041f4:	100087b7          	lui	a5,0x10008
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:1004
}
204041f8:	853e                	mv	a0,a5
204041fa:	4432                	lw	s0,12(sp)
204041fc:	0141                	addi	sp,sp,16
204041fe:	8082                	ret

20404200 <__metal_driver_sifive_fe310_g000_prci_vtable>:
__metal_driver_sifive_fe310_g000_prci_vtable():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:1012
{
20404200:	1141                	addi	sp,sp,-16
20404202:	c622                	sw	s0,12(sp)
20404204:	0800                	addi	s0,sp,16
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:1013
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
20404206:	83818793          	addi	a5,gp,-1992 # 800007c0 <__metal_driver_vtable_sifive_fe310_g000_prci>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:1014
}
2040420a:	853e                	mv	a0,a5
2040420c:	4432                	lw	s0,12(sp)
2040420e:	0141                	addi	sp,sp,16
20404210:	8082                	ret

20404212 <get_pll_config_freq>:
get_pll_config_freq():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:137
 *  - config the PLL configuration
 * Returns:
 *  - PLL_CONFIG_NOT_VALID if the configuration is not valid for the input frequency
 *  - the output frequency, in hertz */
static long get_pll_config_freq(unsigned long pll_input_rate, const struct pll_config_t *config)
{
20404212:	1101                	addi	sp,sp,-32
20404214:	ce22                	sw	s0,28(sp)
20404216:	1000                	addi	s0,sp,32
20404218:	fea42623          	sw	a0,-20(s0)
2040421c:	feb42423          	sw	a1,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:138
    if(pll_input_rate < config->min_input_rate || pll_input_rate > config->max_input_rate)
20404220:	fe842783          	lw	a5,-24(s0)
20404224:	479c                	lw	a5,8(a5)
20404226:	fec42703          	lw	a4,-20(s0)
2040422a:	00f76963          	bltu	a4,a5,2040423c <get_pll_config_freq+0x2a>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:138 (discriminator 1)
2040422e:	fe842783          	lw	a5,-24(s0)
20404232:	47dc                	lw	a5,12(a5)
20404234:	fec42703          	lw	a4,-20(s0)
20404238:	00e7f463          	bgeu	a5,a4,20404240 <get_pll_config_freq+0x2e>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:139
        return PLL_CONFIG_NOT_VALID;
2040423c:	57fd                	li	a5,-1
2040423e:	a829                	j	20404258 <get_pll_config_freq+0x46>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:141

    return pll_input_rate * config->multiplier / config->divisor;
20404240:	fe842783          	lw	a5,-24(s0)
20404244:	4398                	lw	a4,0(a5)
20404246:	fec42783          	lw	a5,-20(s0)
2040424a:	02f70733          	mul	a4,a4,a5
2040424e:	fe842783          	lw	a5,-24(s0)
20404252:	43dc                	lw	a5,4(a5)
20404254:	02f757b3          	divu	a5,a4,a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:142
}
20404258:	853e                	mv	a0,a5
2040425a:	4472                	lw	s0,28(sp)
2040425c:	6105                	addi	sp,sp,32
2040425e:	8082                	ret

20404260 <metal_sifive_fe310_g000_pll_init>:
metal_sifive_fe310_g000_pll_init():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:147

#ifdef __METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE

static void metal_sifive_fe310_g000_pll_init(void) __attribute__((constructor));
static void metal_sifive_fe310_g000_pll_init(void) {
20404260:	1101                	addi	sp,sp,-32
20404262:	ce06                	sw	ra,28(sp)
20404264:	cc22                	sw	s0,24(sp)
20404266:	1000                	addi	s0,sp,32
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:148
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
20404268:	3f85                	jal	204041d8 <__metal_driver_sifive_fe310_g000_pll_init_rate>
2040426a:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:150
    /* If the PLL init_rate is zero, don't initialize the PLL */
    if(init_rate != 0)
2040426e:	fec42783          	lw	a5,-20(s0)
20404272:	c791                	beqz	a5,2040427e <metal_sifive_fe310_g000_pll_init+0x1e>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:151
        __metal_driver_sifive_fe310_g000_pll_init(__METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE);
20404274:	800007b7          	lui	a5,0x80000
20404278:	77878513          	addi	a0,a5,1912 # 80000778 <metal_segment_heap_target_end+0xfffff304>
2040427c:	2031                	jal	20404288 <__metal_driver_sifive_fe310_g000_pll_init>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:152
}
2040427e:	0001                	nop
20404280:	40f2                	lw	ra,28(sp)
20404282:	4462                	lw	s0,24(sp)
20404284:	6105                	addi	sp,sp,32
20404286:	8082                	ret

20404288 <__metal_driver_sifive_fe310_g000_pll_init>:
__metal_driver_sifive_fe310_g000_pll_init():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:156

#endif /* __METAL_DT_SIFIVE_FE310_G000__PLL_HANDLE */

void __metal_driver_sifive_fe310_g000_pll_init(struct __metal_driver_sifive_fe310_g000_pll *pll) {
20404288:	7139                	addi	sp,sp,-64
2040428a:	de06                	sw	ra,60(sp)
2040428c:	dc22                	sw	s0,56(sp)
2040428e:	0080                	addi	s0,sp,64
20404290:	fca42623          	sw	a0,-52(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:157
    struct metal_clock *pllref = __metal_driver_sifive_fe310_g000_pll_pllref(&(pll->clock));
20404294:	fcc42783          	lw	a5,-52(s0)
20404298:	853e                	mv	a0,a5
2040429a:	3de1                	jal	20404172 <__metal_driver_sifive_fe310_g000_pll_pllref>
2040429c:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:158
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
204042a0:	3f25                	jal	204041d8 <__metal_driver_sifive_fe310_g000_pll_init_rate>
204042a2:	fea42423          	sw	a0,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:159
    long config_offset = __metal_driver_sifive_fe310_g000_pll_config_offset();
204042a6:	370d                	jal	204041c8 <__metal_driver_sifive_fe310_g000_pll_config_offset>
204042a8:	fea42223          	sw	a0,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:160
    long base = __metal_driver_sifive_fe310_g000_prci_base();
204042ac:	3789                	jal	204041ee <__metal_driver_sifive_fe310_g000_prci_base>
204042ae:	fea42023          	sw	a0,-32(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:162

    __metal_io_u32 *pllcfg = (__metal_io_u32 *) (base + config_offset);
204042b2:	fe042703          	lw	a4,-32(s0)
204042b6:	fe442783          	lw	a5,-28(s0)
204042ba:	97ba                	add	a5,a5,a4
204042bc:	fcf42e23          	sw	a5,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:165

    /* If the PLL clock has had a _pre_rate_change_callback configured, call it */
    _metal_clock_call_all_callbacks(pll->clock._pre_rate_change_callback);
204042c0:	fcc42783          	lw	a5,-52(s0)
204042c4:	43dc                	lw	a5,4(a5)
204042c6:	853e                	mv	a0,a5
204042c8:	3b0010ef          	jal	ra,20405678 <_metal_clock_call_all_callbacks>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:168

    /* If we're running off of the PLL, switch off before we start configuring it*/
    if((__METAL_ACCESS_ONCE(pllcfg) & PLL_SEL) == 0)
204042cc:	fdc42783          	lw	a5,-36(s0)
204042d0:	4398                	lw	a4,0(a5)
204042d2:	67c1                	lui	a5,0x10
204042d4:	8ff9                	and	a5,a5,a4
204042d6:	eb91                	bnez	a5,204042ea <__metal_driver_sifive_fe310_g000_pll_init+0x62>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:169
        __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_SEL);
204042d8:	fdc42783          	lw	a5,-36(s0)
204042dc:	4398                	lw	a4,0(a5)
204042de:	77c1                	lui	a5,0xffff0
204042e0:	17fd                	addi	a5,a5,-1
204042e2:	8f7d                	and	a4,a4,a5
204042e4:	fdc42783          	lw	a5,-36(s0)
204042e8:	c398                	sw	a4,0(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:172

    /* Make sure we're running off of the external oscillator for stability */
    if(pllref != NULL)
204042ea:	fec42783          	lw	a5,-20(s0)
204042ee:	cb91                	beqz	a5,20404302 <__metal_driver_sifive_fe310_g000_pll_init+0x7a>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:173
        __METAL_ACCESS_ONCE(pllcfg) |= PLL_REFSEL;
204042f0:	fdc42783          	lw	a5,-36(s0)
204042f4:	4398                	lw	a4,0(a5)
204042f6:	000207b7          	lui	a5,0x20
204042fa:	8f5d                	or	a4,a4,a5
204042fc:	fdc42783          	lw	a5,-36(s0)
20404300:	c398                	sw	a4,0(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:178

    /* Configure the PLL to run at the requested init frequency.
     * Using the vtable instead of the user API because we want to control
     * when the callbacks occur. */
    pll->clock.vtable->set_rate_hz(&(pll->clock), init_rate);
20404302:	fcc42783          	lw	a5,-52(s0)
20404306:	439c                	lw	a5,0(a5)
20404308:	43d8                	lw	a4,4(a5)
2040430a:	fcc42783          	lw	a5,-52(s0)
2040430e:	fe842583          	lw	a1,-24(s0)
20404312:	853e                	mv	a0,a5
20404314:	9702                	jalr	a4
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:181

    /* If the PLL clock has had a rate_change_callback configured, call it */
    _metal_clock_call_all_callbacks(pll->clock._post_rate_change_callback);
20404316:	fcc42783          	lw	a5,-52(s0)
2040431a:	479c                	lw	a5,8(a5)
2040431c:	853e                	mv	a0,a5
2040431e:	35a010ef          	jal	ra,20405678 <_metal_clock_call_all_callbacks>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:182
}
20404322:	0001                	nop
20404324:	50f2                	lw	ra,60(sp)
20404326:	5462                	lw	s0,56(sp)
20404328:	6121                	addi	sp,sp,64
2040432a:	8082                	ret

2040432c <__metal_driver_sifive_fe310_g000_pll_get_rate_hz>:
__metal_driver_sifive_fe310_g000_pll_get_rate_hz():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:185

long __metal_driver_sifive_fe310_g000_pll_get_rate_hz(const struct metal_clock *clock)
{
2040432c:	711d                	addi	sp,sp,-96
2040432e:	ce86                	sw	ra,92(sp)
20404330:	cca2                	sw	s0,88(sp)
20404332:	1080                	addi	s0,sp,96
20404334:	faa42623          	sw	a0,-84(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:186
    struct metal_clock *pllref = __metal_driver_sifive_fe310_g000_pll_pllref(clock);
20404338:	fac42503          	lw	a0,-84(s0)
2040433c:	3d1d                	jal	20404172 <__metal_driver_sifive_fe310_g000_pll_pllref>
2040433e:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:187
    struct metal_clock *pllsel0 = __metal_driver_sifive_fe310_g000_pll_pllsel0(clock);
20404342:	fac42503          	lw	a0,-84(s0)
20404346:	3d09                	jal	20404158 <__metal_driver_sifive_fe310_g000_pll_pllsel0>
20404348:	fea42423          	sw	a0,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:188
    long config_offset = __metal_driver_sifive_fe310_g000_pll_config_offset(clock);
2040434c:	fac42503          	lw	a0,-84(s0)
20404350:	3da5                	jal	204041c8 <__metal_driver_sifive_fe310_g000_pll_config_offset>
20404352:	fea42223          	sw	a0,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:190
    struct __metal_driver_sifive_fe310_g000_prci *config_base =
      __metal_driver_sifive_fe310_g000_pll_config_base(clock);
20404356:	fac42503          	lw	a0,-84(s0)
2040435a:	3db1                	jal	204041b6 <__metal_driver_sifive_fe310_g000_pll_config_base>
2040435c:	fea42023          	sw	a0,-32(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:191
    long divider_offset = __metal_driver_sifive_fe310_g000_pll_divider_offset(clock);
20404360:	fac42503          	lw	a0,-84(s0)
20404364:	3d3d                	jal	204041a2 <__metal_driver_sifive_fe310_g000_pll_divider_offset>
20404366:	fca42e23          	sw	a0,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:193
    struct __metal_driver_sifive_fe310_g000_prci *divider_base =
      __metal_driver_sifive_fe310_g000_pll_divider_base(clock);
2040436a:	fac42503          	lw	a0,-84(s0)
2040436e:	3d39                	jal	2040418c <__metal_driver_sifive_fe310_g000_pll_divider_base>
20404370:	fca42c23          	sw	a0,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:195
    const struct __metal_driver_vtable_sifive_fe310_g000_prci *vtable =
      __metal_driver_sifive_fe310_g000_prci_vtable();
20404374:	3571                	jal	20404200 <__metal_driver_sifive_fe310_g000_prci_vtable>
20404376:	fca42a23          	sw	a0,-44(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:197

    long cfg = vtable->get_reg(config_base, config_offset);
2040437a:	fd442783          	lw	a5,-44(s0)
2040437e:	439c                	lw	a5,0(a5)
20404380:	fe442583          	lw	a1,-28(s0)
20404384:	fe042503          	lw	a0,-32(s0)
20404388:	9782                	jalr	a5
2040438a:	fca42823          	sw	a0,-48(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:198
    long div = vtable->get_reg(divider_base, divider_offset);
2040438e:	fd442783          	lw	a5,-44(s0)
20404392:	439c                	lw	a5,0(a5)
20404394:	fdc42583          	lw	a1,-36(s0)
20404398:	fd842503          	lw	a0,-40(s0)
2040439c:	9782                	jalr	a5
2040439e:	fca42623          	sw	a0,-52(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:202

    /* At the end of the PLL there's one big mux: it either selects the HFROSC
     * (bypassing the PLL entirely) or uses the PLL. */
    if (__METAL_GET_FIELD(cfg, PLL_SEL) == 0)
204043a2:	fd042703          	lw	a4,-48(s0)
204043a6:	67c1                	lui	a5,0x10
204043a8:	8f7d                	and	a4,a4,a5
204043aa:	67c1                	lui	a5,0x10
204043ac:	00f77863          	bgeu	a4,a5,204043bc <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x90>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:203
        return metal_clock_get_rate_hz(pllsel0);
204043b0:	fe842503          	lw	a0,-24(s0)
204043b4:	358010ef          	jal	ra,2040570c <metal_clock_get_rate_hz>
204043b8:	87aa                	mv	a5,a0
204043ba:	a8e1                	j	20404492 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x166>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207

    /* There's a clock mux before the PLL that selects between the HFROSC adn
     * the HFXOSC as the PLL's input clock. */
    long ref_hz = metal_clock_get_rate_hz(__METAL_GET_FIELD(cfg, PLL_REFSEL) ? pllref : pllsel0);
204043bc:	fd042703          	lw	a4,-48(s0)
204043c0:	000207b7          	lui	a5,0x20
204043c4:	8f7d                	and	a4,a4,a5
204043c6:	000207b7          	lui	a5,0x20
204043ca:	00f76563          	bltu	a4,a5,204043d4 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xa8>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207 (discriminator 1)
204043ce:	fec42783          	lw	a5,-20(s0)
204043d2:	a019                	j	204043d8 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xac>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207 (discriminator 2)
204043d4:	fe842783          	lw	a5,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207 (discriminator 4)
204043d8:	853e                	mv	a0,a5
204043da:	332010ef          	jal	ra,2040570c <metal_clock_get_rate_hz>
204043de:	fca42423          	sw	a0,-56(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:211 (discriminator 4)

    /* It's possible to bypass the PLL, which is an internal bpyass.  This
     * still obays the PLL's input clock mu. */
    if (__METAL_GET_FIELD(cfg, PLL_BYPASS))
204043e2:	fd042703          	lw	a4,-48(s0)
204043e6:	000407b7          	lui	a5,0x40
204043ea:	8f7d                	and	a4,a4,a5
204043ec:	000407b7          	lui	a5,0x40
204043f0:	00f76563          	bltu	a4,a5,204043fa <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xce>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:212
        return ref_hz;
204043f4:	fc842783          	lw	a5,-56(s0)
204043f8:	a869                	j	20404492 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x166>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:215

    /* Logically the PLL is a three stage div-mul-div. */
    long div_r = __METAL_GET_FIELD(cfg, PLL_R) + 1;
204043fa:	fd042783          	lw	a5,-48(s0)
204043fe:	8b9d                	andi	a5,a5,7
20404400:	0785                	addi	a5,a5,1
20404402:	fcf42223          	sw	a5,-60(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:216
    long mul_f = 2 * (__METAL_GET_FIELD(cfg, PLL_F) + 1);
20404406:	fd042783          	lw	a5,-48(s0)
2040440a:	3f07f793          	andi	a5,a5,1008
2040440e:	8391                	srli	a5,a5,0x4
20404410:	0785                	addi	a5,a5,1
20404412:	0786                	slli	a5,a5,0x1
20404414:	fcf42023          	sw	a5,-64(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:217
    if (__METAL_GET_FIELD(cfg, PLL_Q) == 0)
20404418:	fd042703          	lw	a4,-48(s0)
2040441c:	6785                	lui	a5,0x1
2040441e:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x400>
20404422:	8f7d                	and	a4,a4,a5
20404424:	3ff00793          	li	a5,1023
20404428:	00e7e463          	bltu	a5,a4,20404430 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x104>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:218
        return -1;
2040442c:	57fd                	li	a5,-1
2040442e:	a095                	j	20404492 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x166>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:219
    long div_q = 1 << __METAL_GET_FIELD(cfg, PLL_Q);
20404430:	fd042703          	lw	a4,-48(s0)
20404434:	6785                	lui	a5,0x1
20404436:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x400>
2040443a:	8ff9                	and	a5,a5,a4
2040443c:	83a9                	srli	a5,a5,0xa
2040443e:	4705                	li	a4,1
20404440:	00f717b3          	sll	a5,a4,a5
20404444:	faf42e23          	sw	a5,-68(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:224

    /* In addition to the dividers inherent in the PLL, there's an additional
     * clock divider that lives after the PLL and lets us pick a more
     * interesting range of frequencies. */
    long pllout = (((ref_hz / div_r) * mul_f) / div_q);
20404448:	fc842703          	lw	a4,-56(s0)
2040444c:	fc442783          	lw	a5,-60(s0)
20404450:	02f74733          	div	a4,a4,a5
20404454:	fc042783          	lw	a5,-64(s0)
20404458:	02f70733          	mul	a4,a4,a5
2040445c:	fbc42783          	lw	a5,-68(s0)
20404460:	02f747b3          	div	a5,a4,a5
20404464:	faf42c23          	sw	a5,-72(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:225
    if (__METAL_GET_FIELD(div, DIV_1))
20404468:	fcc42783          	lw	a5,-52(s0)
2040446c:	1007f713          	andi	a4,a5,256
20404470:	0ff00793          	li	a5,255
20404474:	00e7f563          	bgeu	a5,a4,2040447e <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x152>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:226
        return pllout;
20404478:	fb842783          	lw	a5,-72(s0)
2040447c:	a819                	j	20404492 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x166>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:228

    return pllout / (2 * (__METAL_GET_FIELD(div, DIV_DIV) + 1));
2040447e:	fb842703          	lw	a4,-72(s0)
20404482:	fcc42783          	lw	a5,-52(s0)
20404486:	03f7f793          	andi	a5,a5,63
2040448a:	0785                	addi	a5,a5,1
2040448c:	0786                	slli	a5,a5,0x1
2040448e:	02f757b3          	divu	a5,a4,a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:229
}
20404492:	853e                	mv	a0,a5
20404494:	40f6                	lw	ra,92(sp)
20404496:	4466                	lw	s0,88(sp)
20404498:	6125                	addi	sp,sp,96
2040449a:	8082                	ret

2040449c <find_closest_config>:
find_closest_config():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:240
 *  - rate desired PLL output frequency
 * Returns:
 *  -1 if no valid configuration is available
 *  the index into pll_configs of a valid configuration */
static int find_closest_config(long ref_hz, long rate)
{
2040449c:	7139                	addi	sp,sp,-64
2040449e:	de06                	sw	ra,60(sp)
204044a0:	dc22                	sw	s0,56(sp)
204044a2:	0080                	addi	s0,sp,64
204044a4:	fca42623          	sw	a0,-52(s0)
204044a8:	fcb42423          	sw	a1,-56(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:241
    int closest_index = -1;
204044ac:	57fd                	li	a5,-1
204044ae:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:242
    long closest_diff = LONG_MAX;
204044b2:	800007b7          	lui	a5,0x80000
204044b6:	fff7c793          	not	a5,a5
204044ba:	fef42423          	sw	a5,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:246

    /* We're probably trying for a fast output frequency, so start from
     * the high end of the configs. */
    for(int i = (sizeof(pll_configs) / sizeof(pll_configs[0])) - 1; i >= 0; i--)
204044be:	04300793          	li	a5,67
204044c2:	fef42223          	sw	a5,-28(s0)
204044c6:	a0b5                	j	20404532 <find_closest_config+0x96>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:248
    {
        long config_freq = get_pll_config_freq(ref_hz, &(pll_configs[i]));
204044c8:	fcc42683          	lw	a3,-52(s0)
204044cc:	fe442783          	lw	a5,-28(s0)
204044d0:	00579713          	slli	a4,a5,0x5
204044d4:	204067b7          	lui	a5,0x20406
204044d8:	d2c78793          	addi	a5,a5,-724 # 20405d2c <pll_configs>
204044dc:	97ba                	add	a5,a5,a4
204044de:	85be                	mv	a1,a5
204044e0:	8536                	mv	a0,a3
204044e2:	d31ff0ef          	jal	ra,20404212 <get_pll_config_freq>
204044e6:	fea42023          	sw	a0,-32(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:249
        if(config_freq != PLL_CONFIG_NOT_VALID)
204044ea:	fe042703          	lw	a4,-32(s0)
204044ee:	57fd                	li	a5,-1
204044f0:	02f70c63          	beq	a4,a5,20404528 <find_closest_config+0x8c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:251
        {
            long freq_diff = abs(config_freq - rate);
204044f4:	fe042703          	lw	a4,-32(s0)
204044f8:	fc842783          	lw	a5,-56(s0)
204044fc:	8f1d                	sub	a4,a4,a5
204044fe:	41f75793          	srai	a5,a4,0x1f
20404502:	8f3d                	xor	a4,a4,a5
20404504:	40f707b3          	sub	a5,a4,a5
20404508:	fcf42e23          	sw	a5,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:252
            if(freq_diff < closest_diff)
2040450c:	fdc42703          	lw	a4,-36(s0)
20404510:	fe842783          	lw	a5,-24(s0)
20404514:	00f75a63          	bge	a4,a5,20404528 <find_closest_config+0x8c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:254
            {
                closest_index = i;
20404518:	fe442783          	lw	a5,-28(s0)
2040451c:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:255
                closest_diff = freq_diff;
20404520:	fdc42783          	lw	a5,-36(s0)
20404524:	fef42423          	sw	a5,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:246 (discriminator 2)
    for(int i = (sizeof(pll_configs) / sizeof(pll_configs[0])) - 1; i >= 0; i--)
20404528:	fe442783          	lw	a5,-28(s0)
2040452c:	17fd                	addi	a5,a5,-1
2040452e:	fef42223          	sw	a5,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:246 (discriminator 1)
20404532:	fe442783          	lw	a5,-28(s0)
20404536:	f807d9e3          	bgez	a5,204044c8 <find_closest_config+0x2c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:260
            }
        }
    }

    return closest_index;
2040453a:	fec42783          	lw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:261
}
2040453e:	853e                	mv	a0,a5
20404540:	50f2                	lw	ra,60(sp)
20404542:	5462                	lw	s0,56(sp)
20404544:	6121                	addi	sp,sp,64
20404546:	8082                	ret

20404548 <configure_pll>:
configure_pll():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:265

/* Configure the PLL and wait for it to lock */
static void configure_pll(__metal_io_u32 *pllcfg, __metal_io_u32 *plloutdiv, const struct pll_config_t *config)
{
20404548:	1101                	addi	sp,sp,-32
2040454a:	ce22                	sw	s0,28(sp)
2040454c:	1000                	addi	s0,sp,32
2040454e:	fea42623          	sw	a0,-20(s0)
20404552:	feb42423          	sw	a1,-24(s0)
20404556:	fec42223          	sw	a2,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:266
    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_R);
2040455a:	fec42783          	lw	a5,-20(s0)
2040455e:	439c                	lw	a5,0(a5)
20404560:	ff87f713          	andi	a4,a5,-8
20404564:	fec42783          	lw	a5,-20(s0)
20404568:	c398                	sw	a4,0(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:267
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_R_SHIFT(config->r);
2040456a:	fec42783          	lw	a5,-20(s0)
2040456e:	4398                	lw	a4,0(a5)
20404570:	fe442783          	lw	a5,-28(s0)
20404574:	4b9c                	lw	a5,16(a5)
20404576:	8b9d                	andi	a5,a5,7
20404578:	8f5d                	or	a4,a4,a5
2040457a:	fec42783          	lw	a5,-20(s0)
2040457e:	c398                	sw	a4,0(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:269

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_F);
20404580:	fec42783          	lw	a5,-20(s0)
20404584:	439c                	lw	a5,0(a5)
20404586:	c0f7f713          	andi	a4,a5,-1009
2040458a:	fec42783          	lw	a5,-20(s0)
2040458e:	c398                	sw	a4,0(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:270
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_F_SHIFT(config->f);
20404590:	fec42783          	lw	a5,-20(s0)
20404594:	4398                	lw	a4,0(a5)
20404596:	fe442783          	lw	a5,-28(s0)
2040459a:	4bdc                	lw	a5,20(a5)
2040459c:	0792                	slli	a5,a5,0x4
2040459e:	3f07f793          	andi	a5,a5,1008
204045a2:	8f5d                	or	a4,a4,a5
204045a4:	fec42783          	lw	a5,-20(s0)
204045a8:	c398                	sw	a4,0(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:272

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_Q);
204045aa:	fec42783          	lw	a5,-20(s0)
204045ae:	4398                	lw	a4,0(a5)
204045b0:	77fd                	lui	a5,0xfffff
204045b2:	3ff78793          	addi	a5,a5,1023 # fffff3ff <metal_segment_heap_target_end+0x7fffdf8b>
204045b6:	8f7d                	and	a4,a4,a5
204045b8:	fec42783          	lw	a5,-20(s0)
204045bc:	c398                	sw	a4,0(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:273
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_Q_SHIFT(config->q);
204045be:	fec42783          	lw	a5,-20(s0)
204045c2:	4398                	lw	a4,0(a5)
204045c4:	fe442783          	lw	a5,-28(s0)
204045c8:	4f9c                	lw	a5,24(a5)
204045ca:	00a79693          	slli	a3,a5,0xa
204045ce:	6785                	lui	a5,0x1
204045d0:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x400>
204045d4:	8ff5                	and	a5,a5,a3
204045d6:	8f5d                	or	a4,a4,a5
204045d8:	fec42783          	lw	a5,-20(s0)
204045dc:	c398                	sw	a4,0(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:275

    if(config->d < 0)
204045de:	fe442783          	lw	a5,-28(s0)
204045e2:	4fdc                	lw	a5,28(a5)
204045e4:	0207db63          	bgez	a5,2040461a <configure_pll+0xd2>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:278
    {
        /* disable final divider */
        __METAL_ACCESS_ONCE(plloutdiv) |= DIV_1;
204045e8:	fe842783          	lw	a5,-24(s0)
204045ec:	439c                	lw	a5,0(a5)
204045ee:	1007e713          	ori	a4,a5,256
204045f2:	fe842783          	lw	a5,-24(s0)
204045f6:	c398                	sw	a4,0(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:280

        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_DIV);
204045f8:	fe842783          	lw	a5,-24(s0)
204045fc:	439c                	lw	a5,0(a5)
204045fe:	fc07f713          	andi	a4,a5,-64
20404602:	fe842783          	lw	a5,-24(s0)
20404606:	c398                	sw	a4,0(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:281
        __METAL_ACCESS_ONCE(plloutdiv) |= PLL_DIV_SHIFT(1);
20404608:	fe842783          	lw	a5,-24(s0)
2040460c:	439c                	lw	a5,0(a5)
2040460e:	0017e713          	ori	a4,a5,1
20404612:	fe842783          	lw	a5,-24(s0)
20404616:	c398                	sw	a4,0(a5)
20404618:	a82d                	j	20404652 <configure_pll+0x10a>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:285
    }
    else
    {
        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_1);
2040461a:	fe842783          	lw	a5,-24(s0)
2040461e:	439c                	lw	a5,0(a5)
20404620:	eff7f713          	andi	a4,a5,-257
20404624:	fe842783          	lw	a5,-24(s0)
20404628:	c398                	sw	a4,0(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:287

        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_DIV);
2040462a:	fe842783          	lw	a5,-24(s0)
2040462e:	439c                	lw	a5,0(a5)
20404630:	fc07f713          	andi	a4,a5,-64
20404634:	fe842783          	lw	a5,-24(s0)
20404638:	c398                	sw	a4,0(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:288
        __METAL_ACCESS_ONCE(plloutdiv) |= PLL_DIV_SHIFT(config->d);
2040463a:	fe842783          	lw	a5,-24(s0)
2040463e:	4398                	lw	a4,0(a5)
20404640:	fe442783          	lw	a5,-28(s0)
20404644:	4fdc                	lw	a5,28(a5)
20404646:	03f7f793          	andi	a5,a5,63
2040464a:	8f5d                	or	a4,a4,a5
2040464c:	fe842783          	lw	a5,-24(s0)
20404650:	c398                	sw	a4,0(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:291
    }

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_BYPASS);
20404652:	fec42783          	lw	a5,-20(s0)
20404656:	4398                	lw	a4,0(a5)
20404658:	fffc07b7          	lui	a5,0xfffc0
2040465c:	17fd                	addi	a5,a5,-1
2040465e:	8f7d                	and	a4,a4,a5
20404660:	fec42783          	lw	a5,-20(s0)
20404664:	c398                	sw	a4,0(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:294

    /* Wait for PLL to lock */
    while((__METAL_ACCESS_ONCE(pllcfg) & PLL_LOCK) == 0) ;
20404666:	0001                	nop
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:294 (discriminator 1)
20404668:	fec42783          	lw	a5,-20(s0)
2040466c:	439c                	lw	a5,0(a5)
2040466e:	fe07dde3          	bgez	a5,20404668 <configure_pll+0x120>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:295
}
20404672:	0001                	nop
20404674:	4472                	lw	s0,28(sp)
20404676:	6105                	addi	sp,sp,32
20404678:	8082                	ret

2040467a <__metal_driver_sifive_fe310_g000_pll_set_rate_hz>:
__metal_driver_sifive_fe310_g000_pll_set_rate_hz():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:298

long __metal_driver_sifive_fe310_g000_pll_set_rate_hz(struct metal_clock *clock, long rate)
{
2040467a:	715d                	addi	sp,sp,-80
2040467c:	c686                	sw	ra,76(sp)
2040467e:	c4a2                	sw	s0,72(sp)
20404680:	0880                	addi	s0,sp,80
20404682:	faa42e23          	sw	a0,-68(s0)
20404686:	fab42c23          	sw	a1,-72(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:299
    struct metal_clock *pllref = __metal_driver_sifive_fe310_g000_pll_pllref(clock);
2040468a:	fbc42503          	lw	a0,-68(s0)
2040468e:	ae5ff0ef          	jal	ra,20404172 <__metal_driver_sifive_fe310_g000_pll_pllref>
20404692:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:300
    struct metal_clock *pllsel0 = __metal_driver_sifive_fe310_g000_pll_pllsel0(clock);
20404696:	fbc42503          	lw	a0,-68(s0)
2040469a:	abfff0ef          	jal	ra,20404158 <__metal_driver_sifive_fe310_g000_pll_pllsel0>
2040469e:	fea42423          	sw	a0,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:301
    long config_offset = __metal_driver_sifive_fe310_g000_pll_config_offset(clock);
204046a2:	fbc42503          	lw	a0,-68(s0)
204046a6:	b23ff0ef          	jal	ra,204041c8 <__metal_driver_sifive_fe310_g000_pll_config_offset>
204046aa:	fea42223          	sw	a0,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:302
    long divider_offset = __metal_driver_sifive_fe310_g000_pll_divider_offset(clock);
204046ae:	fbc42503          	lw	a0,-68(s0)
204046b2:	af1ff0ef          	jal	ra,204041a2 <__metal_driver_sifive_fe310_g000_pll_divider_offset>
204046b6:	fea42023          	sw	a0,-32(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:303
    long base = __metal_driver_sifive_fe310_g000_prci_base();
204046ba:	b35ff0ef          	jal	ra,204041ee <__metal_driver_sifive_fe310_g000_prci_base>
204046be:	fca42e23          	sw	a0,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:305

    __metal_io_u32 *pllcfg = (__metal_io_u32 *) (base + config_offset);
204046c2:	fdc42703          	lw	a4,-36(s0)
204046c6:	fe442783          	lw	a5,-28(s0)
204046ca:	97ba                	add	a5,a5,a4
204046cc:	fcf42c23          	sw	a5,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:306
    __metal_io_u32 *plloutdiv = (__metal_io_u32 *) (base + divider_offset);
204046d0:	fdc42703          	lw	a4,-36(s0)
204046d4:	fe042783          	lw	a5,-32(s0)
204046d8:	97ba                	add	a5,a5,a4
204046da:	fcf42a23          	sw	a5,-44(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:309

    /* We can't modify the PLL if coreclk is driven by it, so switch it off */
    if (__METAL_ACCESS_ONCE(pllcfg) & PLL_SEL)
204046de:	fd842783          	lw	a5,-40(s0)
204046e2:	4398                	lw	a4,0(a5)
204046e4:	67c1                	lui	a5,0x10
204046e6:	8ff9                	and	a5,a5,a4
204046e8:	cb91                	beqz	a5,204046fc <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x82>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:310
        __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_SEL);
204046ea:	fd842783          	lw	a5,-40(s0)
204046ee:	4398                	lw	a4,0(a5)
204046f0:	77c1                	lui	a5,0xffff0
204046f2:	17fd                	addi	a5,a5,-1
204046f4:	8f7d                	and	a4,a4,a5
204046f6:	fd842783          	lw	a5,-40(s0)
204046fa:	c398                	sw	a4,0(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314

    /* There's a clock mux before the PLL that selects between the HFROSC and
     * the HFXOSC as the PLL's input clock. */
    long ref_hz = metal_clock_get_rate_hz(__METAL_ACCESS_ONCE(pllcfg) & PLL_REFSEL ? pllref : pllsel0);
204046fc:	fd842783          	lw	a5,-40(s0)
20404700:	4398                	lw	a4,0(a5)
20404702:	000207b7          	lui	a5,0x20
20404706:	8ff9                	and	a5,a5,a4
20404708:	c781                	beqz	a5,20404710 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x96>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314 (discriminator 1)
2040470a:	fec42783          	lw	a5,-20(s0)
2040470e:	a019                	j	20404714 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x9a>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314 (discriminator 2)
20404710:	fe842783          	lw	a5,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314 (discriminator 4)
20404714:	853e                	mv	a0,a5
20404716:	7f7000ef          	jal	ra,2040570c <metal_clock_get_rate_hz>
2040471a:	fca42823          	sw	a0,-48(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:317 (discriminator 4)

    /* if the desired rate is within 75%-125% of the input clock, bypass the PLL */
    if((ref_hz * 3 / 4) <= rate && (ref_hz * 5 / 4) >= rate)
2040471e:	fd042703          	lw	a4,-48(s0)
20404722:	87ba                	mv	a5,a4
20404724:	0786                	slli	a5,a5,0x1
20404726:	97ba                	add	a5,a5,a4
20404728:	41f7d713          	srai	a4,a5,0x1f
2040472c:	8b0d                	andi	a4,a4,3
2040472e:	97ba                	add	a5,a5,a4
20404730:	8789                	srai	a5,a5,0x2
20404732:	873e                	mv	a4,a5
20404734:	fb842783          	lw	a5,-72(s0)
20404738:	02e7cb63          	blt	a5,a4,2040476e <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0xf4>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:317 (discriminator 1)
2040473c:	fd042703          	lw	a4,-48(s0)
20404740:	87ba                	mv	a5,a4
20404742:	078a                	slli	a5,a5,0x2
20404744:	97ba                	add	a5,a5,a4
20404746:	41f7d713          	srai	a4,a5,0x1f
2040474a:	8b0d                	andi	a4,a4,3
2040474c:	97ba                	add	a5,a5,a4
2040474e:	8789                	srai	a5,a5,0x2
20404750:	873e                	mv	a4,a5
20404752:	fb842783          	lw	a5,-72(s0)
20404756:	00f74c63          	blt	a4,a5,2040476e <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0xf4>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:319
    {
        __METAL_ACCESS_ONCE(pllcfg) |= PLL_BYPASS;
2040475a:	fd842783          	lw	a5,-40(s0)
2040475e:	4398                	lw	a4,0(a5)
20404760:	000407b7          	lui	a5,0x40
20404764:	8f5d                	or	a4,a4,a5
20404766:	fd842783          	lw	a5,-40(s0)
2040476a:	c398                	sw	a4,0(a5)
2040476c:	a0b9                	j	204047ba <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x140>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:323
    }
    else
    {
        int config_index = find_closest_config(ref_hz, rate);
2040476e:	fb842583          	lw	a1,-72(s0)
20404772:	fd042503          	lw	a0,-48(s0)
20404776:	d27ff0ef          	jal	ra,2040449c <find_closest_config>
2040477a:	fca42623          	sw	a0,-52(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:324
        if(config_index != -1)
2040477e:	fcc42703          	lw	a4,-52(s0)
20404782:	57fd                	li	a5,-1
20404784:	02f70263          	beq	a4,a5,204047a8 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x12e>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:326
        {
            configure_pll(pllcfg, plloutdiv, &(pll_configs[config_index]));
20404788:	fcc42783          	lw	a5,-52(s0)
2040478c:	00579713          	slli	a4,a5,0x5
20404790:	204067b7          	lui	a5,0x20406
20404794:	d2c78793          	addi	a5,a5,-724 # 20405d2c <pll_configs>
20404798:	97ba                	add	a5,a5,a4
2040479a:	863e                	mv	a2,a5
2040479c:	fd442583          	lw	a1,-44(s0)
204047a0:	fd842503          	lw	a0,-40(s0)
204047a4:	3355                	jal	20404548 <configure_pll>
204047a6:	a811                	j	204047ba <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x140>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:331
        }
        else
        {
            /* unable to find a valid configuration */
            __METAL_ACCESS_ONCE(pllcfg) |= PLL_BYPASS;
204047a8:	fd842783          	lw	a5,-40(s0)
204047ac:	4398                	lw	a4,0(a5)
204047ae:	000407b7          	lui	a5,0x40
204047b2:	8f5d                	or	a4,a4,a5
204047b4:	fd842783          	lw	a5,-40(s0)
204047b8:	c398                	sw	a4,0(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:336
        }
    }

    /* Enable the PLL */
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_SEL;
204047ba:	fd842783          	lw	a5,-40(s0)
204047be:	4398                	lw	a4,0(a5)
204047c0:	67c1                	lui	a5,0x10
204047c2:	8f5d                	or	a4,a4,a5
204047c4:	fd842783          	lw	a5,-40(s0)
204047c8:	c398                	sw	a4,0(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:338

    return __metal_driver_sifive_fe310_g000_pll_get_rate_hz(clock);
204047ca:	fbc42503          	lw	a0,-68(s0)
204047ce:	b5fff0ef          	jal	ra,2040432c <__metal_driver_sifive_fe310_g000_pll_get_rate_hz>
204047d2:	87aa                	mv	a5,a0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:339
}
204047d4:	853e                	mv	a0,a5
204047d6:	40b6                	lw	ra,76(sp)
204047d8:	4426                	lw	s0,72(sp)
204047da:	6161                	addi	sp,sp,80
204047dc:	8082                	ret

204047de <use_hfxosc>:
use_hfxosc():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:344

#ifdef __METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE
static void use_hfxosc(void) __attribute__((constructor));
static void use_hfxosc(void)
{
204047de:	1101                	addi	sp,sp,-32
204047e0:	ce06                	sw	ra,28(sp)
204047e2:	cc22                	sw	s0,24(sp)
204047e4:	1000                	addi	s0,sp,32
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:345
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
204047e6:	9f3ff0ef          	jal	ra,204041d8 <__metal_driver_sifive_fe310_g000_pll_init_rate>
204047ea:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:346
    metal_clock_set_rate_hz(
204047ee:	fec42583          	lw	a1,-20(s0)
204047f2:	800007b7          	lui	a5,0x80000
204047f6:	77878513          	addi	a0,a5,1912 # 80000778 <metal_segment_heap_target_end+0xfffff304>
204047fa:	739000ef          	jal	ra,20405732 <metal_clock_set_rate_hz>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:349
        &__METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE->clock, init_rate
    );
}
204047fe:	0001                	nop
20404800:	40f2                	lw	ra,28(sp)
20404802:	4462                	lw	s0,24(sp)
20404804:	6105                	addi	sp,sp,32
20404806:	8082                	ret

20404808 <__metal_driver_sifive_fe310_g000_prci_base>:
__metal_driver_sifive_fe310_g000_prci_base():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:1002
{
20404808:	1141                	addi	sp,sp,-16
2040480a:	c622                	sw	s0,12(sp)
2040480c:	0800                	addi	s0,sp,16
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:1003
		return METAL_SIFIVE_FE310_G000_PRCI_10008000_BASE_ADDRESS;
2040480e:	100087b7          	lui	a5,0x10008
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:1004
}
20404812:	853e                	mv	a0,a5
20404814:	4432                	lw	s0,12(sp)
20404816:	0141                	addi	sp,sp,16
20404818:	8082                	ret

2040481a <__metal_driver_sifive_fe310_g000_prci_get_reg>:
__metal_driver_sifive_fe310_g000_prci_get_reg():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:11
#ifdef METAL_SIFIVE_FE310_G000_PRCI

#include <metal/drivers/sifive_fe310-g000_prci.h>
#include <metal/machine.h>

long __metal_driver_sifive_fe310_g000_prci_get_reg(const struct __metal_driver_sifive_fe310_g000_prci *prci, long offset) {
2040481a:	7179                	addi	sp,sp,-48
2040481c:	d606                	sw	ra,44(sp)
2040481e:	d422                	sw	s0,40(sp)
20404820:	1800                	addi	s0,sp,48
20404822:	fca42e23          	sw	a0,-36(s0)
20404826:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:12
    unsigned long base = __metal_driver_sifive_fe310_g000_prci_base();
2040482a:	3ff9                	jal	20404808 <__metal_driver_sifive_fe310_g000_prci_base>
2040482c:	87aa                	mv	a5,a0
2040482e:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:13
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + offset));
20404832:	fd842703          	lw	a4,-40(s0)
20404836:	fec42783          	lw	a5,-20(s0)
2040483a:	97ba                	add	a5,a5,a4
2040483c:	439c                	lw	a5,0(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:14
}
2040483e:	853e                	mv	a0,a5
20404840:	50b2                	lw	ra,44(sp)
20404842:	5422                	lw	s0,40(sp)
20404844:	6145                	addi	sp,sp,48
20404846:	8082                	ret

20404848 <__metal_driver_sifive_fe310_g000_prci_set_reg>:
__metal_driver_sifive_fe310_g000_prci_set_reg():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:16

long __metal_driver_sifive_fe310_g000_prci_set_reg(const struct __metal_driver_sifive_fe310_g000_prci *prci, long offset, long value) {
20404848:	7179                	addi	sp,sp,-48
2040484a:	d606                	sw	ra,44(sp)
2040484c:	d422                	sw	s0,40(sp)
2040484e:	1800                	addi	s0,sp,48
20404850:	fca42e23          	sw	a0,-36(s0)
20404854:	fcb42c23          	sw	a1,-40(s0)
20404858:	fcc42a23          	sw	a2,-44(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:17
    unsigned long base = __metal_driver_sifive_fe310_g000_prci_base();
2040485c:	3775                	jal	20404808 <__metal_driver_sifive_fe310_g000_prci_base>
2040485e:	87aa                	mv	a5,a0
20404860:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:18
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + offset)) = value;
20404864:	fd842703          	lw	a4,-40(s0)
20404868:	fec42783          	lw	a5,-20(s0)
2040486c:	97ba                	add	a5,a5,a4
2040486e:	873e                	mv	a4,a5
20404870:	fd442783          	lw	a5,-44(s0)
20404874:	c31c                	sw	a5,0(a4)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:19
}
20404876:	853e                	mv	a0,a5
20404878:	50b2                	lw	ra,44(sp)
2040487a:	5422                	lw	s0,40(sp)
2040487c:	6145                	addi	sp,sp,48
2040487e:	8082                	ret

20404880 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:440
{
20404880:	1101                	addi	sp,sp,-32
20404882:	ce22                	sw	s0,28(sp)
20404884:	1000                	addi	s0,sp,32
20404886:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:441
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
2040488a:	fec42703          	lw	a4,-20(s0)
2040488e:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
20404892:	00f71563          	bne	a4,a5,2040489c <__metal_driver_sifive_gpio0_base+0x1c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:442
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
20404896:	100127b7          	lui	a5,0x10012
2040489a:	a011                	j	2040489e <__metal_driver_sifive_gpio0_base+0x1e>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:445
		return 0;
2040489c:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:447
}
2040489e:	853e                	mv	a0,a5
204048a0:	4472                	lw	s0,28(sp)
204048a2:	6105                	addi	sp,sp,32
204048a4:	8082                	ret

204048a6 <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:470
{
204048a6:	1101                	addi	sp,sp,-32
204048a8:	ce22                	sw	s0,28(sp)
204048aa:	1000                	addi	s0,sp,32
204048ac:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:471
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
204048b0:	fec42703          	lw	a4,-20(s0)
204048b4:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
204048b8:	00f71763          	bne	a4,a5,204048c6 <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:472
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
204048bc:	800007b7          	lui	a5,0x80000
204048c0:	44078793          	addi	a5,a5,1088 # 80000440 <metal_segment_heap_target_end+0xffffefcc>
204048c4:	a011                	j	204048c8 <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:475
		return 0;
204048c6:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:477
}
204048c8:	853e                	mv	a0,a5
204048ca:	4472                	lw	s0,28(sp)
204048cc:	6105                	addi	sp,sp,32
204048ce:	8082                	ret

204048d0 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:480
{
204048d0:	1101                	addi	sp,sp,-32
204048d2:	ce22                	sw	s0,28(sp)
204048d4:	1000                	addi	s0,sp,32
204048d6:	fea42623          	sw	a0,-20(s0)
204048da:	feb42423          	sw	a1,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:481
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
204048de:	fec42703          	lw	a4,-20(s0)
204048e2:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
204048e6:	00f71763          	bne	a4,a5,204048f4 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:481 (discriminator 1)
204048ea:	fe842783          	lw	a5,-24(s0)
204048ee:	e399                	bnez	a5,204048f4 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:482
		return 7;
204048f0:	479d                	li	a5,7
204048f2:	a269                	j	20404a7c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:484
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
204048f4:	fec42703          	lw	a4,-20(s0)
204048f8:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
204048fc:	00f71963          	bne	a4,a5,2040490e <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:484 (discriminator 1)
20404900:	fe842703          	lw	a4,-24(s0)
20404904:	4785                	li	a5,1
20404906:	00f71463          	bne	a4,a5,2040490e <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:485
		return 8;
2040490a:	47a1                	li	a5,8
2040490c:	aa85                	j	20404a7c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:487
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
2040490e:	fec42703          	lw	a4,-20(s0)
20404912:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
20404916:	00f71963          	bne	a4,a5,20404928 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:487 (discriminator 1)
2040491a:	fe842703          	lw	a4,-24(s0)
2040491e:	4789                	li	a5,2
20404920:	00f71463          	bne	a4,a5,20404928 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:488
		return 9;
20404924:	47a5                	li	a5,9
20404926:	aa99                	j	20404a7c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:490
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
20404928:	fec42703          	lw	a4,-20(s0)
2040492c:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
20404930:	00f71963          	bne	a4,a5,20404942 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:490 (discriminator 1)
20404934:	fe842703          	lw	a4,-24(s0)
20404938:	478d                	li	a5,3
2040493a:	00f71463          	bne	a4,a5,20404942 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:491
		return 10;
2040493e:	47a9                	li	a5,10
20404940:	aa35                	j	20404a7c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:493
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
20404942:	fec42703          	lw	a4,-20(s0)
20404946:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
2040494a:	00f71963          	bne	a4,a5,2040495c <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:493 (discriminator 1)
2040494e:	fe842703          	lw	a4,-24(s0)
20404952:	4791                	li	a5,4
20404954:	00f71463          	bne	a4,a5,2040495c <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:494
		return 11;
20404958:	47ad                	li	a5,11
2040495a:	a20d                	j	20404a7c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:496
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
2040495c:	fec42703          	lw	a4,-20(s0)
20404960:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
20404964:	00f71963          	bne	a4,a5,20404976 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:496 (discriminator 1)
20404968:	fe842703          	lw	a4,-24(s0)
2040496c:	4795                	li	a5,5
2040496e:	00f71463          	bne	a4,a5,20404976 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:497
		return 12;
20404972:	47b1                	li	a5,12
20404974:	a221                	j	20404a7c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:499
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
20404976:	fec42703          	lw	a4,-20(s0)
2040497a:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
2040497e:	00f71963          	bne	a4,a5,20404990 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:499 (discriminator 1)
20404982:	fe842703          	lw	a4,-24(s0)
20404986:	4799                	li	a5,6
20404988:	00f71463          	bne	a4,a5,20404990 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:500
		return 13;
2040498c:	47b5                	li	a5,13
2040498e:	a0fd                	j	20404a7c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:502
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
20404990:	fec42703          	lw	a4,-20(s0)
20404994:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
20404998:	00f71963          	bne	a4,a5,204049aa <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:502 (discriminator 1)
2040499c:	fe842703          	lw	a4,-24(s0)
204049a0:	479d                	li	a5,7
204049a2:	00f71463          	bne	a4,a5,204049aa <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:503
		return 14;
204049a6:	47b9                	li	a5,14
204049a8:	a8d1                	j	20404a7c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:505
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
204049aa:	fec42703          	lw	a4,-20(s0)
204049ae:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
204049b2:	00f71963          	bne	a4,a5,204049c4 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:505 (discriminator 1)
204049b6:	fe842703          	lw	a4,-24(s0)
204049ba:	47a1                	li	a5,8
204049bc:	00f71463          	bne	a4,a5,204049c4 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:506
		return 15;
204049c0:	47bd                	li	a5,15
204049c2:	a86d                	j	20404a7c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:508
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
204049c4:	fec42703          	lw	a4,-20(s0)
204049c8:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
204049cc:	00f71963          	bne	a4,a5,204049de <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:508 (discriminator 1)
204049d0:	fe842703          	lw	a4,-24(s0)
204049d4:	47a5                	li	a5,9
204049d6:	00f71463          	bne	a4,a5,204049de <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:509
		return 16;
204049da:	47c1                	li	a5,16
204049dc:	a045                	j	20404a7c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:511
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
204049de:	fec42703          	lw	a4,-20(s0)
204049e2:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
204049e6:	00f71963          	bne	a4,a5,204049f8 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:511 (discriminator 1)
204049ea:	fe842703          	lw	a4,-24(s0)
204049ee:	47a9                	li	a5,10
204049f0:	00f71463          	bne	a4,a5,204049f8 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:512
		return 17;
204049f4:	47c5                	li	a5,17
204049f6:	a059                	j	20404a7c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:514
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
204049f8:	fec42703          	lw	a4,-20(s0)
204049fc:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
20404a00:	00f71963          	bne	a4,a5,20404a12 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:514 (discriminator 1)
20404a04:	fe842703          	lw	a4,-24(s0)
20404a08:	47ad                	li	a5,11
20404a0a:	00f71463          	bne	a4,a5,20404a12 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:515
		return 18;
20404a0e:	47c9                	li	a5,18
20404a10:	a0b5                	j	20404a7c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:517
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
20404a12:	fec42703          	lw	a4,-20(s0)
20404a16:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
20404a1a:	00f71963          	bne	a4,a5,20404a2c <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:517 (discriminator 1)
20404a1e:	fe842703          	lw	a4,-24(s0)
20404a22:	47b1                	li	a5,12
20404a24:	00f71463          	bne	a4,a5,20404a2c <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:518
		return 19;
20404a28:	47cd                	li	a5,19
20404a2a:	a889                	j	20404a7c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:520
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
20404a2c:	fec42703          	lw	a4,-20(s0)
20404a30:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
20404a34:	00f71963          	bne	a4,a5,20404a46 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:520 (discriminator 1)
20404a38:	fe842703          	lw	a4,-24(s0)
20404a3c:	47b5                	li	a5,13
20404a3e:	00f71463          	bne	a4,a5,20404a46 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:521
		return 20;
20404a42:	47d1                	li	a5,20
20404a44:	a825                	j	20404a7c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:523
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
20404a46:	fec42703          	lw	a4,-20(s0)
20404a4a:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
20404a4e:	00f71963          	bne	a4,a5,20404a60 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:523 (discriminator 1)
20404a52:	fe842703          	lw	a4,-24(s0)
20404a56:	47b9                	li	a5,14
20404a58:	00f71463          	bne	a4,a5,20404a60 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:524
		return 21;
20404a5c:	47d5                	li	a5,21
20404a5e:	a839                	j	20404a7c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:526
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
20404a60:	fec42703          	lw	a4,-20(s0)
20404a64:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
20404a68:	00f71963          	bne	a4,a5,20404a7a <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:526 (discriminator 1)
20404a6c:	fe842703          	lw	a4,-24(s0)
20404a70:	47bd                	li	a5,15
20404a72:	00f71463          	bne	a4,a5,20404a7a <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:527
		return 22;
20404a76:	47d9                	li	a5,22
20404a78:	a011                	j	20404a7c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:530
		return 0;
20404a7a:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:532
}
20404a7c:	853e                	mv	a0,a5
20404a7e:	4472                	lw	s0,28(sp)
20404a80:	6105                	addi	sp,sp,32
20404a82:	8082                	ret

20404a84 <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
20404a84:	7179                	addi	sp,sp,-48
20404a86:	d606                	sw	ra,44(sp)
20404a88:	d422                	sw	s0,40(sp)
20404a8a:	1800                	addi	s0,sp,48
20404a8c:	fca42e23          	sw	a0,-36(s0)
20404a90:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404a94:	fdc42503          	lw	a0,-36(s0)
20404a98:	de9ff0ef          	jal	ra,20404880 <__metal_driver_sifive_gpio0_base>
20404a9c:	87aa                	mv	a5,a0
20404a9e:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
20404aa2:	fec42783          	lw	a5,-20(s0)
20404aa6:	0791                	addi	a5,a5,4
20404aa8:	4398                	lw	a4,0(a5)
20404aaa:	fd842783          	lw	a5,-40(s0)
20404aae:	fec42683          	lw	a3,-20(s0)
20404ab2:	0691                	addi	a3,a3,4
20404ab4:	8fd9                	or	a5,a5,a4
20404ab6:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
20404ab8:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:19
}
20404aba:	853e                	mv	a0,a5
20404abc:	50b2                	lw	ra,44(sp)
20404abe:	5422                	lw	s0,40(sp)
20404ac0:	6145                	addi	sp,sp,48
20404ac2:	8082                	ret

20404ac4 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
20404ac4:	7179                	addi	sp,sp,-48
20404ac6:	d606                	sw	ra,44(sp)
20404ac8:	d422                	sw	s0,40(sp)
20404aca:	1800                	addi	s0,sp,48
20404acc:	fca42e23          	sw	a0,-36(s0)
20404ad0:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404ad4:	fdc42503          	lw	a0,-36(s0)
20404ad8:	da9ff0ef          	jal	ra,20404880 <__metal_driver_sifive_gpio0_base>
20404adc:	87aa                	mv	a5,a0
20404ade:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
20404ae2:	fec42783          	lw	a5,-20(s0)
20404ae6:	0791                	addi	a5,a5,4
20404ae8:	439c                	lw	a5,0(a5)
20404aea:	fd842703          	lw	a4,-40(s0)
20404aee:	fff74713          	not	a4,a4
20404af2:	86ba                	mv	a3,a4
20404af4:	fec42703          	lw	a4,-20(s0)
20404af8:	0711                	addi	a4,a4,4
20404afa:	8ff5                	and	a5,a5,a3
20404afc:	c31c                	sw	a5,0(a4)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
20404afe:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:28
}
20404b00:	853e                	mv	a0,a5
20404b02:	50b2                	lw	ra,44(sp)
20404b04:	5422                	lw	s0,40(sp)
20404b06:	6145                	addi	sp,sp,48
20404b08:	8082                	ret

20404b0a <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
20404b0a:	7179                	addi	sp,sp,-48
20404b0c:	d606                	sw	ra,44(sp)
20404b0e:	d422                	sw	s0,40(sp)
20404b10:	1800                	addi	s0,sp,48
20404b12:	fca42e23          	sw	a0,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404b16:	fdc42503          	lw	a0,-36(s0)
20404b1a:	d67ff0ef          	jal	ra,20404880 <__metal_driver_sifive_gpio0_base>
20404b1e:	87aa                	mv	a5,a0
20404b20:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
20404b24:	fec42783          	lw	a5,-20(s0)
20404b28:	439c                	lw	a5,0(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:35
}
20404b2a:	853e                	mv	a0,a5
20404b2c:	50b2                	lw	ra,44(sp)
20404b2e:	5422                	lw	s0,40(sp)
20404b30:	6145                	addi	sp,sp,48
20404b32:	8082                	ret

20404b34 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
20404b34:	7179                	addi	sp,sp,-48
20404b36:	d606                	sw	ra,44(sp)
20404b38:	d422                	sw	s0,40(sp)
20404b3a:	1800                	addi	s0,sp,48
20404b3c:	fca42e23          	sw	a0,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404b40:	fdc42503          	lw	a0,-36(s0)
20404b44:	d3dff0ef          	jal	ra,20404880 <__metal_driver_sifive_gpio0_base>
20404b48:	87aa                	mv	a5,a0
20404b4a:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
20404b4e:	fec42783          	lw	a5,-20(s0)
20404b52:	07b1                	addi	a5,a5,12
20404b54:	439c                	lw	a5,0(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:42
}
20404b56:	853e                	mv	a0,a5
20404b58:	50b2                	lw	ra,44(sp)
20404b5a:	5422                	lw	s0,40(sp)
20404b5c:	6145                	addi	sp,sp,48
20404b5e:	8082                	ret

20404b60 <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
20404b60:	7179                	addi	sp,sp,-48
20404b62:	d606                	sw	ra,44(sp)
20404b64:	d422                	sw	s0,40(sp)
20404b66:	1800                	addi	s0,sp,48
20404b68:	fca42e23          	sw	a0,-36(s0)
20404b6c:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404b70:	fdc42503          	lw	a0,-36(s0)
20404b74:	d0dff0ef          	jal	ra,20404880 <__metal_driver_sifive_gpio0_base>
20404b78:	87aa                	mv	a5,a0
20404b7a:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
20404b7e:	fec42783          	lw	a5,-20(s0)
20404b82:	07a1                	addi	a5,a5,8
20404b84:	439c                	lw	a5,0(a5)
20404b86:	fd842703          	lw	a4,-40(s0)
20404b8a:	fff74713          	not	a4,a4
20404b8e:	86ba                	mv	a3,a4
20404b90:	fec42703          	lw	a4,-20(s0)
20404b94:	0721                	addi	a4,a4,8
20404b96:	8ff5                	and	a5,a5,a3
20404b98:	c31c                	sw	a5,0(a4)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
20404b9a:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:52
}
20404b9c:	853e                	mv	a0,a5
20404b9e:	50b2                	lw	ra,44(sp)
20404ba0:	5422                	lw	s0,40(sp)
20404ba2:	6145                	addi	sp,sp,48
20404ba4:	8082                	ret

20404ba6 <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
20404ba6:	7179                	addi	sp,sp,-48
20404ba8:	d606                	sw	ra,44(sp)
20404baa:	d422                	sw	s0,40(sp)
20404bac:	1800                	addi	s0,sp,48
20404bae:	fca42e23          	sw	a0,-36(s0)
20404bb2:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404bb6:	fdc42503          	lw	a0,-36(s0)
20404bba:	cc7ff0ef          	jal	ra,20404880 <__metal_driver_sifive_gpio0_base>
20404bbe:	87aa                	mv	a5,a0
20404bc0:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
20404bc4:	fec42783          	lw	a5,-20(s0)
20404bc8:	07a1                	addi	a5,a5,8
20404bca:	4398                	lw	a4,0(a5)
20404bcc:	fd842783          	lw	a5,-40(s0)
20404bd0:	fec42683          	lw	a3,-20(s0)
20404bd4:	06a1                	addi	a3,a3,8
20404bd6:	8fd9                	or	a5,a5,a4
20404bd8:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
20404bda:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:61
}
20404bdc:	853e                	mv	a0,a5
20404bde:	50b2                	lw	ra,44(sp)
20404be0:	5422                	lw	s0,40(sp)
20404be2:	6145                	addi	sp,sp,48
20404be4:	8082                	ret

20404be6 <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
20404be6:	7179                	addi	sp,sp,-48
20404be8:	d606                	sw	ra,44(sp)
20404bea:	d422                	sw	s0,40(sp)
20404bec:	1800                	addi	s0,sp,48
20404bee:	fca42e23          	sw	a0,-36(s0)
20404bf2:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404bf6:	fdc42503          	lw	a0,-36(s0)
20404bfa:	c87ff0ef          	jal	ra,20404880 <__metal_driver_sifive_gpio0_base>
20404bfe:	87aa                	mv	a5,a0
20404c00:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
20404c04:	fec42783          	lw	a5,-20(s0)
20404c08:	07b1                	addi	a5,a5,12
20404c0a:	4398                	lw	a4,0(a5)
20404c0c:	fd842783          	lw	a5,-40(s0)
20404c10:	fec42683          	lw	a3,-20(s0)
20404c14:	06b1                	addi	a3,a3,12
20404c16:	8fd9                	or	a5,a5,a4
20404c18:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
20404c1a:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:70
}
20404c1c:	853e                	mv	a0,a5
20404c1e:	50b2                	lw	ra,44(sp)
20404c20:	5422                	lw	s0,40(sp)
20404c22:	6145                	addi	sp,sp,48
20404c24:	8082                	ret

20404c26 <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
20404c26:	7179                	addi	sp,sp,-48
20404c28:	d606                	sw	ra,44(sp)
20404c2a:	d422                	sw	s0,40(sp)
20404c2c:	1800                	addi	s0,sp,48
20404c2e:	fca42e23          	sw	a0,-36(s0)
20404c32:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404c36:	fdc42503          	lw	a0,-36(s0)
20404c3a:	c47ff0ef          	jal	ra,20404880 <__metal_driver_sifive_gpio0_base>
20404c3e:	87aa                	mv	a5,a0
20404c40:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
20404c44:	fec42783          	lw	a5,-20(s0)
20404c48:	07b1                	addi	a5,a5,12
20404c4a:	439c                	lw	a5,0(a5)
20404c4c:	fd842703          	lw	a4,-40(s0)
20404c50:	fff74713          	not	a4,a4
20404c54:	86ba                	mv	a3,a4
20404c56:	fec42703          	lw	a4,-20(s0)
20404c5a:	0731                	addi	a4,a4,12
20404c5c:	8ff5                	and	a5,a5,a3
20404c5e:	c31c                	sw	a5,0(a4)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
20404c60:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:79
}
20404c62:	853e                	mv	a0,a5
20404c64:	50b2                	lw	ra,44(sp)
20404c66:	5422                	lw	s0,40(sp)
20404c68:	6145                	addi	sp,sp,48
20404c6a:	8082                	ret

20404c6c <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
20404c6c:	7179                	addi	sp,sp,-48
20404c6e:	d606                	sw	ra,44(sp)
20404c70:	d422                	sw	s0,40(sp)
20404c72:	1800                	addi	s0,sp,48
20404c74:	fca42e23          	sw	a0,-36(s0)
20404c78:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404c7c:	fdc42503          	lw	a0,-36(s0)
20404c80:	c01ff0ef          	jal	ra,20404880 <__metal_driver_sifive_gpio0_base>
20404c84:	87aa                	mv	a5,a0
20404c86:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404c8a:	fec42783          	lw	a5,-20(s0)
20404c8e:	07b1                	addi	a5,a5,12
20404c90:	4398                	lw	a4,0(a5)
20404c92:	fd842783          	lw	a5,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404c96:	fec42683          	lw	a3,-20(s0)
20404c9a:	06b1                	addi	a3,a3,12
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404c9c:	8fb9                	xor	a5,a5,a4
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404c9e:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
20404ca0:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:89
}
20404ca2:	853e                	mv	a0,a5
20404ca4:	50b2                	lw	ra,44(sp)
20404ca6:	5422                	lw	s0,40(sp)
20404ca8:	6145                	addi	sp,sp,48
20404caa:	8082                	ret

20404cac <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
20404cac:	7179                	addi	sp,sp,-48
20404cae:	d606                	sw	ra,44(sp)
20404cb0:	d422                	sw	s0,40(sp)
20404cb2:	1800                	addi	s0,sp,48
20404cb4:	fca42e23          	sw	a0,-36(s0)
20404cb8:	fcb42c23          	sw	a1,-40(s0)
20404cbc:	fcc42a23          	sw	a2,-44(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404cc0:	fdc42503          	lw	a0,-36(s0)
20404cc4:	bbdff0ef          	jal	ra,20404880 <__metal_driver_sifive_gpio0_base>
20404cc8:	87aa                	mv	a5,a0
20404cca:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
20404cce:	fec42783          	lw	a5,-20(s0)
20404cd2:	03c78793          	addi	a5,a5,60
20404cd6:	439c                	lw	a5,0(a5)
20404cd8:	fd842703          	lw	a4,-40(s0)
20404cdc:	fff74713          	not	a4,a4
20404ce0:	86ba                	mv	a3,a4
20404ce2:	fec42703          	lw	a4,-20(s0)
20404ce6:	03c70713          	addi	a4,a4,60
20404cea:	8ff5                	and	a5,a5,a3
20404cec:	c31c                	sw	a5,0(a4)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
20404cee:	fec42783          	lw	a5,-20(s0)
20404cf2:	03878793          	addi	a5,a5,56
20404cf6:	4398                	lw	a4,0(a5)
20404cf8:	fd442783          	lw	a5,-44(s0)
20404cfc:	fec42683          	lw	a3,-20(s0)
20404d00:	03868693          	addi	a3,a3,56
20404d04:	8fd9                	or	a5,a5,a4
20404d06:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
20404d08:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:99
}
20404d0a:	853e                	mv	a0,a5
20404d0c:	50b2                	lw	ra,44(sp)
20404d0e:	5422                	lw	s0,40(sp)
20404d10:	6145                	addi	sp,sp,48
20404d12:	8082                	ret

20404d14 <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
20404d14:	7179                	addi	sp,sp,-48
20404d16:	d606                	sw	ra,44(sp)
20404d18:	d422                	sw	s0,40(sp)
20404d1a:	1800                	addi	s0,sp,48
20404d1c:	fca42e23          	sw	a0,-36(s0)
20404d20:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404d24:	fdc42503          	lw	a0,-36(s0)
20404d28:	b59ff0ef          	jal	ra,20404880 <__metal_driver_sifive_gpio0_base>
20404d2c:	87aa                	mv	a5,a0
20404d2e:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
20404d32:	fec42783          	lw	a5,-20(s0)
20404d36:	03878793          	addi	a5,a5,56
20404d3a:	439c                	lw	a5,0(a5)
20404d3c:	fd842703          	lw	a4,-40(s0)
20404d40:	fff74713          	not	a4,a4
20404d44:	86ba                	mv	a3,a4
20404d46:	fec42703          	lw	a4,-20(s0)
20404d4a:	03870713          	addi	a4,a4,56
20404d4e:	8ff5                	and	a5,a5,a3
20404d50:	c31c                	sw	a5,0(a4)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
20404d52:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:108
}
20404d54:	853e                	mv	a0,a5
20404d56:	50b2                	lw	ra,44(sp)
20404d58:	5422                	lw	s0,40(sp)
20404d5a:	6145                	addi	sp,sp,48
20404d5c:	8082                	ret

20404d5e <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20404d5e:	7179                	addi	sp,sp,-48
20404d60:	d606                	sw	ra,44(sp)
20404d62:	d422                	sw	s0,40(sp)
20404d64:	1800                	addi	s0,sp,48
20404d66:	fca42e23          	sw	a0,-36(s0)
20404d6a:	fcb42c23          	sw	a1,-40(s0)
20404d6e:	fcc42a23          	sw	a2,-44(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404d72:	fdc42503          	lw	a0,-36(s0)
20404d76:	b0bff0ef          	jal	ra,20404880 <__metal_driver_sifive_gpio0_base>
20404d7a:	87aa                	mv	a5,a0
20404d7c:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
20404d80:	fd442703          	lw	a4,-44(s0)
20404d84:	479d                	li	a5,7
20404d86:	1ce7e963          	bltu	a5,a4,20404f58 <__metal_driver_sifive_gpio0_config_int+0x1fa>
20404d8a:	fd442783          	lw	a5,-44(s0)
20404d8e:	00279713          	slli	a4,a5,0x2
20404d92:	204067b7          	lui	a5,0x20406
20404d96:	5b878793          	addi	a5,a5,1464 # 204065b8 <__metal_driver_vtable_sifive_fe310_g000_pll+0xc>
20404d9a:	97ba                	add	a5,a5,a4
20404d9c:	439c                	lw	a5,0(a5)
20404d9e:	8782                	jr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
20404da0:	fec42783          	lw	a5,-20(s0)
20404da4:	07e1                	addi	a5,a5,24
20404da6:	439c                	lw	a5,0(a5)
20404da8:	fd842703          	lw	a4,-40(s0)
20404dac:	fff74713          	not	a4,a4
20404db0:	86ba                	mv	a3,a4
20404db2:	fec42703          	lw	a4,-20(s0)
20404db6:	0761                	addi	a4,a4,24
20404db8:	8ff5                	and	a5,a5,a3
20404dba:	c31c                	sw	a5,0(a4)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
20404dbc:	fec42783          	lw	a5,-20(s0)
20404dc0:	02078793          	addi	a5,a5,32
20404dc4:	439c                	lw	a5,0(a5)
20404dc6:	fd842703          	lw	a4,-40(s0)
20404dca:	fff74713          	not	a4,a4
20404dce:	86ba                	mv	a3,a4
20404dd0:	fec42703          	lw	a4,-20(s0)
20404dd4:	02070713          	addi	a4,a4,32
20404dd8:	8ff5                	and	a5,a5,a3
20404dda:	c31c                	sw	a5,0(a4)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
20404ddc:	fec42783          	lw	a5,-20(s0)
20404de0:	02878793          	addi	a5,a5,40
20404de4:	439c                	lw	a5,0(a5)
20404de6:	fd842703          	lw	a4,-40(s0)
20404dea:	fff74713          	not	a4,a4
20404dee:	86ba                	mv	a3,a4
20404df0:	fec42703          	lw	a4,-20(s0)
20404df4:	02870713          	addi	a4,a4,40
20404df8:	8ff5                	and	a5,a5,a3
20404dfa:	c31c                	sw	a5,0(a4)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
20404dfc:	fec42783          	lw	a5,-20(s0)
20404e00:	03078793          	addi	a5,a5,48
20404e04:	439c                	lw	a5,0(a5)
20404e06:	fd842703          	lw	a4,-40(s0)
20404e0a:	fff74713          	not	a4,a4
20404e0e:	86ba                	mv	a3,a4
20404e10:	fec42703          	lw	a4,-20(s0)
20404e14:	03070713          	addi	a4,a4,48
20404e18:	8ff5                	and	a5,a5,a3
20404e1a:	c31c                	sw	a5,0(a4)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
20404e1c:	aa35                	j	20404f58 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404e1e:	fec42783          	lw	a5,-20(s0)
20404e22:	07e1                	addi	a5,a5,24
20404e24:	4398                	lw	a4,0(a5)
20404e26:	fd842783          	lw	a5,-40(s0)
20404e2a:	fec42683          	lw	a3,-20(s0)
20404e2e:	06e1                	addi	a3,a3,24
20404e30:	8fd9                	or	a5,a5,a4
20404e32:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
20404e34:	a215                	j	20404f58 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404e36:	fec42783          	lw	a5,-20(s0)
20404e3a:	02078793          	addi	a5,a5,32
20404e3e:	4398                	lw	a4,0(a5)
20404e40:	fd842783          	lw	a5,-40(s0)
20404e44:	fec42683          	lw	a3,-20(s0)
20404e48:	02068693          	addi	a3,a3,32
20404e4c:	8fd9                	or	a5,a5,a4
20404e4e:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
20404e50:	a221                	j	20404f58 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404e52:	fec42783          	lw	a5,-20(s0)
20404e56:	07e1                	addi	a5,a5,24
20404e58:	4398                	lw	a4,0(a5)
20404e5a:	fd842783          	lw	a5,-40(s0)
20404e5e:	fec42683          	lw	a3,-20(s0)
20404e62:	06e1                	addi	a3,a3,24
20404e64:	8fd9                	or	a5,a5,a4
20404e66:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404e68:	fec42783          	lw	a5,-20(s0)
20404e6c:	02078793          	addi	a5,a5,32
20404e70:	4398                	lw	a4,0(a5)
20404e72:	fd842783          	lw	a5,-40(s0)
20404e76:	fec42683          	lw	a3,-20(s0)
20404e7a:	02068693          	addi	a3,a3,32
20404e7e:	8fd9                	or	a5,a5,a4
20404e80:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
20404e82:	a8d9                	j	20404f58 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404e84:	fec42783          	lw	a5,-20(s0)
20404e88:	02878793          	addi	a5,a5,40
20404e8c:	4398                	lw	a4,0(a5)
20404e8e:	fd842783          	lw	a5,-40(s0)
20404e92:	fec42683          	lw	a3,-20(s0)
20404e96:	02868693          	addi	a3,a3,40
20404e9a:	8fd9                	or	a5,a5,a4
20404e9c:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
20404e9e:	a86d                	j	20404f58 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404ea0:	fec42783          	lw	a5,-20(s0)
20404ea4:	03078793          	addi	a5,a5,48
20404ea8:	4398                	lw	a4,0(a5)
20404eaa:	fd842783          	lw	a5,-40(s0)
20404eae:	fec42683          	lw	a3,-20(s0)
20404eb2:	03068693          	addi	a3,a3,48
20404eb6:	8fd9                	or	a5,a5,a4
20404eb8:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
20404eba:	a879                	j	20404f58 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404ebc:	fec42783          	lw	a5,-20(s0)
20404ec0:	02878793          	addi	a5,a5,40
20404ec4:	4398                	lw	a4,0(a5)
20404ec6:	fd842783          	lw	a5,-40(s0)
20404eca:	fec42683          	lw	a3,-20(s0)
20404ece:	02868693          	addi	a3,a3,40
20404ed2:	8fd9                	or	a5,a5,a4
20404ed4:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404ed6:	fec42783          	lw	a5,-20(s0)
20404eda:	03078793          	addi	a5,a5,48
20404ede:	4398                	lw	a4,0(a5)
20404ee0:	fd842783          	lw	a5,-40(s0)
20404ee4:	fec42683          	lw	a3,-20(s0)
20404ee8:	03068693          	addi	a3,a3,48
20404eec:	8fd9                	or	a5,a5,a4
20404eee:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
20404ef0:	a0a5                	j	20404f58 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404ef2:	fec42783          	lw	a5,-20(s0)
20404ef6:	07e1                	addi	a5,a5,24
20404ef8:	4398                	lw	a4,0(a5)
20404efa:	fd842783          	lw	a5,-40(s0)
20404efe:	fec42683          	lw	a3,-20(s0)
20404f02:	06e1                	addi	a3,a3,24
20404f04:	8fd9                	or	a5,a5,a4
20404f06:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404f08:	fec42783          	lw	a5,-20(s0)
20404f0c:	02078793          	addi	a5,a5,32
20404f10:	4398                	lw	a4,0(a5)
20404f12:	fd842783          	lw	a5,-40(s0)
20404f16:	fec42683          	lw	a3,-20(s0)
20404f1a:	02068693          	addi	a3,a3,32
20404f1e:	8fd9                	or	a5,a5,a4
20404f20:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404f22:	fec42783          	lw	a5,-20(s0)
20404f26:	02878793          	addi	a5,a5,40
20404f2a:	4398                	lw	a4,0(a5)
20404f2c:	fd842783          	lw	a5,-40(s0)
20404f30:	fec42683          	lw	a3,-20(s0)
20404f34:	02868693          	addi	a3,a3,40
20404f38:	8fd9                	or	a5,a5,a4
20404f3a:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404f3c:	fec42783          	lw	a5,-20(s0)
20404f40:	03078793          	addi	a5,a5,48
20404f44:	4398                	lw	a4,0(a5)
20404f46:	fd842783          	lw	a5,-40(s0)
20404f4a:	fec42683          	lw	a3,-20(s0)
20404f4e:	03068693          	addi	a3,a3,48
20404f52:	8fd9                	or	a5,a5,a4
20404f54:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
20404f56:	0001                	nop
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
20404f58:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:150
}
20404f5a:	853e                	mv	a0,a5
20404f5c:	50b2                	lw	ra,44(sp)
20404f5e:	5422                	lw	s0,40(sp)
20404f60:	6145                	addi	sp,sp,48
20404f62:	8082                	ret

20404f64 <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20404f64:	7179                	addi	sp,sp,-48
20404f66:	d606                	sw	ra,44(sp)
20404f68:	d422                	sw	s0,40(sp)
20404f6a:	1800                	addi	s0,sp,48
20404f6c:	fca42e23          	sw	a0,-36(s0)
20404f70:	fcb42c23          	sw	a1,-40(s0)
20404f74:	fcc42a23          	sw	a2,-44(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404f78:	fdc42503          	lw	a0,-36(s0)
20404f7c:	905ff0ef          	jal	ra,20404880 <__metal_driver_sifive_gpio0_base>
20404f80:	87aa                	mv	a5,a0
20404f82:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
20404f86:	fd442703          	lw	a4,-44(s0)
20404f8a:	479d                	li	a5,7
20404f8c:	14e7ea63          	bltu	a5,a4,204050e0 <__metal_driver_sifive_gpio0_clear_int+0x17c>
20404f90:	fd442783          	lw	a5,-44(s0)
20404f94:	00279713          	slli	a4,a5,0x2
20404f98:	204067b7          	lui	a5,0x20406
20404f9c:	5d878793          	addi	a5,a5,1496 # 204065d8 <__metal_driver_vtable_sifive_fe310_g000_pll+0x2c>
20404fa0:	97ba                	add	a5,a5,a4
20404fa2:	439c                	lw	a5,0(a5)
20404fa4:	8782                	jr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404fa6:	fec42783          	lw	a5,-20(s0)
20404faa:	07f1                	addi	a5,a5,28
20404fac:	4398                	lw	a4,0(a5)
20404fae:	fd842783          	lw	a5,-40(s0)
20404fb2:	fec42683          	lw	a3,-20(s0)
20404fb6:	06f1                	addi	a3,a3,28
20404fb8:	8fd9                	or	a5,a5,a4
20404fba:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
20404fbc:	a215                	j	204050e0 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404fbe:	fec42783          	lw	a5,-20(s0)
20404fc2:	02478793          	addi	a5,a5,36
20404fc6:	4398                	lw	a4,0(a5)
20404fc8:	fd842783          	lw	a5,-40(s0)
20404fcc:	fec42683          	lw	a3,-20(s0)
20404fd0:	02468693          	addi	a3,a3,36
20404fd4:	8fd9                	or	a5,a5,a4
20404fd6:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
20404fd8:	a221                	j	204050e0 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404fda:	fec42783          	lw	a5,-20(s0)
20404fde:	07f1                	addi	a5,a5,28
20404fe0:	4398                	lw	a4,0(a5)
20404fe2:	fd842783          	lw	a5,-40(s0)
20404fe6:	fec42683          	lw	a3,-20(s0)
20404fea:	06f1                	addi	a3,a3,28
20404fec:	8fd9                	or	a5,a5,a4
20404fee:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404ff0:	fec42783          	lw	a5,-20(s0)
20404ff4:	02478793          	addi	a5,a5,36
20404ff8:	4398                	lw	a4,0(a5)
20404ffa:	fd842783          	lw	a5,-40(s0)
20404ffe:	fec42683          	lw	a3,-20(s0)
20405002:	02468693          	addi	a3,a3,36
20405006:	8fd9                	or	a5,a5,a4
20405008:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
2040500a:	a8d9                	j	204050e0 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
2040500c:	fec42783          	lw	a5,-20(s0)
20405010:	02c78793          	addi	a5,a5,44
20405014:	4398                	lw	a4,0(a5)
20405016:	fd842783          	lw	a5,-40(s0)
2040501a:	fec42683          	lw	a3,-20(s0)
2040501e:	02c68693          	addi	a3,a3,44
20405022:	8fd9                	or	a5,a5,a4
20405024:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
20405026:	a86d                	j	204050e0 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20405028:	fec42783          	lw	a5,-20(s0)
2040502c:	03478793          	addi	a5,a5,52
20405030:	4398                	lw	a4,0(a5)
20405032:	fd842783          	lw	a5,-40(s0)
20405036:	fec42683          	lw	a3,-20(s0)
2040503a:	03468693          	addi	a3,a3,52
2040503e:	8fd9                	or	a5,a5,a4
20405040:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
20405042:	a879                	j	204050e0 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20405044:	fec42783          	lw	a5,-20(s0)
20405048:	02c78793          	addi	a5,a5,44
2040504c:	4398                	lw	a4,0(a5)
2040504e:	fd842783          	lw	a5,-40(s0)
20405052:	fec42683          	lw	a3,-20(s0)
20405056:	02c68693          	addi	a3,a3,44
2040505a:	8fd9                	or	a5,a5,a4
2040505c:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
2040505e:	fec42783          	lw	a5,-20(s0)
20405062:	03478793          	addi	a5,a5,52
20405066:	4398                	lw	a4,0(a5)
20405068:	fd842783          	lw	a5,-40(s0)
2040506c:	fec42683          	lw	a3,-20(s0)
20405070:	03468693          	addi	a3,a3,52
20405074:	8fd9                	or	a5,a5,a4
20405076:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
20405078:	a0a5                	j	204050e0 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
2040507a:	fec42783          	lw	a5,-20(s0)
2040507e:	07f1                	addi	a5,a5,28
20405080:	4398                	lw	a4,0(a5)
20405082:	fd842783          	lw	a5,-40(s0)
20405086:	fec42683          	lw	a3,-20(s0)
2040508a:	06f1                	addi	a3,a3,28
2040508c:	8fd9                	or	a5,a5,a4
2040508e:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20405090:	fec42783          	lw	a5,-20(s0)
20405094:	02478793          	addi	a5,a5,36
20405098:	4398                	lw	a4,0(a5)
2040509a:	fd842783          	lw	a5,-40(s0)
2040509e:	fec42683          	lw	a3,-20(s0)
204050a2:	02468693          	addi	a3,a3,36
204050a6:	8fd9                	or	a5,a5,a4
204050a8:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
204050aa:	fec42783          	lw	a5,-20(s0)
204050ae:	02c78793          	addi	a5,a5,44
204050b2:	4398                	lw	a4,0(a5)
204050b4:	fd842783          	lw	a5,-40(s0)
204050b8:	fec42683          	lw	a3,-20(s0)
204050bc:	02c68693          	addi	a3,a3,44
204050c0:	8fd9                	or	a5,a5,a4
204050c2:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
204050c4:	fec42783          	lw	a5,-20(s0)
204050c8:	03478793          	addi	a5,a5,52
204050cc:	4398                	lw	a4,0(a5)
204050ce:	fd842783          	lw	a5,-40(s0)
204050d2:	fec42683          	lw	a3,-20(s0)
204050d6:	03468693          	addi	a3,a3,52
204050da:	8fd9                	or	a5,a5,a4
204050dc:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
204050de:	0001                	nop
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
204050e0:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:186
}
204050e2:	853e                	mv	a0,a5
204050e4:	50b2                	lw	ra,44(sp)
204050e6:	5422                	lw	s0,40(sp)
204050e8:	6145                	addi	sp,sp,48
204050ea:	8082                	ret

204050ec <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
204050ec:	1101                	addi	sp,sp,-32
204050ee:	ce06                	sw	ra,28(sp)
204050f0:	cc22                	sw	s0,24(sp)
204050f2:	1000                	addi	s0,sp,32
204050f4:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
204050f8:	fec42503          	lw	a0,-20(s0)
204050fc:	faaff0ef          	jal	ra,204048a6 <__metal_driver_sifive_gpio0_interrupt_parent>
20405100:	87aa                	mv	a5,a0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:192
}
20405102:	853e                	mv	a0,a5
20405104:	40f2                	lw	ra,28(sp)
20405106:	4462                	lw	s0,24(sp)
20405108:	6105                	addi	sp,sp,32
2040510a:	8082                	ret

2040510c <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
2040510c:	7179                	addi	sp,sp,-48
2040510e:	d606                	sw	ra,44(sp)
20405110:	d422                	sw	s0,40(sp)
20405112:	1800                	addi	s0,sp,48
20405114:	fca42e23          	sw	a0,-36(s0)
20405118:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
2040511c:	fd842583          	lw	a1,-40(s0)
20405120:	fdc42503          	lw	a0,-36(s0)
20405124:	facff0ef          	jal	ra,204048d0 <__metal_driver_sifive_gpio0_interrupt_lines>
20405128:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
2040512c:	fec42783          	lw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_gpio0.c:199
}
20405130:	853e                	mv	a0,a5
20405132:	50b2                	lw	ra,44(sp)
20405134:	5422                	lw	s0,40(sp)
20405136:	6145                	addi	sp,sp,48
20405138:	8082                	ret

2040513a <__metal_driver_sifive_test0_base>:
__metal_driver_sifive_test0_base():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:709
{
2040513a:	1101                	addi	sp,sp,-32
2040513c:	ce22                	sw	s0,28(sp)
2040513e:	1000                	addi	s0,sp,32
20405140:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:710
	if ((uintptr_t)sd == (uintptr_t)&__metal_dt_test_100000) {
20405144:	fec42703          	lw	a4,-20(s0)
20405148:	82018793          	addi	a5,gp,-2016 # 800007a8 <__metal_dt_test_100000>
2040514c:	00f71563          	bne	a4,a5,20405156 <__metal_driver_sifive_test0_base+0x1c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:711
		return METAL_SIFIVE_TEST0_100000_BASE_ADDRESS;
20405150:	001007b7          	lui	a5,0x100
20405154:	a011                	j	20405158 <__metal_driver_sifive_test0_base+0x1e>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:714
		return 0;
20405156:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:716
}
20405158:	853e                	mv	a0,a5
2040515a:	4472                	lw	s0,28(sp)
2040515c:	6105                	addi	sp,sp,32
2040515e:	8082                	ret

20405160 <__metal_driver_sifive_test0_exit>:
__metal_driver_sifive_test0_exit():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_test0.c:17
#include <metal/drivers/sifive_test0.h>
#include <metal/io.h>

void __metal_driver_sifive_test0_exit(const struct __metal_shutdown *sd, int code) __attribute__((noreturn));
void __metal_driver_sifive_test0_exit(const struct __metal_shutdown *sd, int code)
{
20405160:	7179                	addi	sp,sp,-48
20405162:	d606                	sw	ra,44(sp)
20405164:	d422                	sw	s0,40(sp)
20405166:	1800                	addi	s0,sp,48
20405168:	fca42e23          	sw	a0,-36(s0)
2040516c:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_test0.c:18
    long base = __metal_driver_sifive_test0_base(sd);
20405170:	fdc42503          	lw	a0,-36(s0)
20405174:	37d9                	jal	2040513a <__metal_driver_sifive_test0_base>
20405176:	87aa                	mv	a5,a0
20405178:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_test0.c:19
    uint32_t out = (code << 16) + (code == 0 ? 0x5555 : 0x3333);
2040517c:	fd842783          	lw	a5,-40(s0)
20405180:	01079713          	slli	a4,a5,0x10
20405184:	fd842783          	lw	a5,-40(s0)
20405188:	e789                	bnez	a5,20405192 <__metal_driver_sifive_test0_exit+0x32>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_test0.c:19 (discriminator 1)
2040518a:	6795                	lui	a5,0x5
2040518c:	55578793          	addi	a5,a5,1365 # 5555 <__heap_size+0x4d55>
20405190:	a021                	j	20405198 <__metal_driver_sifive_test0_exit+0x38>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_test0.c:19 (discriminator 2)
20405192:	678d                	lui	a5,0x3
20405194:	33378793          	addi	a5,a5,819 # 3333 <__heap_size+0x2b33>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_test0.c:19 (discriminator 4)
20405198:	97ba                	add	a5,a5,a4
2040519a:	fef42423          	sw	a5,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_test0.c:21 (discriminator 1)
    while (1) {
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_TEST0_FINISHER_OFFSET)) = out;
2040519e:	fec42783          	lw	a5,-20(s0)
204051a2:	fe842703          	lw	a4,-24(s0)
204051a6:	c398                	sw	a4,0(a5)
204051a8:	bfdd                	j	2040519e <__metal_driver_sifive_test0_exit+0x3e>

204051aa <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:734
{
204051aa:	1101                	addi	sp,sp,-32
204051ac:	ce22                	sw	s0,28(sp)
204051ae:	1000                	addi	s0,sp,32
204051b0:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:735
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204051b4:	fec42703          	lw	a4,-20(s0)
204051b8:	800007b7          	lui	a5,0x80000
204051bc:	74078793          	addi	a5,a5,1856 # 80000740 <metal_segment_heap_target_end+0xfffff2cc>
204051c0:	00f71563          	bne	a4,a5,204051ca <__metal_driver_sifive_uart0_control_base+0x20>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:736
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
204051c4:	100137b7          	lui	a5,0x10013
204051c8:	a011                	j	204051cc <__metal_driver_sifive_uart0_control_base+0x22>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:739
		return 0;
204051ca:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:741
}
204051cc:	853e                	mv	a0,a5
204051ce:	4472                	lw	s0,28(sp)
204051d0:	6105                	addi	sp,sp,32
204051d2:	8082                	ret

204051d4 <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:764
{
204051d4:	1101                	addi	sp,sp,-32
204051d6:	ce22                	sw	s0,28(sp)
204051d8:	1000                	addi	s0,sp,32
204051da:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:765
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204051de:	fec42703          	lw	a4,-20(s0)
204051e2:	800007b7          	lui	a5,0x80000
204051e6:	74078793          	addi	a5,a5,1856 # 80000740 <metal_segment_heap_target_end+0xfffff2cc>
204051ea:	00f71763          	bne	a4,a5,204051f8 <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:766
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
204051ee:	800007b7          	lui	a5,0x80000
204051f2:	44078793          	addi	a5,a5,1088 # 80000440 <metal_segment_heap_target_end+0xffffefcc>
204051f6:	a011                	j	204051fa <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:769
		return 0;
204051f8:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:771
}
204051fa:	853e                	mv	a0,a5
204051fc:	4472                	lw	s0,28(sp)
204051fe:	6105                	addi	sp,sp,32
20405200:	8082                	ret

20405202 <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:774
{
20405202:	1101                	addi	sp,sp,-32
20405204:	ce22                	sw	s0,28(sp)
20405206:	1000                	addi	s0,sp,32
20405208:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:775
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
2040520c:	fec42703          	lw	a4,-20(s0)
20405210:	800007b7          	lui	a5,0x80000
20405214:	74078793          	addi	a5,a5,1856 # 80000740 <metal_segment_heap_target_end+0xfffff2cc>
20405218:	00f71463          	bne	a4,a5,20405220 <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:776
		return 5;
2040521c:	4795                	li	a5,5
2040521e:	a011                	j	20405222 <__metal_driver_sifive_uart0_interrupt_line+0x20>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:779
		return 0;
20405220:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:781
}
20405222:	853e                	mv	a0,a5
20405224:	4472                	lw	s0,28(sp)
20405226:	6105                	addi	sp,sp,32
20405228:	8082                	ret

2040522a <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:784
{
2040522a:	1101                	addi	sp,sp,-32
2040522c:	ce22                	sw	s0,28(sp)
2040522e:	1000                	addi	s0,sp,32
20405230:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:785
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405234:	fec42703          	lw	a4,-20(s0)
20405238:	800007b7          	lui	a5,0x80000
2040523c:	74078793          	addi	a5,a5,1856 # 80000740 <metal_segment_heap_target_end+0xfffff2cc>
20405240:	00f71763          	bne	a4,a5,2040524e <__metal_driver_sifive_uart0_clock+0x24>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:786
		return (struct metal_clock *)&__metal_dt_clock_4.clock;
20405244:	800007b7          	lui	a5,0x80000
20405248:	77878793          	addi	a5,a5,1912 # 80000778 <metal_segment_heap_target_end+0xfffff304>
2040524c:	a011                	j	20405250 <__metal_driver_sifive_uart0_clock+0x26>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:789
		return 0;
2040524e:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:791
}
20405250:	853e                	mv	a0,a5
20405252:	4472                	lw	s0,28(sp)
20405254:	6105                	addi	sp,sp,32
20405256:	8082                	ret

20405258 <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:794
{
20405258:	1101                	addi	sp,sp,-32
2040525a:	ce22                	sw	s0,28(sp)
2040525c:	1000                	addi	s0,sp,32
2040525e:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:795
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405262:	fec42703          	lw	a4,-20(s0)
20405266:	800007b7          	lui	a5,0x80000
2040526a:	74078793          	addi	a5,a5,1856 # 80000740 <metal_segment_heap_target_end+0xfffff2cc>
2040526e:	00f71563          	bne	a4,a5,20405278 <__metal_driver_sifive_uart0_pinmux+0x20>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:796
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20405272:	81c18793          	addi	a5,gp,-2020 # 800007a4 <__metal_dt_gpio_10012000>
20405276:	a011                	j	2040527a <__metal_driver_sifive_uart0_pinmux+0x22>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:799
		return 0;
20405278:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:801
}
2040527a:	853e                	mv	a0,a5
2040527c:	4472                	lw	s0,28(sp)
2040527e:	6105                	addi	sp,sp,32
20405280:	8082                	ret

20405282 <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:804
{
20405282:	1101                	addi	sp,sp,-32
20405284:	ce22                	sw	s0,28(sp)
20405286:	1000                	addi	s0,sp,32
20405288:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:805
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
2040528c:	fec42703          	lw	a4,-20(s0)
20405290:	800007b7          	lui	a5,0x80000
20405294:	74078793          	addi	a5,a5,1856 # 80000740 <metal_segment_heap_target_end+0xfffff2cc>
20405298:	00f71563          	bne	a4,a5,204052a2 <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:806
		return 196608;
2040529c:	000307b7          	lui	a5,0x30
204052a0:	a011                	j	204052a4 <__metal_driver_sifive_uart0_pinmux_output_selector+0x22>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:809
		return 0;
204052a2:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:811
}
204052a4:	853e                	mv	a0,a5
204052a6:	4472                	lw	s0,28(sp)
204052a8:	6105                	addi	sp,sp,32
204052aa:	8082                	ret

204052ac <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:814
{
204052ac:	1101                	addi	sp,sp,-32
204052ae:	ce22                	sw	s0,28(sp)
204052b0:	1000                	addi	s0,sp,32
204052b2:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:815
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204052b6:	fec42703          	lw	a4,-20(s0)
204052ba:	800007b7          	lui	a5,0x80000
204052be:	74078793          	addi	a5,a5,1856 # 80000740 <metal_segment_heap_target_end+0xfffff2cc>
204052c2:	00f71563          	bne	a4,a5,204052cc <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:816
		return 196608;
204052c6:	000307b7          	lui	a5,0x30
204052ca:	a011                	j	204052ce <__metal_driver_sifive_uart0_pinmux_source_selector+0x22>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:819
		return 0;
204052cc:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:821
}
204052ce:	853e                	mv	a0,a5
204052d0:	4472                	lw	s0,28(sp)
204052d2:	6105                	addi	sp,sp,32
204052d4:	8082                	ret

204052d6 <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
204052d6:	1101                	addi	sp,sp,-32
204052d8:	ce06                	sw	ra,28(sp)
204052da:	cc22                	sw	s0,24(sp)
204052dc:	1000                	addi	s0,sp,32
204052de:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
204052e2:	fec42503          	lw	a0,-20(s0)
204052e6:	35fd                	jal	204051d4 <__metal_driver_sifive_uart0_interrupt_parent>
204052e8:	87aa                	mv	a5,a0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:34
}
204052ea:	853e                	mv	a0,a5
204052ec:	40f2                	lw	ra,28(sp)
204052ee:	4462                	lw	s0,24(sp)
204052f0:	6105                	addi	sp,sp,32
204052f2:	8082                	ret

204052f4 <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
204052f4:	1101                	addi	sp,sp,-32
204052f6:	ce06                	sw	ra,28(sp)
204052f8:	cc22                	sw	s0,24(sp)
204052fa:	1000                	addi	s0,sp,32
204052fc:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
20405300:	fec42503          	lw	a0,-20(s0)
20405304:	3dfd                	jal	20405202 <__metal_driver_sifive_uart0_interrupt_line>
20405306:	87aa                	mv	a5,a0
20405308:	02078793          	addi	a5,a5,32 # 30020 <__heap_size+0x2f820>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:39
}
2040530c:	853e                	mv	a0,a5
2040530e:	40f2                	lw	ra,28(sp)
20405310:	4462                	lw	s0,24(sp)
20405312:	6105                	addi	sp,sp,32
20405314:	8082                	ret

20405316 <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
20405316:	7179                	addi	sp,sp,-48
20405318:	d606                	sw	ra,44(sp)
2040531a:	d422                	sw	s0,40(sp)
2040531c:	1800                	addi	s0,sp,48
2040531e:	fca42e23          	sw	a0,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
20405322:	fdc42503          	lw	a0,-36(s0)
20405326:	3551                	jal	204051aa <__metal_driver_sifive_uart0_control_base>
20405328:	87aa                	mv	a5,a0
2040532a:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
2040532e:	fec42783          	lw	a5,-20(s0)
20405332:	439c                	lw	a5,0(a5)
20405334:	fff7c793          	not	a5,a5
20405338:	83fd                	srli	a5,a5,0x1f
2040533a:	0ff7f793          	andi	a5,a5,255
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:47
}
2040533e:	853e                	mv	a0,a5
20405340:	50b2                	lw	ra,44(sp)
20405342:	5422                	lw	s0,40(sp)
20405344:	6145                	addi	sp,sp,48
20405346:	8082                	ret

20405348 <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
20405348:	7179                	addi	sp,sp,-48
2040534a:	d606                	sw	ra,44(sp)
2040534c:	d422                	sw	s0,40(sp)
2040534e:	1800                	addi	s0,sp,48
20405350:	fca42e23          	sw	a0,-36(s0)
20405354:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20405358:	fdc42503          	lw	a0,-36(s0)
2040535c:	e4fff0ef          	jal	ra,204051aa <__metal_driver_sifive_uart0_control_base>
20405360:	87aa                	mv	a5,a0
20405362:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
20405366:	0001                	nop
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
20405368:	fdc42503          	lw	a0,-36(s0)
2040536c:	376d                	jal	20405316 <__metal_driver_sifive_uart0_txready>
2040536e:	87aa                	mv	a5,a0
20405370:	dfe5                	beqz	a5,20405368 <__metal_driver_sifive_uart0_putc+0x20>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
20405372:	fec42783          	lw	a5,-20(s0)
20405376:	fd842703          	lw	a4,-40(s0)
2040537a:	c398                	sw	a4,0(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
2040537c:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:59
}
2040537e:	853e                	mv	a0,a5
20405380:	50b2                	lw	ra,44(sp)
20405382:	5422                	lw	s0,40(sp)
20405384:	6145                	addi	sp,sp,48
20405386:	8082                	ret

20405388 <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
20405388:	7179                	addi	sp,sp,-48
2040538a:	d606                	sw	ra,44(sp)
2040538c:	d422                	sw	s0,40(sp)
2040538e:	1800                	addi	s0,sp,48
20405390:	fca42e23          	sw	a0,-36(s0)
20405394:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20405398:	fdc42503          	lw	a0,-36(s0)
2040539c:	e0fff0ef          	jal	ra,204051aa <__metal_driver_sifive_uart0_control_base>
204053a0:	87aa                	mv	a5,a0
204053a2:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
204053a6:	fec42783          	lw	a5,-20(s0)
204053aa:	0791                	addi	a5,a5,4
204053ac:	439c                	lw	a5,0(a5)
204053ae:	fef42423          	sw	a5,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
204053b2:	fe842783          	lw	a5,-24(s0)
204053b6:	0007d763          	bgez	a5,204053c4 <__metal_driver_sifive_uart0_getc+0x3c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
204053ba:	fd842783          	lw	a5,-40(s0)
204053be:	577d                	li	a4,-1
204053c0:	c398                	sw	a4,0(a5)
204053c2:	a801                	j	204053d2 <__metal_driver_sifive_uart0_getc+0x4a>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
204053c4:	fe842783          	lw	a5,-24(s0)
204053c8:	0ff7f713          	andi	a4,a5,255
204053cc:	fd842783          	lw	a5,-40(s0)
204053d0:	c398                	sw	a4,0(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
204053d2:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:74
}
204053d4:	853e                	mv	a0,a5
204053d6:	50b2                	lw	ra,44(sp)
204053d8:	5422                	lw	s0,40(sp)
204053da:	6145                	addi	sp,sp,48
204053dc:	8082                	ret

204053de <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
204053de:	7179                	addi	sp,sp,-48
204053e0:	d622                	sw	s0,44(sp)
204053e2:	1800                	addi	s0,sp,48
204053e4:	fca42e23          	sw	a0,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
204053e8:	fdc42783          	lw	a5,-36(s0)
204053ec:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
204053f0:	fec42783          	lw	a5,-20(s0)
204053f4:	43dc                	lw	a5,4(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:81
}
204053f6:	853e                	mv	a0,a5
204053f8:	5432                	lw	s0,44(sp)
204053fa:	6145                	addi	sp,sp,48
204053fc:	8082                	ret

204053fe <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
204053fe:	7179                	addi	sp,sp,-48
20405400:	d606                	sw	ra,44(sp)
20405402:	d422                	sw	s0,40(sp)
20405404:	1800                	addi	s0,sp,48
20405406:	fca42e23          	sw	a0,-36(s0)
2040540a:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
2040540e:	fdc42783          	lw	a5,-36(s0)
20405412:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
20405416:	fdc42503          	lw	a0,-36(s0)
2040541a:	d91ff0ef          	jal	ra,204051aa <__metal_driver_sifive_uart0_control_base>
2040541e:	87aa                	mv	a5,a0
20405420:	fef42423          	sw	a5,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20405424:	fdc42503          	lw	a0,-36(s0)
20405428:	e03ff0ef          	jal	ra,2040522a <__metal_driver_sifive_uart0_clock>
2040542c:	fea42223          	sw	a0,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
20405430:	fd842703          	lw	a4,-40(s0)
20405434:	fec42783          	lw	a5,-20(s0)
20405438:	c3d8                	sw	a4,4(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
2040543a:	fe442783          	lw	a5,-28(s0)
2040543e:	cbb1                	beqz	a5,20405492 <__metal_driver_sifive_uart0_set_baud_rate+0x94>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
20405440:	fe442783          	lw	a5,-28(s0)
20405444:	439c                	lw	a5,0(a5)
20405446:	439c                	lw	a5,0(a5)
20405448:	fe442503          	lw	a0,-28(s0)
2040544c:	9782                	jalr	a5
2040544e:	fea42023          	sw	a0,-32(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
20405452:	fe042703          	lw	a4,-32(s0)
20405456:	fd842783          	lw	a5,-40(s0)
2040545a:	02f747b3          	div	a5,a4,a5
2040545e:	fff78713          	addi	a4,a5,-1
20405462:	fe842783          	lw	a5,-24(s0)
20405466:	07e1                	addi	a5,a5,24
20405468:	c398                	sw	a4,0(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
2040546a:	fe842783          	lw	a5,-24(s0)
2040546e:	07a1                	addi	a5,a5,8
20405470:	439c                	lw	a5,0(a5)
20405472:	fe842703          	lw	a4,-24(s0)
20405476:	0721                	addi	a4,a4,8
20405478:	0017e793          	ori	a5,a5,1
2040547c:	c31c                	sw	a5,0(a4)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
2040547e:	fe842783          	lw	a5,-24(s0)
20405482:	07b1                	addi	a5,a5,12
20405484:	439c                	lw	a5,0(a5)
20405486:	fe842703          	lw	a4,-24(s0)
2040548a:	0731                	addi	a4,a4,12
2040548c:	0017e793          	ori	a5,a5,1
20405490:	c31c                	sw	a5,0(a4)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
20405492:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:98
}
20405494:	853e                	mv	a0,a5
20405496:	50b2                	lw	ra,44(sp)
20405498:	5422                	lw	s0,40(sp)
2040549a:	6145                	addi	sp,sp,48
2040549c:	8082                	ret

2040549e <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
2040549e:	7139                	addi	sp,sp,-64
204054a0:	de06                	sw	ra,60(sp)
204054a2:	dc22                	sw	s0,56(sp)
204054a4:	0080                	addi	s0,sp,64
204054a6:	fca42623          	sw	a0,-52(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
204054aa:	fcc42783          	lw	a5,-52(s0)
204054ae:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
204054b2:	fcc42503          	lw	a0,-52(s0)
204054b6:	cf5ff0ef          	jal	ra,204051aa <__metal_driver_sifive_uart0_control_base>
204054ba:	87aa                	mv	a5,a0
204054bc:	fef42423          	sw	a5,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
204054c0:	fcc42503          	lw	a0,-52(s0)
204054c4:	d67ff0ef          	jal	ra,2040522a <__metal_driver_sifive_uart0_clock>
204054c8:	fea42223          	sw	a0,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
204054cc:	fe842783          	lw	a5,-24(s0)
204054d0:	07a1                	addi	a5,a5,8
204054d2:	4398                	lw	a4,0(a5)
204054d4:	fe842783          	lw	a5,-24(s0)
204054d8:	07a1                	addi	a5,a5,8
204054da:	86be                	mv	a3,a5
204054dc:	fff907b7          	lui	a5,0xfff90
204054e0:	17fd                	addi	a5,a5,-1
204054e2:	8ff9                	and	a5,a5,a4
204054e4:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
204054e6:	fe842783          	lw	a5,-24(s0)
204054ea:	07a1                	addi	a5,a5,8
204054ec:	4398                	lw	a4,0(a5)
204054ee:	fe842783          	lw	a5,-24(s0)
204054f2:	07a1                	addi	a5,a5,8
204054f4:	86be                	mv	a3,a5
204054f6:	67c1                	lui	a5,0x10
204054f8:	8fd9                	or	a5,a5,a4
204054fa:	c29c                	sw	a5,0(a3)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
204054fc:	0001                	nop
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
204054fe:	fe842783          	lw	a5,-24(s0)
20405502:	07d1                	addi	a5,a5,20
20405504:	439c                	lw	a5,0(a5)
20405506:	8b85                	andi	a5,a5,1
20405508:	dbfd                	beqz	a5,204054fe <pre_rate_change_callback_func+0x60>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
2040550a:	fe842783          	lw	a5,-24(s0)
2040550e:	07a1                	addi	a5,a5,8
20405510:	439c                	lw	a5,0(a5)
20405512:	8b89                	andi	a5,a5,2
20405514:	c399                	beqz	a5,2040551a <pre_rate_change_callback_func+0x7c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
20405516:	47a5                	li	a5,9
20405518:	a011                	j	2040551c <pre_rate_change_callback_func+0x7e>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
2040551a:	47a9                	li	a5,10
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
2040551c:	fef42023          	sw	a5,-32(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
20405520:	fe442783          	lw	a5,-28(s0)
20405524:	439c                	lw	a5,0(a5)
20405526:	439c                	lw	a5,0(a5)
20405528:	fe442503          	lw	a0,-28(s0)
2040552c:	9782                	jalr	a5
2040552e:	fca42e23          	sw	a0,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
20405532:	fe042703          	lw	a4,-32(s0)
20405536:	fdc42783          	lw	a5,-36(s0)
2040553a:	02f707b3          	mul	a5,a4,a5
2040553e:	873e                	mv	a4,a5
20405540:	fec42783          	lw	a5,-20(s0)
20405544:	43dc                	lw	a5,4(a5)
20405546:	02f757b3          	divu	a5,a4,a5
2040554a:	fcf42c23          	sw	a5,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
2040554e:	fc042a23          	sw	zero,-44(s0)
20405552:	a039                	j	20405560 <pre_rate_change_callback_func+0xc2>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
20405554:	0001                	nop
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
20405556:	fd442783          	lw	a5,-44(s0)
2040555a:	0785                	addi	a5,a5,1
2040555c:	fcf42a23          	sw	a5,-44(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
20405560:	fd442783          	lw	a5,-44(s0)
20405564:	fd842703          	lw	a4,-40(s0)
20405568:	fee7c6e3          	blt	a5,a4,20405554 <pre_rate_change_callback_func+0xb6>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:124
}
2040556c:	0001                	nop
2040556e:	50f2                	lw	ra,60(sp)
20405570:	5462                	lw	s0,56(sp)
20405572:	6121                	addi	sp,sp,64
20405574:	8082                	ret

20405576 <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
20405576:	7179                	addi	sp,sp,-48
20405578:	d606                	sw	ra,44(sp)
2040557a:	d422                	sw	s0,40(sp)
2040557c:	1800                	addi	s0,sp,48
2040557e:	fca42e23          	sw	a0,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
20405582:	fdc42783          	lw	a5,-36(s0)
20405586:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
2040558a:	fec42703          	lw	a4,-20(s0)
2040558e:	fec42783          	lw	a5,-20(s0)
20405592:	43dc                	lw	a5,4(a5)
20405594:	85be                	mv	a1,a5
20405596:	853a                	mv	a0,a4
20405598:	c02fc0ef          	jal	ra,2040199a <metal_uart_set_baud_rate>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:130
}
2040559c:	0001                	nop
2040559e:	50b2                	lw	ra,44(sp)
204055a0:	5422                	lw	s0,40(sp)
204055a2:	6145                	addi	sp,sp,48
204055a4:	8082                	ret

204055a6 <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
204055a6:	7139                	addi	sp,sp,-64
204055a8:	de06                	sw	ra,60(sp)
204055aa:	dc22                	sw	s0,56(sp)
204055ac:	0080                	addi	s0,sp,64
204055ae:	fca42623          	sw	a0,-52(s0)
204055b2:	fcb42423          	sw	a1,-56(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
204055b6:	fcc42783          	lw	a5,-52(s0)
204055ba:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
204055be:	fcc42503          	lw	a0,-52(s0)
204055c2:	c69ff0ef          	jal	ra,2040522a <__metal_driver_sifive_uart0_clock>
204055c6:	fea42423          	sw	a0,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
204055ca:	fcc42503          	lw	a0,-52(s0)
204055ce:	c8bff0ef          	jal	ra,20405258 <__metal_driver_sifive_uart0_pinmux>
204055d2:	fea42223          	sw	a0,-28(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
204055d6:	fe842783          	lw	a5,-24(s0)
204055da:	c7b9                	beqz	a5,20405628 <__metal_driver_sifive_uart0_init+0x82>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
204055dc:	fec42783          	lw	a5,-20(s0)
204055e0:	20405737          	lui	a4,0x20405
204055e4:	49e70713          	addi	a4,a4,1182 # 2040549e <pre_rate_change_callback_func>
204055e8:	c798                	sw	a4,8(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
204055ea:	fec42783          	lw	a5,-20(s0)
204055ee:	fcc42703          	lw	a4,-52(s0)
204055f2:	c7d8                	sw	a4,12(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
204055f4:	fec42783          	lw	a5,-20(s0)
204055f8:	07a1                	addi	a5,a5,8
204055fa:	85be                	mv	a1,a5
204055fc:	fe842503          	lw	a0,-24(s0)
20405600:	2aad                	jal	2040577a <metal_clock_register_pre_rate_change_callback>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
20405602:	fec42783          	lw	a5,-20(s0)
20405606:	20405737          	lui	a4,0x20405
2040560a:	57670713          	addi	a4,a4,1398 # 20405576 <post_rate_change_callback_func>
2040560e:	cbd8                	sw	a4,20(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
20405610:	fec42783          	lw	a5,-20(s0)
20405614:	fcc42703          	lw	a4,-52(s0)
20405618:	cf98                	sw	a4,24(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
2040561a:	fec42783          	lw	a5,-20(s0)
2040561e:	07d1                	addi	a5,a5,20
20405620:	85be                	mv	a1,a5
20405622:	fe842503          	lw	a0,-24(s0)
20405626:	2251                	jal	204057aa <metal_clock_register_post_rate_change_callback>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
20405628:	fec42783          	lw	a5,-20(s0)
2040562c:	fc842583          	lw	a1,-56(s0)
20405630:	853e                	mv	a0,a5
20405632:	b68fc0ef          	jal	ra,2040199a <metal_uart_set_baud_rate>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
20405636:	fe442783          	lw	a5,-28(s0)
2040563a:	cb95                	beqz	a5,2040566e <__metal_driver_sifive_uart0_init+0xc8>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
2040563c:	fcc42503          	lw	a0,-52(s0)
20405640:	c43ff0ef          	jal	ra,20405282 <__metal_driver_sifive_uart0_pinmux_output_selector>
20405644:	87aa                	mv	a5,a0
20405646:	fef42023          	sw	a5,-32(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
2040564a:	fcc42503          	lw	a0,-52(s0)
2040564e:	c5fff0ef          	jal	ra,204052ac <__metal_driver_sifive_uart0_pinmux_source_selector>
20405652:	87aa                	mv	a5,a0
20405654:	fcf42e23          	sw	a5,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
20405658:	fe442783          	lw	a5,-28(s0)
2040565c:	439c                	lw	a5,0(a5)
2040565e:	53dc                	lw	a5,36(a5)
20405660:	fdc42603          	lw	a2,-36(s0)
20405664:	fe042583          	lw	a1,-32(s0)
20405668:	fe442503          	lw	a0,-28(s0)
2040566c:	9782                	jalr	a5
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
2040566e:	0001                	nop
20405670:	50f2                	lw	ra,60(sp)
20405672:	5462                	lw	s0,56(sp)
20405674:	6121                	addi	sp,sp,64
20405676:	8082                	ret

20405678 <_metal_clock_call_all_callbacks>:
_metal_clock_call_all_callbacks():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:48
typedef struct _metal_clock_callback_t metal_clock_callback;

/*!
 * @brief Call all callbacks in the linked list, if any are registered
 */
__inline__ void _metal_clock_call_all_callbacks(const metal_clock_callback *const list) {
20405678:	7179                	addi	sp,sp,-48
2040567a:	d606                	sw	ra,44(sp)
2040567c:	d422                	sw	s0,40(sp)
2040567e:	1800                	addi	s0,sp,48
20405680:	fca42e23          	sw	a0,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:49
    const metal_clock_callback *current = list;
20405684:	fdc42783          	lw	a5,-36(s0)
20405688:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:50
    while (current) {
2040568c:	a831                	j	204056a8 <_metal_clock_call_all_callbacks+0x30>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:51
        current->callback(current->priv);
2040568e:	fec42783          	lw	a5,-20(s0)
20405692:	4398                	lw	a4,0(a5)
20405694:	fec42783          	lw	a5,-20(s0)
20405698:	43dc                	lw	a5,4(a5)
2040569a:	853e                	mv	a0,a5
2040569c:	9702                	jalr	a4
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:52
        current = current->_next;
2040569e:	fec42783          	lw	a5,-20(s0)
204056a2:	479c                	lw	a5,8(a5)
204056a4:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:50
    while (current) {
204056a8:	fec42783          	lw	a5,-20(s0)
204056ac:	f3ed                	bnez	a5,2040568e <_metal_clock_call_all_callbacks+0x16>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:54
    }
}
204056ae:	0001                	nop
204056b0:	50b2                	lw	ra,44(sp)
204056b2:	5422                	lw	s0,40(sp)
204056b4:	6145                	addi	sp,sp,48
204056b6:	8082                	ret

204056b8 <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:59

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
204056b8:	7179                	addi	sp,sp,-48
204056ba:	d622                	sw	s0,44(sp)
204056bc:	1800                	addi	s0,sp,48
204056be:	fca42e23          	sw	a0,-36(s0)
204056c2:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
204056c6:	fd842783          	lw	a5,-40(s0)
204056ca:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:62

    if (!list) {
204056ce:	fdc42783          	lw	a5,-36(s0)
204056d2:	e781                	bnez	a5,204056da <_metal_clock_append_to_callbacks+0x22>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:63
        return cb;
204056d4:	fd842783          	lw	a5,-40(s0)
204056d8:	a035                	j	20405704 <_metal_clock_append_to_callbacks+0x4c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
204056da:	fdc42783          	lw	a5,-36(s0)
204056de:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
204056e2:	a031                	j	204056ee <_metal_clock_append_to_callbacks+0x36>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:69
        current = current->_next;
204056e4:	fec42783          	lw	a5,-20(s0)
204056e8:	479c                	lw	a5,8(a5)
204056ea:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
204056ee:	fec42783          	lw	a5,-20(s0)
204056f2:	479c                	lw	a5,8(a5)
204056f4:	fbe5                	bnez	a5,204056e4 <_metal_clock_append_to_callbacks+0x2c>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
204056f6:	fec42783          	lw	a5,-20(s0)
204056fa:	fd842703          	lw	a4,-40(s0)
204056fe:	c798                	sw	a4,8(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:74

    return list;
20405700:	fdc42783          	lw	a5,-36(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:75
}
20405704:	853e                	mv	a0,a5
20405706:	5432                	lw	s0,44(sp)
20405708:	6145                	addi	sp,sp,48
2040570a:	8082                	ret

2040570c <metal_clock_get_rate_hz>:
metal_clock_get_rate_hz():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:105
 * @brief Returns the current rate of the given clock
 *
 * @param clk The handle for the clock
 * @return The current rate of the clock in Hz
 */
__inline__ long metal_clock_get_rate_hz(const struct metal_clock *clk) { return clk->vtable->get_rate_hz(clk); }
2040570c:	1101                	addi	sp,sp,-32
2040570e:	ce06                	sw	ra,28(sp)
20405710:	cc22                	sw	s0,24(sp)
20405712:	1000                	addi	s0,sp,32
20405714:	fea42623          	sw	a0,-20(s0)
20405718:	fec42783          	lw	a5,-20(s0)
2040571c:	439c                	lw	a5,0(a5)
2040571e:	439c                	lw	a5,0(a5)
20405720:	fec42503          	lw	a0,-20(s0)
20405724:	9782                	jalr	a5
20405726:	87aa                	mv	a5,a0
20405728:	853e                	mv	a0,a5
2040572a:	40f2                	lw	ra,28(sp)
2040572c:	4462                	lw	s0,24(sp)
2040572e:	6105                	addi	sp,sp,32
20405730:	8082                	ret

20405732 <metal_clock_set_rate_hz>:
metal_clock_set_rate_hz():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:122
 *
 * Prior to and after the rate change of the clock, this will call the registered
 * pre- and post-rate change callbacks.
 */
__inline__ long metal_clock_set_rate_hz(struct metal_clock *clk, long hz)
{
20405732:	7179                	addi	sp,sp,-48
20405734:	d606                	sw	ra,44(sp)
20405736:	d422                	sw	s0,40(sp)
20405738:	1800                	addi	s0,sp,48
2040573a:	fca42e23          	sw	a0,-36(s0)
2040573e:	fcb42c23          	sw	a1,-40(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:123
    _metal_clock_call_all_callbacks(clk->_pre_rate_change_callback);
20405742:	fdc42783          	lw	a5,-36(s0)
20405746:	43dc                	lw	a5,4(a5)
20405748:	853e                	mv	a0,a5
2040574a:	373d                	jal	20405678 <_metal_clock_call_all_callbacks>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:125

    long out = clk->vtable->set_rate_hz(clk, hz);
2040574c:	fdc42783          	lw	a5,-36(s0)
20405750:	439c                	lw	a5,0(a5)
20405752:	43dc                	lw	a5,4(a5)
20405754:	fd842583          	lw	a1,-40(s0)
20405758:	fdc42503          	lw	a0,-36(s0)
2040575c:	9782                	jalr	a5
2040575e:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:127

    _metal_clock_call_all_callbacks(clk->_post_rate_change_callback);
20405762:	fdc42783          	lw	a5,-36(s0)
20405766:	479c                	lw	a5,8(a5)
20405768:	853e                	mv	a0,a5
2040576a:	3739                	jal	20405678 <_metal_clock_call_all_callbacks>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:129

    return out;
2040576c:	fec42783          	lw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:130
}
20405770:	853e                	mv	a0,a5
20405772:	50b2                	lw	ra,44(sp)
20405774:	5422                	lw	s0,40(sp)
20405776:	6145                	addi	sp,sp,48
20405778:	8082                	ret

2040577a <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
2040577a:	1101                	addi	sp,sp,-32
2040577c:	ce06                	sw	ra,28(sp)
2040577e:	cc22                	sw	s0,24(sp)
20405780:	1000                	addi	s0,sp,32
20405782:	fea42623          	sw	a0,-20(s0)
20405786:	feb42423          	sw	a1,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
2040578a:	fec42783          	lw	a5,-20(s0)
2040578e:	43dc                	lw	a5,4(a5)
20405790:	fe842583          	lw	a1,-24(s0)
20405794:	853e                	mv	a0,a5
20405796:	370d                	jal	204056b8 <_metal_clock_append_to_callbacks>
20405798:	872a                	mv	a4,a0
2040579a:	fec42783          	lw	a5,-20(s0)
2040579e:	c3d8                	sw	a4,4(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:141
}
204057a0:	0001                	nop
204057a2:	40f2                	lw	ra,28(sp)
204057a4:	4462                	lw	s0,24(sp)
204057a6:	6105                	addi	sp,sp,32
204057a8:	8082                	ret

204057aa <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
204057aa:	1101                	addi	sp,sp,-32
204057ac:	ce06                	sw	ra,28(sp)
204057ae:	cc22                	sw	s0,24(sp)
204057b0:	1000                	addi	s0,sp,32
204057b2:	fea42623          	sw	a0,-20(s0)
204057b6:	feb42423          	sw	a1,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
204057ba:	fec42783          	lw	a5,-20(s0)
204057be:	479c                	lw	a5,8(a5)
204057c0:	fe842583          	lw	a1,-24(s0)
204057c4:	853e                	mv	a0,a5
204057c6:	3dcd                	jal	204056b8 <_metal_clock_append_to_callbacks>
204057c8:	872a                	mv	a4,a0
204057ca:	fec42783          	lw	a5,-20(s0)
204057ce:	c798                	sw	a4,8(a5)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/clock.h:152
}
204057d0:	0001                	nop
204057d2:	40f2                	lw	ra,28(sp)
204057d4:	4462                	lw	s0,24(sp)
204057d6:	6105                	addi	sp,sp,32
204057d8:	8082                	ret

204057da <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
204057da:	1101                	addi	sp,sp,-32
204057dc:	ce06                	sw	ra,28(sp)
204057de:	cc22                	sw	s0,24(sp)
204057e0:	1000                	addi	s0,sp,32
204057e2:	fea42623          	sw	a0,-20(s0)
204057e6:	fec42783          	lw	a5,-20(s0)
204057ea:	439c                	lw	a5,0(a5)
204057ec:	57dc                	lw	a5,44(a5)
204057ee:	fec42503          	lw	a0,-20(s0)
204057f2:	9782                	jalr	a5
204057f4:	87aa                	mv	a5,a0
204057f6:	853e                	mv	a0,a5
204057f8:	40f2                	lw	ra,28(sp)
204057fa:	4462                	lw	s0,24(sp)
204057fc:	6105                	addi	sp,sp,32
204057fe:	8082                	ret

20405800 <metal_cpu_get>:
metal_cpu_get():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
20405800:	1101                	addi	sp,sp,-32
20405802:	ce22                	sw	s0,28(sp)
20405804:	1000                	addi	s0,sp,32
20405806:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
2040580a:	fec42783          	lw	a5,-20(s0)
2040580e:	eb89                	bnez	a5,20405820 <metal_cpu_get+0x20>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
20405810:	fec42703          	lw	a4,-20(s0)
20405814:	070a                	slli	a4,a4,0x2
20405816:	80c18793          	addi	a5,gp,-2036 # 80000794 <__metal_cpu_table>
2040581a:	97ba                	add	a5,a5,a4
2040581c:	439c                	lw	a5,0(a5)
2040581e:	a011                	j	20405822 <metal_cpu_get+0x22>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/cpu.c:12
    }   
    return NULL;
20405820:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/cpu.c:13
}
20405822:	853e                	mv	a0,a5
20405824:	4472                	lw	s0,28(sp)
20405826:	6105                	addi	sp,sp,32
20405828:	8082                	ret

2040582a <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
2040582a:	1101                	addi	sp,sp,-32
2040582c:	ce22                	sw	s0,28(sp)
2040582e:	1000                	addi	s0,sp,32
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
20405830:	f14027f3          	csrr	a5,mhartid
20405834:	fef42623          	sw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/cpu.c:20
    return mhartid;
20405838:	fec42783          	lw	a5,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/cpu.c:22
#endif
}
2040583c:	853e                	mv	a0,a5
2040583e:	4472                	lw	s0,28(sp)
20405840:	6105                	addi	sp,sp,32
20405842:	8082                	ret

20405844 <__metal_shutdown_exit>:
__metal_shutdown_exit():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/metal/shutdown.h:23
struct __metal_shutdown {
    const struct __metal_shutdown_vtable *vtable;
};

__inline__ void __metal_shutdown_exit(const struct __metal_shutdown *sd, int code) __attribute__((noreturn));
__inline__ void __metal_shutdown_exit(const struct __metal_shutdown *sd, int code) { sd->vtable->exit(sd, code); }
20405844:	1101                	addi	sp,sp,-32
20405846:	ce06                	sw	ra,28(sp)
20405848:	cc22                	sw	s0,24(sp)
2040584a:	1000                	addi	s0,sp,32
2040584c:	fea42623          	sw	a0,-20(s0)
20405850:	feb42423          	sw	a1,-24(s0)
20405854:	fec42783          	lw	a5,-20(s0)
20405858:	439c                	lw	a5,0(a5)
2040585a:	439c                	lw	a5,0(a5)
2040585c:	fe842583          	lw	a1,-24(s0)
20405860:	fec42503          	lw	a0,-20(s0)
20405864:	9782                	jalr	a5

20405866 <metal_shutdown>:
metal_shutdown():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/shutdown.c:11

extern __inline__ void __metal_shutdown_exit(const struct __metal_shutdown *sd, int code);

#if defined(__METAL_DT_SHUTDOWN_HANDLE)
void metal_shutdown(int code)
{
20405866:	1101                	addi	sp,sp,-32
20405868:	ce06                	sw	ra,28(sp)
2040586a:	cc22                	sw	s0,24(sp)
2040586c:	1000                	addi	s0,sp,32
2040586e:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/shutdown.c:12
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
20405872:	fec42583          	lw	a1,-20(s0)
20405876:	82018513          	addi	a0,gp,-2016 # 800007a8 <__metal_dt_test_100000>
2040587a:	37e9                	jal	20405844 <__metal_shutdown_exit>
2040587c:	0000                	unimp
	...

20405880 <__metal_vector_table>:
IRQ_0():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20405880:	a71fc06f          	j	204022f0 <metal_interrupt_vector_handler>

20405884 <IRQ_1>:
IRQ_1():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20405884:	a6dfc06f          	j	204022f0 <metal_interrupt_vector_handler>

20405888 <IRQ_2>:
IRQ_2():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20405888:	a69fc06f          	j	204022f0 <metal_interrupt_vector_handler>

2040588c <IRQ_3>:
IRQ_3():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
2040588c:	a93fc06f          	j	2040231e <metal_software_interrupt_vector_handler>

20405890 <IRQ_4>:
IRQ_4():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20405890:	a61fc06f          	j	204022f0 <metal_interrupt_vector_handler>

20405894 <IRQ_5>:
IRQ_5():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20405894:	a5dfc06f          	j	204022f0 <metal_interrupt_vector_handler>

20405898 <IRQ_6>:
IRQ_6():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20405898:	a59fc06f          	j	204022f0 <metal_interrupt_vector_handler>

2040589c <IRQ_7>:
IRQ_7():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
2040589c:	b75fc06f          	j	20402410 <metal_timer_interrupt_vector_handler>

204058a0 <IRQ_8>:
IRQ_8():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
204058a0:	a51fc06f          	j	204022f0 <metal_interrupt_vector_handler>

204058a4 <IRQ_9>:
IRQ_9():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
204058a4:	a4dfc06f          	j	204022f0 <metal_interrupt_vector_handler>

204058a8 <IRQ_10>:
IRQ_10():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
204058a8:	a49fc06f          	j	204022f0 <metal_interrupt_vector_handler>

204058ac <IRQ_11>:
IRQ_11():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
204058ac:	a45fc06f          	j	204022f0 <metal_interrupt_vector_handler>

204058b0 <IRQ_12>:
IRQ_12():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
204058b0:	a41fc06f          	j	204022f0 <metal_interrupt_vector_handler>

204058b4 <IRQ_13>:
IRQ_13():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
204058b4:	a3dfc06f          	j	204022f0 <metal_interrupt_vector_handler>

204058b8 <IRQ_14>:
IRQ_14():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
204058b8:	a39fc06f          	j	204022f0 <metal_interrupt_vector_handler>

204058bc <IRQ_15>:
IRQ_15():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
204058bc:	a35fc06f          	j	204022f0 <metal_interrupt_vector_handler>

204058c0 <IRQ_LC0>:
IRQ_LC0():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
204058c0:	e33fc06f          	j	204026f2 <metal_lc0_interrupt_vector_handler>

204058c4 <IRQ_LC1>:
IRQ_LC1():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
204058c4:	ec1fc06f          	j	20402784 <metal_lc1_interrupt_vector_handler>

204058c8 <IRQ_LC2>:
IRQ_LC2():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
204058c8:	f4ffc06f          	j	20402816 <metal_lc2_interrupt_vector_handler>

204058cc <IRQ_LC3>:
IRQ_LC3():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
204058cc:	fddfc06f          	j	204028a8 <metal_lc3_interrupt_vector_handler>

204058d0 <IRQ_LC4>:
IRQ_LC4():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
204058d0:	86afd06f          	j	2040293a <metal_lc4_interrupt_vector_handler>

204058d4 <IRQ_LC5>:
IRQ_LC5():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
204058d4:	8f8fd06f          	j	204029cc <metal_lc5_interrupt_vector_handler>

204058d8 <IRQ_LC6>:
IRQ_LC6():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
204058d8:	986fd06f          	j	20402a5e <metal_lc6_interrupt_vector_handler>

204058dc <IRQ_LC7>:
IRQ_LC7():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
204058dc:	a14fd06f          	j	20402af0 <metal_lc7_interrupt_vector_handler>

204058e0 <IRQ_LC8>:
IRQ_LC8():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
204058e0:	aa2fd06f          	j	20402b82 <metal_lc8_interrupt_vector_handler>

204058e4 <IRQ_LC9>:
IRQ_LC9():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
204058e4:	b30fd06f          	j	20402c14 <metal_lc9_interrupt_vector_handler>

204058e8 <IRQ_LC10>:
IRQ_LC10():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
204058e8:	bbefd06f          	j	20402ca6 <metal_lc10_interrupt_vector_handler>

204058ec <IRQ_LC11>:
IRQ_LC11():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
204058ec:	c4cfd06f          	j	20402d38 <metal_lc11_interrupt_vector_handler>

204058f0 <IRQ_LC12>:
IRQ_LC12():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
204058f0:	cdafd06f          	j	20402dca <metal_lc12_interrupt_vector_handler>

204058f4 <IRQ_LC13>:
IRQ_LC13():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
204058f4:	d68fd06f          	j	20402e5c <metal_lc13_interrupt_vector_handler>

204058f8 <IRQ_LC14>:
IRQ_LC14():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
204058f8:	df6fd06f          	j	20402eee <metal_lc14_interrupt_vector_handler>

204058fc <IRQ_LC15>:
IRQ_LC15():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
204058fc:	e84fd06f          	j	20402f80 <metal_lc15_interrupt_vector_handler>

20405900 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:166
{
20405900:	1101                	addi	sp,sp,-32
20405902:	ce22                	sw	s0,28(sp)
20405904:	1000                	addi	s0,sp,32
20405906:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:167
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
2040590a:	fec42703          	lw	a4,-20(s0)
2040590e:	800007b7          	lui	a5,0x80000
20405912:	06078793          	addi	a5,a5,96 # 80000060 <metal_segment_heap_target_end+0xffffebec>
20405916:	00f71763          	bne	a4,a5,20405924 <__metal_driver_fixed_clock_rate+0x24>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:168
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
2040591a:	00f427b7          	lui	a5,0xf42
2040591e:	40078793          	addi	a5,a5,1024 # f42400 <__heap_size+0xf41c00>
20405922:	a825                	j	2040595a <__metal_driver_fixed_clock_rate+0x5a>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:170
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_2) {
20405924:	fec42703          	lw	a4,-20(s0)
20405928:	800007b7          	lui	a5,0x80000
2040592c:	06c78793          	addi	a5,a5,108 # 8000006c <metal_segment_heap_target_end+0xffffebf8>
20405930:	00f71763          	bne	a4,a5,2040593e <__metal_driver_fixed_clock_rate+0x3e>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:171
		return METAL_FIXED_CLOCK_2_CLOCK_FREQUENCY;
20405934:	044aa7b7          	lui	a5,0x44aa
20405938:	20078793          	addi	a5,a5,512 # 44aa200 <__heap_size+0x44a9a00>
2040593c:	a839                	j	2040595a <__metal_driver_fixed_clock_rate+0x5a>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:173
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_5) {
2040593e:	fec42703          	lw	a4,-20(s0)
20405942:	800007b7          	lui	a5,0x80000
20405946:	07878793          	addi	a5,a5,120 # 80000078 <metal_segment_heap_target_end+0xffffec04>
2040594a:	00f71763          	bne	a4,a5,20405958 <__metal_driver_fixed_clock_rate+0x58>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:174
		return METAL_FIXED_CLOCK_5_CLOCK_FREQUENCY;
2040594e:	01e857b7          	lui	a5,0x1e85
20405952:	80078793          	addi	a5,a5,-2048 # 1e84800 <__heap_size+0x1e84000>
20405956:	a011                	j	2040595a <__metal_driver_fixed_clock_rate+0x5a>
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:177
		return 0;
20405958:	4781                	li	a5,0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/bsp/build/debug/./metal/machine.h:179
}
2040595a:	853e                	mv	a0,a5
2040595c:	4472                	lw	s0,28(sp)
2040595e:	6105                	addi	sp,sp,32
20405960:	8082                	ret

20405962 <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
20405962:	1101                	addi	sp,sp,-32
20405964:	ce06                	sw	ra,28(sp)
20405966:	cc22                	sw	s0,24(sp)
20405968:	1000                	addi	s0,sp,32
2040596a:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
2040596e:	fec42503          	lw	a0,-20(s0)
20405972:	3779                	jal	20405900 <__metal_driver_fixed_clock_rate>
20405974:	87aa                	mv	a5,a0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/fixed-clock.c:15
}
20405976:	853e                	mv	a0,a5
20405978:	40f2                	lw	ra,28(sp)
2040597a:	4462                	lw	s0,24(sp)
2040597c:	6105                	addi	sp,sp,32
2040597e:	8082                	ret

20405980 <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
20405980:	1101                	addi	sp,sp,-32
20405982:	ce06                	sw	ra,28(sp)
20405984:	cc22                	sw	s0,24(sp)
20405986:	1000                	addi	s0,sp,32
20405988:	fea42623          	sw	a0,-20(s0)
2040598c:	feb42423          	sw	a1,-24(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
20405990:	fec42503          	lw	a0,-20(s0)
20405994:	37f9                	jal	20405962 <__metal_driver_fixed_clock_get_rate_hz>
20405996:	87aa                	mv	a5,a0
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/src/drivers/fixed-clock.c:20
}
20405998:	853e                	mv	a0,a5
2040599a:	40f2                	lw	ra,28(sp)
2040599c:	4462                	lw	s0,24(sp)
2040599e:	6105                	addi	sp,sp,32
204059a0:	8082                	ret

204059a2 <_exit>:
_exit():
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
204059a2:	1101                	addi	sp,sp,-32
204059a4:	ce06                	sw	ra,28(sp)
204059a6:	cc22                	sw	s0,24(sp)
204059a8:	1000                	addi	s0,sp,32
204059aa:	fea42623          	sw	a0,-20(s0)
/home/fang/wsFreedomStudio/qemu-sifive-e31-hello/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
204059ae:	fec42503          	lw	a0,-20(s0)
204059b2:	eb5ff0ef          	jal	ra,20405866 <metal_shutdown>
